{"version":3,"sources":["components/Header/Header.tsx","components/Week/Week.tsx","components/LoadingContainer/LoadingContainer.tsx","components/Task/Task.tsx","components/ValidationIcon/ValidationIcon.tsx","utils/verifyNumber.ts","utils/distribution.ts","tasks/Task511/Task511.tsx","tasks/Task512/Task512.tsx","tasks/Task522/Task522.tsx","tasks/Task523/Task523.tsx","weeks/Week5/Week5.tsx","components/InputDistributionType/InputDistributionType.tsx","utils/verifyInteger.ts","components/InputDistribution/InputDistribution.tsx","utils/filterObject.ts","tasks/Task61/Task61.tsx","utils/sampleVariance.tsx","utils/normalizeNumber.ts","utils/median.ts","tasks/Task621/Task621.tsx","components/FetchingInputSample/FetchingInputSample.tsx","tasks/Task622/Task622.tsx","weeks/Week6/Week6.tsx","utils/sampleQuantile.ts","tasks/Task7/Task7.tsx","weeks/Week7/Week7.tsx","utils/factorial.ts","tasks/Task8/Task8.tsx","utils/erf.ts","weeks/Week8/Week8.tsx","utils/normStInv.ts","tasks/Task9/Task9.tsx","weeks/Week9/Week9.tsx","tasks/Task10/Task10.tsx","weeks/Week10/Week10.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","tasks/Task61/pythonTab.png"],"names":["Header","className","header","href","target","rel","style","paddingLeft","React","Component","Week","props","weekName","weekClassName","classNames","Array","isArray","push","join","this","toggleable","collapsed","renderContent","LoadingContainer","loading","renderLoading","progress","minProgress","maxProgress","mode","value","children","defaultProps","Task","taskClassName","answerPromise","state","prevProps","prevState","snapshot","isEqual","omit","checkParameters","a","async","renderAnswer","setState","answer","undefined","renderParameters","ValidationIcon","valid","clickable","onClick","cursor","verifyNumber","n","isNaN","DistributionType","Task511","e","p","expr","b","checkRow","param","i","row","currentTarget","trim","map","Fragment","key","minWidth","onChange","onRowChange","legend","onExprChange","sort","reducedN","reduce","ret","v","readOnly","filter","Number","length","Task512","checkArray","params","onParamChange","array","Task522","onEChange","Task523","d","c","onDChange","Week5","multiple","disabled","BERNOULLI","BINOMIAL","GEOMETRIC","POISSON","UNIFORM","EXPONENTIAL","NORMAL","InputDistributionType","exclude","itemTemplate","dropdownTemplate","options","selectItems","includes","option","mnemonic","mnemonics","get","label","verifyInteger","num","isInteger","Map","InputDistribution","distributionParams","distributionType","type","mapValues","String","onDistributionChange","newDistribution","numericParams","object","predicate","forEach","k","filterObject","l","normalSigmaSquare","name","field","integer","paramsComponents","onDistributionParamChange","onDistributionTypeChange","bind","Task61","randomSeed","count","distribution","onNChange","onRandomSeedChange","onCountChange","code","src","pythonTab","alt","sampleVariance","sample","expected","mean","normalizeNumber","scale","Math","round","toFixed","median","Task621","alchemistsRegexp","alchemists","test","placeholder","onAlchemistsChange","replace","split","counts","m","maxCount","maxBy","f","sqrt","FetchingInputSample","previousFetch","Date","now","urlRegex","proxyUrl","url","reload","Promise","resolve","setTimeout","max","fetch","response","ok","text","sampleText","s","Boolean","console","log","onUrlChange","onIconClick","Task622","sample10","sample10000","onSample10Change","onSample10000Change","e10","e10000","d10","d10000","output","property","trueP","trueD","abs","Week6","sampleQuantile","level","index","integerIndex","floor","citySelectItems","avgSalary","Task7","cities","sampleIndices","intervalIndices","checkIndices","indices","verticalAlign","onCitiesChange","onIndexChange","_","numericSampleIndices","numericIntervalIndices","intervalLength","intervalOffset","fixedV","Week7","factorialBuffer","factorial","Task8","specificParameters","specificParametersCheck","specificParametersOutput","onSpecificParameterChange","onSampleChange","avg","variance","theta","sqAvg","exp","sqrt3Variance","x","sum","pow","erf","renderBinomialAnswer","renderGeometricAnswer","renderPoissonAnswer","renderUniformAnswer","renderExponentialAnswer","renderNormalAnswer","Week8","normStInv","q","r","retVal","c1","c2","c3","c4","c5","c6","d1","d2","d3","d4","Task9","paramTitle","quantile","sqrtN","renderGeneralPart","start","end","first","last","Week9","Task10","onMChange","deviation","absDeviationFunc","hypothesis","Week10","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.04ea61e9.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nimport './Header.css';\n\nexport class Header extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <Panel header=\"Добро пожаловать!\">\n                    Это онлайн программа для решения задач из упражнений онлайн-курса Прикладная статистика.\n                    <br />\n\n                    Отдельное спасибо авторам программ и таблиц, на основе которых была создана эта:{' '}\n                    <strong>Никита Черняк</strong> (6.2.2), <strong>Света Пелевина</strong> (7),{' '}\n                    <strong>Andrey Kharchuk</strong> (9: равномерное и нормальное распределения),{' '}\n                    <strong>Павел Нестерчук</strong> (9: распределения геометрическое и Пуассона),{' '}\n                    <strong>Александр Щербаков</strong> (9: последнее задание в нормальном распределении).\n                    <br />\n                    <br />\n\n                    Автор:{' '}\n                    <a href=\"https://byprogminer.ru/vk\" target=\"_blank\" rel=\"noopener noreferrer\">Доморацкий Эридан</a>.{' '}\n                    <strong>В случае ошибки (например, вывода неправильного ответа), пишите, пожалуйста, в ЛС!</strong>\n                    <br />\n\n                    <small>\n                        (донатить сюда: <strong>5321<span style={{ paddingLeft: '0.5ch' }} />{' '}\n                        8687<span style={{ paddingLeft: '0.5ch' }} />2723<span style={{ paddingLeft: '0.5ch' }} />{' '}\n                        3422</strong> — MasterCard Банк СПб;{' '}\n\n                        <a href=\"https://my.qiwi.com/Erydan-DMVuYwfjtW\" target=\"_blank\" rel=\"noopener noreferrer\">Qiwi</a>)\n                    </small>\n                </Panel>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nexport abstract class Week<P = {}, S = {}> extends React.Component<P, S> {\n\n    protected readonly abstract weekName: string;\n    protected readonly className?: string | string[];\n\n    private readonly weekClassName: string;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Week'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.weekClassName = classNames.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.weekClassName}>\n                <Panel header={this.weekName} toggleable collapsed>\n                    {this.renderContent()}\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\nimport { ProgressBar } from 'primereact/progressbar';\n\nexport interface LoadingContainerProps {\n\n    loading: boolean;\n    progress?: number;\n    minProgress: number;\n    maxProgress: number;\n}\n\nexport class LoadingContainer<P = {}, S = {}> extends React.Component<P & React.PropsWithChildren<LoadingContainerProps>, S> {\n\n    static defaultProps: LoadingContainerProps = {\n\n        loading: false,\n        minProgress: 0,\n        maxProgress: 100\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return this.renderLoading();\n        } else {\n            return this.renderContent();\n        }\n    }\n\n    protected renderLoading(): React.ReactNode {\n        const { progress, minProgress, maxProgress } = this.props;\n\n        return (\n            <ProgressBar mode={progress ? 'determinate' : 'indeterminate'} value={typeof progress === 'number' ?\n                (progress - minProgress) / (maxProgress - minProgress) : 0} />\n        );\n    }\n\n    protected renderContent(): React.ReactNode {\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport { LoadingContainer } from '../LoadingContainer/LoadingContainer';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\ninterface TaskState {\n\n    answer?: React.ReactNode;\n}\n\nexport abstract class Task<P = {}, S = {}> extends React.Component<React.PropsWithChildren<P>, S & TaskState> {\n\n    protected readonly className?: string | string[];\n\n    private readonly taskClassName: string;\n    private answerPromise?: Promise<React.ReactNode>;\n\n    state = {} as S & TaskState;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Task'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.taskClassName = classNames.join(' ');\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<React.PropsWithChildren<P>>,\n        prevState: Readonly<S & TaskState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, 'answer'), omit(prevState, 'answer')) && this.checkParameters()) {\n            (async () => {\n                const answerPromise = this.answerPromise = this.renderAnswer();\n                this.setState({ ...this.state, answer: undefined });\n\n                const answer = await answerPromise;\n                if (this.answerPromise === answerPromise) {\n                    this.setState({ ...this.state, answer });\n                }\n            })();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.taskClassName}>\n                {this.renderParameters()}\n\n                {this.checkParameters() && (\n                    <>\n                        <hr />\n\n                        {this.renderLoading()}\n                        </>\n                )}\n            </div>\n        );\n    }\n\n    protected abstract checkParameters(): boolean;\n    protected abstract renderParameters(): React.ReactNode;\n    protected abstract async renderAnswer(): Promise<React.ReactNode>;\n\n    protected renderLoading(): React.ReactNode {\n        const { answer } = this.state;\n\n        return (\n            <LoadingContainer loading={!answer}>\n                {answer}\n            </LoadingContainer>\n        );\n    }\n}\n","import React from 'react';\n\nexport interface ValidationIconProps {\n\n    valid?: boolean;\n    clickable: boolean;\n\n    onClick(): void;\n}\n\nexport class ValidationIcon extends React.Component<ValidationIconProps> {\n\n    static defaultProps: ValidationIconProps = {\n\n        clickable: false,\n\n        onClick() {}\n    };\n\n    render() {\n        const { valid, clickable, onClick } = this.props;\n\n        if (valid === undefined) {\n            return clickable\n                ? (<i className=\"pi pi-spin pi-replay\" />)\n                : (<i className=\"pi pi-spin pi-spinner\" />);\n        } else {\n            return valid\n                ? (<i className=\"pi pi-check\" />)\n                : clickable\n                    ? (<i className=\"pi pi-replay\" style={{ cursor: 'pointer' }} onClick={onClick} />)\n                    : (<i className=\"pi pi-times\" />);\n        }\n    }\n}\n","\nexport function verifyNumber(n?: string): boolean {\n    if (n === undefined) {\n        return false;\n    }\n\n    return !!n && !isNaN(+n);\n}\n","\nexport enum DistributionType {\n\n    BERNOULLI = 1,\n    BINOMIAL,\n    GEOMETRIC,\n    POISSON,\n    UNIFORM,\n    EXPONENTIAL,\n    NORMAL\n}\n\nexport interface BernoulliDistribution {\n\n    type: DistributionType.BERNOULLI;\n    params: { p: number };\n}\n\nexport interface BinomialDistribution {\n\n    type: DistributionType.BINOMIAL;\n    params: {\n        n: number;\n        p: number;\n    }\n}\n\nexport interface GeometricDistribution {\n\n    type: DistributionType.GEOMETRIC;\n    params: { p: number };\n}\n\nexport interface PoissonDistribution {\n\n    type: DistributionType.POISSON;\n    params: { l: number };\n}\n\nexport interface UniformDistribution {\n\n    type: DistributionType.UNIFORM;\n    params: {\n        a: number;\n        b: number;\n    }\n}\n\nexport interface ExponentialDistribution {\n\n    type: DistributionType.EXPONENTIAL;\n    params: { l: number };\n}\n\nexport interface NormalDistribution {\n\n    type: DistributionType.NORMAL;\n    params: {\n        a: number;\n        d: number;\n    }\n}\n\nexport type Distribution =\n    BernoulliDistribution |\n    BinomialDistribution |\n    GeometricDistribution |\n    PoissonDistribution |\n    UniformDistribution |\n    ExponentialDistribution |\n    NormalDistribution;\n\nexport const distributionTypes = [\n    DistributionType.BERNOULLI,\n    DistributionType.BINOMIAL,\n    DistributionType.GEOMETRIC,\n    DistributionType.POISSON,\n    DistributionType.UNIFORM,\n    DistributionType.EXPONENTIAL,\n    DistributionType.NORMAL\n];\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport isEqual from 'lodash/isEqual';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task511State {\n\n    e: [string, string, string, string];\n    p: [string, string, string, string];\n    expr: {\n        a: string;\n        b: string;\n        p: string;\n    }\n}\n\nexport class Task511 extends Task<{}, Task511State> {\n\n    state: Task511State = {\n        e: ['', '', '', ''],\n        p: ['', '', '', ''],\n        expr: { a: '', b: '', p: '' }\n    };\n\n    private static checkRow(row: [string, string, string, string]) {\n        return row.filter(verifyNumber).map(Number).length === 4;\n    }\n\n    protected checkParameters(): boolean {\n        const { e, p, expr } = this.state;\n\n        return Task511.checkRow(e) && Task511.checkRow(p) &&\n            verifyNumber(expr.a) && verifyNumber(expr.b) && verifyNumber(expr.p);\n    }\n\n    private onRowChange(param: 'e' | 'p', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const row = [...this.state[param]];\n\n            row[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [param]: row });\n        };\n    }\n\n    private onExprChange(param: 'a' | 'b' | 'p') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                expr: {\n                    ...this.state.expr,\n\n                    [param]: e.currentTarget.value.trim()\n                }\n            });\n        };\n    }\n\n    protected renderParameters() {\n        const { e, p, expr } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#958;\n                    </span>\n\n                    {[0, 1, 2, 3].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={e[i]} onChange={this.onRowChange('e', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task511.checkRow(e)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        P\n                    </span>\n\n                    {[0, 1, 2, 3].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={p[i]} onChange={this.onRowChange('p', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task511.checkRow(p)} />\n                    </span>\n                </div>\n\n                <Fieldset legend={\n                    <>&#951; = {expr.a || 'a'} &#8901; &#958;<sup>{expr.p || 'p'}</sup> + {expr.b || 'b'}</>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            a =\n                        </span>\n\n                        <InputText value={expr.a} onChange={this.onExprChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(expr.a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            p =\n                        </span>\n\n                        <InputText value={expr.p} onChange={this.onExprChange('p')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(expr.p)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            b =\n                        </span>\n\n                        <InputText value={expr.b} onChange={this.onExprChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(expr.b)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { e, p, expr } = this.state;\n\n        const n: { value: number, p: number }[] = [];\n        for (let i = 0; i < 4; ++i) {\n            n.push({\n                value: +expr.a * (+e[i]) ** +expr.p + +expr.b,\n                p: +p[i]\n            });\n        }\n\n        n.sort((a, b) => a.value - b.value);\n        const reducedN = n.reduce((a: { value: number, p: number }[], b) => {\n            const ret = a.map(a => a.value === b.value ? { value: a.value, p: a.p + b.p } : a);\n\n            if (isEqual(a, ret)) {\n                ret.push(b);\n            }\n\n            return ret;\n        }, []);\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#951; = expr.a &#8901; &#958;<sup>expr.p</sup> + expr.b\n                    </span>\n\n                    {reducedN.map((v, i) => (\n                        <React.Fragment key={v.value}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText readOnly value={v.value} />\n                        </React.Fragment>\n                    ))}\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        P\n                    </span>\n\n                    {reducedN.map((v, i) => (\n                        <React.Fragment key={v.value}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText readOnly value={v.p} />\n                        </React.Fragment>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task512State {\n\n    a: [string, string];\n    b: [string, string];\n}\n\nexport class Task512 extends Task<{}, Task512State> {\n\n    state: Task512State = {\n        a: ['', ''],\n        b: ['', ''],\n    };\n\n    private static checkArray(array: [string, string]) {\n        return array.filter(verifyNumber).map(Number).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { a, b } = this.state;\n\n        return Task512.checkArray(a) && Task512.checkArray(b);\n    }\n\n    private onParamChange(param: 'a' | 'b', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const params = [...this.state[param]];\n\n            params[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [param]: params });\n        };\n    }\n\n    protected renderParameters() {\n        const { a, b } = this.state;\n\n        return (\n            <>\n                <Fieldset legend={\n                    <>&#958; ~ U<sub>{a[0] || 'a'},{b[0] || 'b'}</sub></>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            a =\n                        </span>\n\n                        <InputText value={a[0]} onChange={this.onParamChange('a', 0)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a[0])} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            b =\n                        </span>\n\n                        <InputText value={b[0]} onChange={this.onParamChange('b', 0)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b[0])} />\n                        </span>\n                    </div>\n                </Fieldset>\n\n                <Fieldset legend={\n                    <>&#951; ~ U<sub>{a[1] || 'a'},{b[1] || 'b'}</sub></>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            a =\n                        </span>\n\n                        <InputText value={a[1]} onChange={this.onParamChange('a', 1)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a[1])} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            b =\n                        </span>\n\n                        <InputText value={b[1]} onChange={this.onParamChange('b', 1)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b[1])} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { a, b } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#952;<sub>0</sub> =\n                    </span>\n\n                    <InputText readOnly value={`${+b[1] - +a[1]} / ${+b[0] - +a[0]}`} />\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#952;<sub>1</sub> =\n                    </span>\n\n                    <InputText value={`${+a[0] * +a[1] - +a[0] * +b[1] + +a[1] * (+b[0] - +a[0])} / ${+b[0] - +a[0]}`}\n                               readOnly />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task522State {\n\n    e: [string, string];\n    a: string;\n    b: string;\n}\n\nexport class Task522 extends Task<{}, Task522State> {\n\n    state: Task522State = { e: ['', ''], a: '', b: '' };\n\n    private static checkArray(array: [string, string]) {\n        return array.filter(verifyNumber).map(Number).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { e, a, b } = this.state;\n\n        return Task522.checkArray(e) && verifyNumber(a) && verifyNumber(b);\n    }\n\n    private onEChange(i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const params = [...this.state.e] as [string, string];\n\n            params[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, e: params });\n        };\n    }\n\n    private onParamChange(param: 'a' | 'b') {\n        return (e: React.FormEvent<HTMLInputElement>) => this.setState({\n            ...this.state,\n\n            [param]: e.currentTarget.value\n        });\n    }\n\n    protected renderParameters() {\n        const { e, a, b } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#917;&#958;<sub>1</sub> =\n                    </span>\n\n                    <InputText value={e[0]} onChange={this.onEChange(0)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(e[0])} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#917;&#958;<sub>2</sub> =\n                    </span>\n\n                    <InputText value={e[1]} onChange={this.onEChange(1)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(e[1])} />\n                    </span>\n                </div>\n\n                <Fieldset legend={\n                    <>Найти &#917;({a || 'a'}&#958;<sub>1</sub> + {b || 'b'}&#958;<sub>2</sub>)</>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            a =\n                        </span>\n\n                        <InputText value={a} onChange={this.onParamChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            b =\n                        </span>\n\n                        <InputText value={b} onChange={this.onParamChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { e, a, b } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#917;({a}&#958;<sub>1</sub> + {b}&#958;<sub>2</sub>) =\n                    </span>\n\n                    <InputText readOnly value={+a * +e[0] + +b * +e[1]} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        &#917;(&#958;<sub>1</sub>&#958;<sub>2</sub>) =\n                    </span>\n\n                    <InputText value={+e[0] * +e[1]} readOnly />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task523State {\n\n    d: [string, string];\n    a: string;\n    b: string;\n    c: string;\n}\n\nexport class Task523 extends Task<{}, Task523State> {\n\n    state: Task523State = { d: ['', ''], a: '', b: '', c: '' };\n\n    private static checkArray(array: [string, string]) {\n        return array.filter(verifyNumber).map(Number).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { d, a, b, c } = this.state;\n\n        return Task523.checkArray(d) && verifyNumber(a) && verifyNumber(b) && verifyNumber(c);\n    }\n\n    private onDChange(i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const params = [...this.state.d] as [string, string];\n\n            params[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, d: params });\n        };\n    }\n\n    private onParamChange(param: 'a' | 'b' | 'c') {\n        return (e: React.FormEvent<HTMLInputElement>) => this.setState({\n            ...this.state,\n\n            [param]: e.currentTarget.value\n        });\n    }\n\n    protected renderParameters() {\n        const { d, a, b, c } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        D&#958;<sub>1</sub> =\n                    </span>\n\n                    <InputText value={d[0]} onChange={this.onDChange(0)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(d[0])} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        D&#958;<sub>2</sub> =\n                    </span>\n\n                    <InputText value={d[1]} onChange={this.onDChange(1)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(d[1])} />\n                    </span>\n                </div>\n\n                <Fieldset legend={\n                    <>Найти D({a || 'a'}&#958;<sub>1</sub> + {b || 'b'}&#958;<sub>2</sub> + {c || 'c'})</>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            a =\n                        </span>\n\n                        <InputText value={a} onChange={this.onParamChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            b =\n                        </span>\n\n                        <InputText value={b} onChange={this.onParamChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            c =\n                        </span>\n\n                        <InputText value={c} onChange={this.onParamChange('c')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(c)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { d, a, b, c } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        D({a}&#958;<sub>1</sub> + {b}&#958;<sub>2</sub> + {c}) =\n                    </span>\n\n                    <InputText readOnly value={(+a) ** 2 * +d[0] + (+b) ** 2 * +d[1]} />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task511 } from '../../tasks/Task511/Task511';\nimport { Task512 } from '../../tasks/Task512/Task512';\nimport { Task522 } from '../../tasks/Task522/Task522';\nimport { Task523 } from '../../tasks/Task523/Task523';\n\nexport class Week5 extends Week {\n\n    weekName = 'Неделя 5. Числовые характеристики, сходимость';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1. Задача 1\"><Task511 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 1. Задача 2\"><Task512 /></AccordionTab>\n                <AccordionTab disabled header=\"Упражнение 2. Задача 1 (coming soon)\" />\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task522 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 3\"><Task523 /></AccordionTab>\n            </Accordion>\n        );\n    }\n}\n","import React from 'react';\nimport { Dropdown } from 'primereact/dropdown';\nimport { SelectItem } from 'primereact/api';\n\nimport { DistributionType } from '../../utils/distribution';\n\nexport interface InputDistributionTypeProps {\n\n    value?: DistributionType;\n    exclude: DistributionType[];\n\n    onChange(value?: DistributionType): void;\n}\n\nexport class InputDistributionType extends React.Component<InputDistributionTypeProps> {\n\n    static defaultProps: InputDistributionTypeProps = { exclude: [], onChange() {} };\n\n    private static selectItems: SelectItem[] = [\n        { label: 'Бернулли', value: DistributionType.BERNOULLI },\n        { label: 'Биномиальное', value: DistributionType.BINOMIAL },\n        { label: 'Геометрическое', value: DistributionType.GEOMETRIC },\n        { label: 'Пуассона', value: DistributionType.POISSON },\n        { label: 'Равномерное', value: DistributionType.UNIFORM },\n        { label: 'Показательное', value: DistributionType.EXPONENTIAL },\n        { label: 'Нормальное', value: DistributionType.NORMAL }\n    ];\n\n    private static mnemonics = new Map<DistributionType, [string, string]>([\n        [DistributionType.BERNOULLI, ['B', 'p']],\n        [DistributionType.BINOMIAL, ['Bin', 'n,p']],\n        [DistributionType.GEOMETRIC, ['G', 'p']],\n        [DistributionType.POISSON, ['\\u03A0', '\\u03BB']],\n        [DistributionType.UNIFORM, ['U', 'a,b']],\n        [DistributionType.EXPONENTIAL, ['Exp', '\\u03BB']],\n        [DistributionType.NORMAL, ['N', 'a,\\u03C3\\u00B2']],\n    ]);\n\n    private static dropdownTemplate(option: SelectItem): React.ReactNode {\n        const mnemonic = InputDistributionType.mnemonics.get(option.value)!;\n\n        return (<>{option.label}&nbsp;(<strong>{mnemonic[0]}<sub>{mnemonic[1]}</sub></strong>)</>);\n    }\n\n    render() {\n        const { exclude } = this.props;\n\n        return (\n            <Dropdown itemTemplate={InputDistributionType.dropdownTemplate} value={this.props.value}\n                      options={InputDistributionType.selectItems.filter(v => !exclude.includes(v.value))}\n                      onChange={(e: { value: DistributionType }) => this.props.onChange(e.value)} />\n        );\n    }\n}\n","\nexport function verifyInteger(n?: string): boolean {\n    if (n === undefined) {\n        return false;\n    }\n\n    const num = +n;\n    return !!n && !isNaN(num) && Number.isInteger(num);\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport mapValues from 'lodash/mapValues';\nimport isEqual from 'lodash/isEqual';\n\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { filterObject } from '../../utils/filterObject';\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\nimport { InputDistributionType } from '../InputDistributionType/InputDistributionType';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\n\nexport interface InputDistributionProps {\n\n    value?: Distribution;\n    normalSigmaSquare: boolean;\n    exclude: DistributionType[];\n\n    onChange(value?: Distribution): void;\n}\n\ninterface InputDistributionState {\n\n    distributionType?: DistributionType;\n    distributionParams: { [key: string]: string };\n}\n\nexport class InputDistribution extends React.Component<InputDistributionProps, InputDistributionState> {\n\n    static defaultProps: InputDistributionProps = {\n\n        normalSigmaSquare: true,\n        exclude: [],\n\n        onChange() {}\n    };\n\n    state: InputDistributionState = { distributionParams: {} };\n\n    componentDidUpdate(\n        prevProps: Readonly<InputDistributionProps>,\n        prevState: Readonly<InputDistributionState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(this.props.value, prevProps.value) && this.props.value) {\n            this.setState({\n                ...this.state,\n\n                distributionType: this.props.value.type,\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    ...mapValues(this.props.value.params, String)\n                }\n            });\n        }\n\n        if (!isEqual(this.state, prevState)) {\n            this.onDistributionChange();\n        }\n    }\n\n    private onDistributionTypeChange(distributionType: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onDistributionParamChange(param: string) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    [param]: e.currentTarget.value.trim()\n                }\n            });\n        };\n    }\n\n    private onDistributionChange() {\n        const { distributionType, distributionParams } = this.state;\n\n        const numericParams = mapValues(filterObject(distributionParams, verifyNumber), Number);\n        let newDistribution: Distribution | undefined;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                if (numericParams.p !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams.p }\n                    };\n                }\n                break;\n\n            case DistributionType.BINOMIAL:\n                if (numericParams.n !== undefined && numericParams.p !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            n: numericParams.n,\n                            p: numericParams.p\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.GEOMETRIC:\n                if (numericParams.p !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams.p }\n                    };\n                }\n                break;\n\n            case DistributionType.POISSON:\n                if (numericParams.l !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams.l }\n                    };\n                }\n                break;\n\n            case DistributionType.UNIFORM:\n                if (numericParams.a !== undefined && numericParams.b !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams.a,\n                            b: numericParams.b\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                if (numericParams.l !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams.l }\n                    };\n                }\n                break;\n\n            case DistributionType.NORMAL:\n                if (numericParams.a !== undefined && numericParams.d !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams.a,\n                            d: numericParams.d\n                        }\n                    };\n                }\n                break;\n        }\n\n        this.props.onChange(newDistribution);\n    }\n\n    render() {\n        const { normalSigmaSquare, exclude } = this.props;\n        const { distributionType, distributionParams } = this.state;\n\n        const params: { name: string, field: string, integer?: true }[] = [];\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                params.push({ name: 'p', field: 'p' });\n                break;\n\n            case DistributionType.BINOMIAL:\n                params.push({ name: 'n', field: 'n', integer: true });\n                params.push({ name: 'p', field: 'p' });\n                break;\n\n            case DistributionType.GEOMETRIC:\n                params.push({ name: 'p', field: 'p' });\n                break;\n\n            case DistributionType.POISSON:\n                params.push({ name: '\\u03BB', field: 'l' });\n                break;\n\n            case DistributionType.UNIFORM:\n                params.push({ name: 'a', field: 'a' });\n                params.push({ name: 'b', field: 'b' });\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                params.push({ name: '\\u03BB', field: 'l' });\n                break;\n\n            case DistributionType.NORMAL:\n                params.push({ name: 'a', field: 'a' });\n                params.push({ name: '\\u03C3' + (normalSigmaSquare ? '\\u00B2' : ''), field: 'd' });\n                break;\n        }\n\n        const paramsComponents: JSX.Element[] = params\n            .map(param => {\n                const value = distributionParams[param.field] ?? '';\n\n                return (\n                    <div key={param.name} className=\"p-inputgroup half-margin-bottom-not-last\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>{param.name}</strong> =\n                        </span>\n\n                        <InputText value={value} onChange={this.onDistributionParamChange(param.field)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={param.integer ? verifyInteger(value) : verifyNumber(value)} />\n                        </span>\n                    </div>\n                );\n            });\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom-not-last\">\n                    <span className=\"p-inputgroup-addon\">\n                        Распределение:\n                    </span>\n\n                    <InputDistributionType exclude={exclude} value={this.state.distributionType}\n                                           onChange={this.onDistributionTypeChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={!!this.state.distributionType} />\n                    </span>\n                </div>\n\n                {paramsComponents}\n            </>\n        );\n    }\n}\n","import forEach from 'lodash/forEach'\n\nexport function filterObject<V = any, K extends keyof any = keyof {}>(object: Record<K, V>, predicate: (v: V, k: K) => boolean) {\n    const ret: Record<K, V> = {} as Record<K, V>;\n\n    forEach(object, (v, k) => {\n        if (predicate(v, k as K)) {\n            ret[k as K] = v;\n        }\n    });\n\n    return ret;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { InputDistribution } from '../../components/InputDistribution/InputDistribution';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\n\nimport pythonTab from './pythonTab.png';\n\ninterface Task61State {\n\n    n: string;\n    distribution?: Distribution;\n    randomSeed: string;\n    count: string;\n}\n\nexport class Task61 extends Task<{}, Task61State> {\n\n    state: Task61State = { n: '', randomSeed: '', count: '5' };\n\n    private onNChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            n: e.currentTarget.value.trim()\n        });\n    }\n\n    private onDistributionChange(distribution?: Distribution) {\n        this.setState({ ...this.state, distribution });\n    }\n\n    private onRandomSeedChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            randomSeed: e.currentTarget.value.trim()\n        });\n    }\n\n    private onCountChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            count: e.currentTarget.value.trim()\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { n, distribution, randomSeed, count } = this.state;\n\n        return verifyNumber(n) && distribution !== undefined && verifyNumber(randomSeed) && verifyInteger(count);\n    }\n\n    protected renderParameters() {\n        const { n, distribution, randomSeed, count } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Объём <strong>n</strong> =\n                    </span>\n\n                    <InputText value={n} onChange={this.onNChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(n)} />\n                    </span>\n                </div>\n\n                <InputDistribution normalSigmaSquare={false} value={distribution}\n                                   onChange={this.onDistributionChange.bind(this)} />\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>random seed</strong> =\n                    </span>\n\n                    <InputText value={randomSeed} onChange={this.onRandomSeedChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(randomSeed)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Количество первых и последних элементов:\n                    </span>\n\n                    <InputText value={count} onChange={this.onCountChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyInteger(count)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, distribution, randomSeed, count } = this.state;\n\n        if (distribution === undefined) {\n            return;\n        }\n\n        let code = `\nimport numpy as np\nnp.random.seed(${randomSeed})\n`;\n\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                code += `sample = np.random.binomial(1, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.BINOMIAL:\n                code += `sample = np.random.binomial(${distribution.params.n}, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.GEOMETRIC:\n                code += `sample = np.random.geometric(${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.POISSON:\n                code += `sample = np.random.poisson(${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.UNIFORM:\n                code += `sample = np.random.uniform(${distribution.params.a}, ${distribution.params.b}, ${n})`;\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                code += `sample = np.random.exponential(1 / ${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.NORMAL:\n                code += `sample = np.random.normal(${distribution.params.a}, ${distribution.params.d}, ${n})`;\n                break;\n        }\n\n        code += `\nprint(\",\".join([str(round(sample[i], 2)) for i in range(${count})]))\nprint(\",\".join([str(round(sample[${+n - +count} + i], 2)) for i in range(${count})]))\nprint(sum(sample)/len(sample))\n`;\n\n        return (\n            <>\n                {+count === 3 && (\n                    <>\n                        <strong>Внимание!</strong>{' '}\n\n                        Убедитесь, что вы открыли в курсе вкладку <strong>Упражнение 6.1 (Python)</strong>,{' '}\n                        а не Упражнение 6.1 (<strong>Excel</strong>). Эта вкладка <strong>предпоследняя</strong>{' '}\n                        в разделе!\n                        <br />\n\n                        <img src={pythonTab} alt=\"вкладка Python\" />\n                        <hr />\n                    </>\n                )}\n\n                <div className=\"margin-bottom\">\n                    Выполните следущий код в Python-интерпретаторе (например, на сайте <a href=\"https://repl.it\" target=\"_blank\" rel=\"noopener noreferrer\">repl.it</a>):\n                </div>\n\n                <code className=\"margin-bottom\">{code.trim()}</code>\n\n                И скопируйте выведенные на экран строки в поля для ответов.\n            </>\n        );\n    }\n}\n","import mean from 'lodash/mean';\n\nexport function sampleVariance(sample: number[], expected?: number) {\n    const e = expected ? expected : mean(sample);\n\n    return mean(sample.map(v => (v - e) ** 2));\n}\n","\nexport function normalizeNumber(n: number, scale: number = 15) {\n    const c = 10 ** scale;\n\n    return +(Math.round(n * c) / c).toFixed(scale);\n}\n","\nexport function median(sample: number[]) {\n    return sample.length % 2 === 0\n        ? (sample[sample.length / 2 - 1] + sample[sample.length / 2]) / 2\n        : sample[(sample.length - 1) / 2];\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport maxBy from 'lodash/maxBy';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\nimport { median } from '../../utils/median';\n\ninterface Task621State {\n\n    alchemists: string;\n}\n\ninterface CountObject {\n\n    value: number;\n    count: number;\n}\n\nexport class Task621 extends Task<{}, Task621State> {\n\n    private alchemistsRegexp = /^( *\\()?( *\\d+( *,)?)* *\\d+? *(\\) *)?$/;\n\n    state: Task621State = { alchemists: '' };\n\n    private onAlchemistsChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            alchemists: e.currentTarget.value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        return this.alchemistsRegexp.test(this.state.alchemists);\n    }\n\n    protected renderParameters() {\n        const { alchemists } = this.state;\n\n        return (\n            <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\">\n                    Выборка:\n                </span>\n\n                <InputText placeholder=\"(a, b, c...)\" value={alchemists}\n                           onChange={this.onAlchemistsChange.bind(this)} />\n\n                <span className=\"p-inputgroup-addon\">\n                    <ValidationIcon valid={this.alchemistsRegexp.test(alchemists)} />\n                </span>\n            </div>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { alchemists } = this.state;\n\n        if (!alchemists) {\n            return;\n        }\n\n        const sample = alchemists.replace(/[()]/g, '').trim()\n            .split(/[,\\s]+/).map(Number).sort((a, b) => a - b);\n\n        const counts: CountObject[] = [1, 2, 3, 4, 5, 6]\n            .map(i => ({value: i, count: sample.filter(v => v === i).length}));\n\n        const e = mean(sample);\n        const d = sampleVariance(sample, e);\n        const m = median(sample);\n\n        const maxCount = maxBy(counts, v => v.count)?.count;\n        const mode = counts.filter(v => v.count === maxCount)\n            .map(v => v.value).sort((a, b) => a - b)[0];\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                    {[(v: CountObject) => v.value < 4, (v: CountObject) => v.value > 3].map(f => (\n                        <tr key={String(f)}>\n                            {counts.filter(f).map(v => (\n                                <td key={v.value}>\n                                    P(&#958;<sup>*</sup> = {v.value}) =\n                                    <InputText readOnly value={v.count === 0 ? '0' : `${v.count} / ${sample.length}`} />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                Математическое ожидание: <InputText readOnly value={normalizeNumber(e)} /><br />\n                Дисперсия: <InputText readOnly value={normalizeNumber(d)} /><br />\n                Среднеквадратическое отклонение: <InputText readOnly value={normalizeNumber(Math.sqrt(d))} /><br />\n                Медиана: <InputText readOnly value={m} /><br />\n                Мода: <InputText readOnly value={mode} /><br />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport { InputText } from 'primereact/inputtext';\n\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface FetchingInputSampleProps {\n\n    onChange(sample?: number[]): void;\n}\n\ninterface FetchingInputSampleState {\n\n    url: string;\n    loading: boolean;\n    sample?: number[];\n}\n\nexport class FetchingInputSample extends React.Component<FetchingInputSampleProps, FetchingInputSampleState> {\n\n    private previousFetch: number = Date.now();\n\n    private urlRegex = /^[^:/?#]+:\\/\\/[^/?#]*[^?#]*(\\?([^#]*))?(#(.*))?$/;\n    private proxyUrl = 'https://proxy.byprogminer.ru/?';\n\n    state: FetchingInputSampleState = {\n        url: '',\n        loading: false\n    };\n\n    componentDidUpdate(\n        prevProps: Readonly<FetchingInputSampleProps>,\n        prevState: Readonly<FetchingInputSampleState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, ['loading', 'sample']), omit(prevState, ['loading', 'sample']))) {\n            this.reload();\n        }\n    }\n\n    private reload() {\n        const { url } = this.state;\n\n        (async () => {\n            try {\n                if (this.urlRegex.test(url)) {\n                    await new Promise(resolve =>\n                        setTimeout(resolve, Math.max(0, this.previousFetch + 100 - Date.now())));\n\n                    this.previousFetch = Date.now();\n                    const response = await fetch(this.proxyUrl + url);\n\n                    if (response.ok) {\n                        const sampleText = await response.text();\n                        const sample = sampleText.split('\\n')\n                            .map(s => s.trim()).filter(Boolean).map(Number)\n                            .filter(v => !isNaN(v)).sort((a, b) => a - b);\n\n                        if (sample.length > 0) {\n                            if (this.state.url === url) {\n                                this.setState({ ...this.state, loading: false, sample });\n                                this.props.onChange(sample);\n                            }\n\n                            return;\n                        }\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n\n            this.setState({ ...this.state, loading: false, sample: undefined });\n            this.props.onChange(undefined);\n        })();\n    }\n\n    private onUrlChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            url: e.currentTarget.value.trim(),\n            loading: true\n        });\n    }\n\n    private onIconClick() {\n        this.setState({ ...this.state, loading: true });\n        this.reload();\n    }\n\n    render() {\n        const { url, loading, sample } = this.state;\n\n        return (\n            <>\n                <InputText placeholder=\"URL-адрес выборки\" value={url} onChange={this.onUrlChange.bind(this)} />\n\n                <span className=\"p-inputgroup-addon\">\n                    <ValidationIcon clickable={this.urlRegex.test(url)} valid={loading ? undefined : !!sample}\n                                    onClick={this.onIconClick.bind(this)} />\n                </span>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { InputDistribution } from '../../components/InputDistribution/InputDistribution';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\n\ninterface Task622State {\n\n    sample10?: number[];\n    sample10000?: number[];\n    distribution?: Distribution;\n}\n\nexport class Task622 extends Task<{}, Task622State> {\n\n    state: Task622State = {};\n\n    private onSample10Change(sample10?: number[]) {\n        this.setState({...this.state, sample10});\n    }\n\n    private onSample10000Change(sample10000?: number[]) {\n        this.setState({...this.state, sample10000});\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { sample10, sample10000, distribution } = this.state;\n\n        return !!sample10 && !!sample10000 && !!distribution;\n    }\n\n    protected renderParameters() {\n        const { distribution } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка объёма <strong>n = 10</strong>:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSample10Change.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка объёма <strong>n = 10000</strong>:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSample10000Change.bind(this)} />\n                </div>\n\n                <InputDistribution value={distribution} onChange={this.onDistributionChange.bind(this)} />\n            </>\n        );\n    }\n\n    private static output(property: string, v: number, p: number, trueP: number, d: number, trueD: number): React.ReactNode {\n        return (\n            <>\n                Для выборки объёма <strong>{v}</strong>:<br />\n                Оценка <strong>{property}</strong>: <InputText readOnly value={normalizeNumber(p)} /><br />\n                Погрешность оценки: <InputText readOnly value={normalizeNumber(Math.abs(p - trueP))} /><br />\n                Оценка дисперсии: <InputText readOnly value={normalizeNumber(d)} /><br />\n                Погрешность оценки дисперсии: <InputText readOnly value={normalizeNumber(Math.abs(d - trueD))} />\n            </>\n        )\n    }\n\n    protected async renderAnswer() {\n        const { sample10, sample10000, distribution } = this.state;\n\n        if (!sample10 || !sample10000 || !distribution) {\n            return;\n        }\n\n        const e10 = mean(sample10);\n        const e10000 = mean(sample10000);\n        const d10 = sampleVariance(sample10, e10);\n        const d10000 = sampleVariance(sample10000, e10000);\n\n        let output: (v: number, e: number, d: number) => React.ReactNode;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e,\n                    distribution.params.p,\n                    d,\n                    distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.BINOMIAL:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e / distribution.params.n,\n                    distribution.params.p,\n                    d,\n                    distribution.params.n * distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    1 / e,\n                    distribution.params.p,\n                    d,\n                    (1 - distribution.params.p) / distribution.params.p ** 2\n                );\n                break;\n\n            case DistributionType.POISSON:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    e,\n                    distribution.params.l,\n                    d,\n                    distribution.params.l\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    2 * e - distribution.params.b,\n                    distribution.params.a,\n                    d,\n                    (distribution.params.b - distribution.params.a) ** 2 / 12\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    1 / e,\n                    distribution.params.l,\n                    d,\n                    1 / distribution.params.l ** 2\n                );\n                break;\n\n            case DistributionType.NORMAL:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    e,\n                    distribution.params.a,\n                    d,\n                    distribution.params.d\n                );\n                break;\n        }\n\n        return (\n            <>\n                {output(10, e10, d10)}\n\n                <hr />\n\n                {output(10000, e10000, d10000)}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task61 } from '../../tasks/Task61/Task61';\nimport { Task621 } from '../../tasks/Task621/Task621';\nimport { Task622 } from '../../tasks/Task622/Task622';\n\nexport class Week6 extends Week {\n\n    weekName = 'Неделя 6. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1 (Python)\"><Task61 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 1\"><Task621 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task622 /></AccordionTab>\n            </Accordion>\n        );\n    }\n}\n","\nexport function sampleQuantile(level: number, sample: number[]) {\n    const index = sample.length * level;\n\n    const integerIndex = Math.floor(index);\n\n    if (!Number.isInteger(index)) {\n        return sample[integerIndex];\n    } else {\n        return (sample[integerIndex - 1] + sample[integerIndex]) / 2;\n    }\n}\n","import React from 'react';\nimport { SelectItem } from 'primereact/api';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { median } from '../../utils/median';\nimport { sampleQuantile } from '../../utils/sampleQuantile';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\n\nconst citySelectItems: SelectItem[] = [\n    { label: 'Алтайский край', value: 0 },\n    { label: 'Амурская область', value: 1 },\n    { label: 'Архангельская область', value: 2 },\n    { label: 'Астраханская область', value: 3 },\n    { label: 'Белгородская область', value: 4 },\n    { label: 'Брянская область', value: 5 },\n    { label: 'Владимирская область', value: 6 },\n    { label: 'Волгоградская область', value: 7 },\n    { label: 'Вологодская область', value: 8 },\n    { label: 'Воронежская область', value: 9 },\n    { label: 'г. Москва', value: 10 },\n    { label: 'г. Санкт-Петербург', value: 11 },\n    { label: 'г. Севастополь', value: 12 },\n    { label: 'Еврейская АО', value: 13 },\n    { label: 'Забайкальский край', value: 14 },\n    { label: 'Ивановская область', value: 15 },\n    { label: 'Иркутская область', value: 16 },\n    { label: 'Кабардино-Балкарская Республика', value: 17 },\n    { label: 'Калининградская область', value: 18 },\n    { label: 'Калужская область', value: 19 },\n    { label: 'Камчатский край', value: 20 },\n    { label: 'Карачаево-Черкесская Республика', value: 21 },\n    { label: 'Кемеровская область', value: 22 },\n    { label: 'Кировская область', value: 23 },\n    { label: 'Костромская область', value: 24 },\n    { label: 'Краснодарский край', value: 25 },\n    { label: 'Красноярский край', value: 26 },\n    { label: 'Курганская область', value: 27 },\n    { label: 'Курская область', value: 28 },\n    { label: 'Ленинградская область', value: 29 },\n    { label: 'Липецкая область', value: 30 },\n    { label: 'Магаданская обл.', value: 31 },\n    { label: 'Московская обл.', value: 32 },\n    { label: 'Мурманская обл.', value: 33 },\n    { label: 'Ненецкий АО', value: 34 },\n    { label: 'Нижегородская область', value: 35 },\n    { label: 'Новгородская область', value: 36 },\n    { label: 'Новосибирская область', value: 37 },\n    { label: 'Омская область', value: 38 },\n    { label: 'Оренбургская область', value: 39 },\n    { label: 'Орловская область', value: 40 },\n    { label: 'Пензенская область', value: 41 },\n    { label: 'Пермский край', value: 42 },\n    { label: 'Приморский край', value: 43 },\n    { label: 'Псковская область', value: 44 },\n    { label: 'Республика Адыгея', value: 45 },\n    { label: 'Республика Алтай', value: 46 },\n    { label: 'Республика Башкортостан', value: 47 },\n    { label: 'Республика Бурятия', value: 48 },\n    { label: 'Республика Дагестан', value: 49 },\n    { label: 'Республика Ингушетия', value: 50 },\n    { label: 'Республика Калмыкия', value: 51 },\n    { label: 'Республика Карелия', value: 52 },\n    { label: 'Республика Коми', value: 53 },\n    { label: 'Республика Крым', value: 54 },\n    { label: 'Республика Марий Эл', value: 55 },\n    { label: 'Республика Мордовия', value: 56 },\n    { label: 'Республика Саха (Якутия)', value: 57 },\n    { label: 'Республика Северная Осетия - Алания', value: 58 },\n    { label: 'Республика Татарстан', value: 59 },\n    { label: 'Республика Тыва', value: 60 },\n    { label: 'Республика Хакасия', value: 61 },\n    { label: 'Ростовская область', value: 62 },\n    { label: 'Рязанская область', value: 63 },\n    { label: 'Самарская область', value: 64 },\n    { label: 'Саратовская область', value: 65 },\n    { label: 'Сахалинская обл.', value: 66 },\n    { label: 'Свердловская область', value: 67 },\n    { label: 'Смоленская область', value: 68 },\n    { label: 'Ставропольский край', value: 69 },\n    { label: 'Тамбовская область', value: 70 },\n    { label: 'Тверская область', value: 71 },\n    { label: 'Томская область', value: 72 },\n    { label: 'Тульская область', value: 73 },\n    { label: 'Тюменская обл.', value: 74 },\n    { label: 'Удмуртская Республика', value: 75 },\n    { label: 'Ульяновская область', value: 76 },\n    { label: 'Хабаровский край', value: 77 },\n    { label: 'Ханты-Мансийский АО (Югра)', value: 78 },\n    { label: 'Челябинская область', value: 79 },\n    { label: 'Чеченская Республика', value: 80 },\n    { label: 'Чувашская Республика', value: 81 },\n    { label: 'Чукотский АО', value: 82 },\n    { label: 'Ямало-Ненецкий АО', value: 83 },\n    { label: 'Ярославская область', value: 84 },\n];\n\nconst avgSalary: number[] = [25960, 43156, 47526, 32166, 31163, 27403, 31647, 30097, 36081, 31286, 78946, 58310,\n    31008, 39797, 40728, 26053, 42921, 25318, 32473, 38005, 71553, 25699, 37857, 27580, 27948, 33258, 44692, 27887,\n    30125, 42434, 30775, 101662, 50135, 56005, 77277, 32973, 30820, 36048, 32013, 29892, 26834, 30112, 34809, 42026,\n    27339, 27455, 37764, 33137, 37867, 24550, 25663, 25719, 39755, 48316, 28400, 28232, 26999, 65881, 26108, 35722,\n    35619, 37949, 30647, 31192, 33086, 26555, 73261, 37605, 29566, 28256, 26754, 30764, 39707, 33933, 61937, 31990,\n    27927, 46583, 62555, 34944, 26108, 27028, 96930, 86560, 33882];\n\ninterface Task7State {\n\n    cities: number[];\n    sampleIndices: [string, string, string];\n    intervalIndices: [string, string, string];\n}\n\nexport class Task7 extends Task<{}, Task7State> {\n\n    state: Task7State = {\n        cities: [],\n        sampleIndices: ['', '', ''],\n        intervalIndices: ['', '', '']\n    };\n\n    private static checkIndices(indices: [string, string, string], max: number = 10) {\n        return indices.filter(verifyInteger).map(Number).filter(v => v > 0 && v <= max).length === 3;\n    }\n\n    protected checkParameters(): boolean {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n\n        return Task7.checkIndices(sampleIndices, avgSalary.length - cities.length) &&\n            Task7.checkIndices(intervalIndices);\n    }\n\n    private onCitiesChange(e: { value: number[] }) {\n        this.setState({\n            ...this.state,\n\n            cities: e.value\n        });\n    }\n\n    private onIndexChange(name: 'sampleIndices' | 'intervalIndices', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const indices = [...this.state[name]];\n\n            indices[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [name]: indices });\n        }\n    }\n\n    protected renderParameters() {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выберите города, <strong>не</strong> попавшие в выборку:\n                    </span>\n\n                    <MultiSelect filter value={cities} options={citySelectItems} style={{ verticalAlign: 'middle' }}\n                                 onChange={this.onCitiesChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Введите номера необходимых элементов выборки (<strong>X</strong>):\n                    </span>\n\n                    {[0, 1, 2].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={sampleIndices[i]}\n                                       onChange={this.onIndexChange('sampleIndices', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task7.checkIndices(sampleIndices, avgSalary.length - cities.length)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Введите номера необходимых интервалов (<strong>A</strong>):&nbsp;\n                    </span>\n\n                    {[0, 1, 2].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={intervalIndices[i]}\n                                       onChange={this.onIndexChange('intervalIndices', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task7.checkIndices(intervalIndices)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer(): Promise<React.ReactNode> {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n        const sample = avgSalary.filter((_, i) => !cities.includes(i)).sort((a, b) => a - b);\n\n        const numericSampleIndices = sampleIndices.map(v => +v - 1);\n        const numericIntervalIndices = intervalIndices.map(v => +v - 1);\n\n        const a: number[] = [];\n        const intervalLength = (sample[sample.length - 1] - sample[0]) / 10;\n        for (let i = 0; i < 10; ++i) {\n            const intervalOffset = sample[0] + i * intervalLength;\n\n            a[i] = sample.filter((v) => v >= intervalOffset && v < intervalOffset + intervalLength).length;\n        }\n\n        const e = mean(sample);\n        const v = sampleVariance(sample, e);\n        const fixedV = v * sample.length / (sample.length - 1);\n        const m = median(sample);\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericSampleIndices.map(v => (\n                                <td key={v}>\n                                    <strong>X<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={sample[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericIntervalIndices.map(v => (\n                                <td key={v}>\n                                    <strong>A<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={a[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                Выборочное среднее:&nbsp;\n                <InputText readOnly value={normalizeNumber(e)} />\n                <br />\n\n                Смещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={normalizeNumber(v)} />\n                <br />\n\n                Несмещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={normalizeNumber(fixedV)} />\n                <br />\n\n                Выборочная медиана:&nbsp;\n                <InputText readOnly value={m} />\n                <br />\n\n                Квантиль уровня <strong>0.25</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.25, sample)} />\n                <br />\n\n                Квантиль уровня <strong>0.75</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.75, sample)} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task7 } from '../../tasks/Task7/Task7';\n\nexport class Week7 extends Week {\n\n    weekName = 'Неделя 7. Выборочные характеристики';\n\n    protected renderContent() {\n        return (<Task7 />);\n    }\n}\n","const factorialBuffer: number[] = [1, 1, 2];\n\nexport function factorial(n: number): number {\n    if (factorialBuffer[n]) {\n        return factorialBuffer[n];\n    }\n\n    if (n < 1) {\n        return 0;\n    }\n\n    n = Math.floor(n);\n    return factorialBuffer[n] = factorial(n - 1) * n;\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { DistributionType } from '../../utils/distribution';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { InputDistributionType } from '../../components/InputDistributionType/InputDistributionType';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { factorial } from '../../utils/factorial';\nimport { erf } from '../../utils/erf';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task8State {\n\n    sample?: number[];\n    distributionType?: DistributionType;\n    specificParameters: { [key: string]: string };\n}\n\nexport class Task8 extends Task<{}, Task8State> {\n\n    state: Task8State = { specificParameters: {} };\n\n    protected checkParameters(): boolean {\n        const { sample, distributionType, specificParameters } = this.state;\n\n        let specificParametersCheck: boolean = true;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersCheck = verifyInteger(specificParameters.m) && +specificParameters.m > 0 &&\n                    verifyInteger(specificParameters.k) && +specificParameters.k <= +specificParameters.m;\n                break;\n\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersCheck = verifyInteger(specificParameters.k) && +specificParameters.k > 0;\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersCheck = verifyNumber(specificParameters.a) && verifyNumber(specificParameters.b);\n                break;\n        }\n\n        return !!sample && !!distributionType && specificParametersCheck;\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onDistributionTypeChange(distributionType?: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onSpecificParameterChange(name: 'a' | 'b' | 'm' | 'k') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                specificParameters: {\n                    ...this.state.specificParameters,\n\n                    [name]: e.currentTarget.value.trim()\n                }\n            });\n        }\n    }\n\n    protected renderParameters() {\n        const { distributionType, specificParameters } = this.state;\n\n        let specificParametersOutput: React.ReactNode;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersOutput = (\n                    <>\n                        <Fieldset legend=\"Третье задание:\" className=\"half-margin-bottom\">\n                            <div className=\"p-inputgroup\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>m</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.m ?? ''}\n                                           onChange={this.onSpecificParameterChange('m')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyInteger(specificParameters.m) &&\n                                        +specificParameters.m > 0} />\n                                </span>\n                            </div>\n                        </Fieldset>\n\n                        <Fieldset legend=\"Четвёртое задание:\">\n                            <div className=\"p-inputgroup\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>k</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.k ?? ''}\n                                           onChange={this.onSpecificParameterChange('k')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyInteger(specificParameters.k) &&\n                                        +specificParameters.k <= +specificParameters.m} />\n                                </span>\n                            </div>\n                        </Fieldset>\n                    </>\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersOutput = (\n                    <Fieldset legend=\"Четвёртое задание:\">\n                        <div className=\"p-inputgroup\">\n                            <span className=\"p-inputgroup-addon\">\n                                <strong>k</strong> =\n                            </span>\n\n                            <InputText value={specificParameters.k ?? ''}\n                                       onChange={this.onSpecificParameterChange('k')} />\n\n                            <span className=\"p-inputgroup-addon\">\n                                <ValidationIcon valid={verifyInteger(specificParameters.k) &&\n                                    +specificParameters.k > 0} />\n                            </span>\n                        </div>\n                    </Fieldset>\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersOutput = (\n                        <Fieldset legend=\"Четвёртое задание:\">\n                            <div className=\"p-inputgroup half-margin-bottom\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>a</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.a ?? ''}\n                                           onChange={this.onSpecificParameterChange('a')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyNumber(specificParameters.a)} />\n                                </span>\n                            </div>\n\n                            <div className=\"p-inputgroup\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>b</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.b ?? ''}\n                                           onChange={this.onSpecificParameterChange('b')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyNumber(specificParameters.b)} />\n                                </span>\n                            </div>\n                        </Fieldset>\n                );\n                break;\n        }\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка для задания:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom-not-last\">\n                    <span className=\"p-inputgroup-addon\">\n                        Распределение:\n                    </span>\n\n                    <InputDistributionType exclude={[DistributionType.BERNOULLI]} value={distributionType}\n                                           onChange={this.onDistributionTypeChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={!!this.state.distributionType} />\n                    </span>\n                </div>\n\n                {specificParametersOutput}\n            </>\n        );\n    }\n\n    private renderBinomialAnswer(avg: number, variance: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const m = +specificParameters.m;\n        const k = +specificParameters.k;\n\n        const theta = avg / m;\n        const p = factorial(m) / (factorial(m - k) * factorial(k)) * theta ** k * (1 - theta) ** (m - k);\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(1 - variance / avg)} />\n                <br />\n\n                Оценка метода моментов <strong>m&#770;</strong>:&nbsp;\n                <InputText readOnly value={Math.round(avg ** 2 / (avg - variance))} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong> для&nbsp;\n                <strong>m = {m}</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Вероятность, что завтра опоздает ровно <strong>k = {k}</strong> поездов:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderGeometricAnswer(avg: number, sqAvg: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n\n        const theta = 1 / avg;\n        const p = (1 - theta) ** (k - 1) * theta;\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((-1 + Math.sqrt(1 + 8 * sqAvg)) / (2 * sqAvg))} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Вероятность, что музыкант убежит, если в него попало ровно <strong>k = {k}</strong> помидоров:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderPoissonAnswer(avg: number, sqAvg: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const p = Math.exp(-avg) * avg ** k / factorial(k);\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((-1 + Math.sqrt(1 + 4 * sqAvg)) / 2)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Вероятность, что в течение случайных пяти минут поступит <strong>k = {k}</strong> звонков:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderUniformAnswer(avg: number, variance: number): React.ReactNode {\n        const { sample, specificParameters } = this.state;\n\n        if (!sample) {\n            return;\n        }\n\n        const sqrt3Variance = Math.sqrt(3 * variance);\n        const b = sample[sample.length - 1];\n        const a = sample[0];\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg - sqrt3Variance)} />\n                <br />\n\n                Оценка метода моментов <strong>b&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg + sqrt3Variance)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>b</strong>:&nbsp;\n                <InputText readOnly value={b} />\n                <br />\n\n                Вероятность обрушения на участке от&nbsp;\n                <strong>a = {specificParameters.a}</strong> до&nbsp;\n                <strong>b = {specificParameters.b}</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((+specificParameters.b - +specificParameters.a) / (b - a))} />\n            </>\n        );\n    }\n\n    private renderExponentialAnswer(avg: number, sqAvg: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n\n        const theta = 1 / avg;\n        const p = 1 - Math.exp(-theta * k);\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(Math.sqrt(2 / sqAvg))} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Вероятность, что при следующем звонке с оператором поговорят меньше <strong>k = {k}</strong> секунд:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderNormalAnswer(avg: number, variance: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const p = (1 + erf((k - avg) / Math.sqrt(2 * variance))) / 2;\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(variance)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Вероятность, что в случайно купленной бутылке молока менее <strong>k = {k}</strong> миллилитров молока:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, distributionType } = this.state;\n\n        if (!sample || !distributionType) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const sqAvg = mean(sample.map(x => x ** 2));\n        const sampleVariance = sqAvg - avg ** 2;\n\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                return this.renderBinomialAnswer(avg, sampleVariance);\n\n            case DistributionType.GEOMETRIC:\n                return this.renderGeometricAnswer(avg, sqAvg);\n\n            case DistributionType.POISSON:\n                return this.renderPoissonAnswer(avg, sqAvg);\n\n            case DistributionType.UNIFORM:\n                return this.renderUniformAnswer(avg, sampleVariance);\n\n            case DistributionType.EXPONENTIAL:\n                return this.renderExponentialAnswer(avg, sqAvg);\n\n            case DistributionType.NORMAL:\n                return this.renderNormalAnswer(avg, sampleVariance);\n        }\n    }\n}\n","\n// https://gist.github.com/kcrt/6210661\nexport function erf(x: number) {\n    // erf(x) = 2/sqrt(pi) * integrate(from=0, to=x, e^-(t^2) ) dt\n    // with using Taylor expansion,\n    //        = 2/sqrt(pi) * sigma(n=0 to +inf, ((-1)^n * x^(2n+1))/(n! * (2n+1)))\n    // calculating n=0 to 50 bellow (note that inside sigma equals x when n = 0, and 50 may be enough)\n\n    let m = 1.00;\n    let s = 1.00;\n    let sum = x;\n    for (let i = 1; i < 50; i++) {\n        m *= i;\n        s *= -1;\n        sum += (s * Math.pow(x, 2 * i + 1)) / (m * (2 * i + 1));\n    }\n\n    return 2 * sum / Math.sqrt(3.14159265358979);\n}","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task8 } from '../../tasks/Task8/Task8';\n\nexport class Week8 extends Week {\n\n    weekName = 'Неделя 8. Точечное оценивание';\n\n    protected renderContent() {\n        return (<Task8 />);\n    }\n}\n","\n// https://gist.github.com/janjarfalk/08877a0703764c7ed2ba7b9662fcdecb\nexport function normStInv(p: number) {\n    const a1 = -39.6968302866538, a2 = 220.946098424521, a3 = -275.928510446969;\n    const a4 = 138.357751867269, a5 = -30.6647980661472, a6 = 2.50662827745924;\n    const b1 = -54.4760987982241, b2 = 161.585836858041, b3 = -155.698979859887;\n    const b4 = 66.8013118877197, b5 = -13.2806815528857, c1 = -7.78489400243029E-03;\n    const c2 = -0.322396458041136, c3 = -2.40075827716184, c4 = -2.54973253934373;\n    const c5 = 4.37466414146497, c6 = 2.93816398269878, d1 = 7.78469570904146E-03;\n    const d2 = 0.32246712907004, d3 = 2.445134137143, d4 = 3.75440866190742;\n    const p_low = 0.02425, p_high = 1 - p_low;\n    let q, r;\n    let retVal;\n\n    if ((p < 0) || (p > 1)) {\n        console.log(\"normSInv: Argument out of range.\");\n        retVal = 0;\n    } else if (p < p_low) {\n        q = Math.sqrt(-2 * Math.log(p));\n        retVal = (((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n    } else if (p <= p_high) {\n        q = p - 0.5;\n        r = q * q;\n        retVal = (((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * q / (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1);\n    } else {\n        q = Math.sqrt(-2 * Math.log(1 - p));\n        retVal = -(((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n    }\n\n    return retVal;\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { DistributionType } from '../../utils/distribution';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { InputDistributionType } from '../../components/InputDistributionType/InputDistributionType';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\nimport { normStInv } from '../../utils/normStInv';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task9State {\n\n    sample?: number[];\n    distributionType?: DistributionType;\n    specificParameters: { [key: string]: string };\n}\n\nexport class Task9 extends Task<{}, Task9State> {\n\n    state: Task9State = { specificParameters: {} };\n\n    protected checkParameters(): boolean {\n        const { sample, distributionType, specificParameters } = this.state;\n\n        let specificParametersCheck: boolean = true;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersCheck = verifyInteger(specificParameters.m) && +specificParameters.m > 0;\n                break;\n\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n            case DistributionType.EXPONENTIAL:\n                specificParametersCheck = verifyInteger(specificParameters.k) && +specificParameters.k > 0;\n                break;\n\n            case DistributionType.NORMAL:\n                specificParametersCheck = verifyInteger(specificParameters.a) && +specificParameters.a > 0;\n                break;\n        }\n\n        return !!sample && !!distributionType && specificParametersCheck;\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onDistributionTypeChange(distributionType?: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onSpecificParameterChange(name: 'm' | 'k' | 'a') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                specificParameters: {\n                    ...this.state.specificParameters,\n\n                    [name]: e.currentTarget.value.trim()\n                }\n            });\n        }\n    }\n\n    protected renderParameters() {\n        const { distributionType, specificParameters } = this.state;\n\n        let paramTitle: string = '';\n        let specificParametersOutput: React.ReactNode;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersOutput = (\n                    <Fieldset legend=\"Третье задание:\">\n                        <div className=\"p-inputgroup\">\n                            <span className=\"p-inputgroup-addon\">\n                                <strong>m</strong> =\n                            </span>\n\n                            <InputText value={specificParameters.m ?? ''}\n                                       onChange={this.onSpecificParameterChange('m')} />\n\n                            <span className=\"p-inputgroup-addon\">\n                                <ValidationIcon valid={verifyInteger(specificParameters.m) && +specificParameters.m > 0} />\n                            </span>\n                        </div>\n                    </Fieldset>\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                paramTitle = 'Количество помидоров';\n                break;\n\n            case DistributionType.POISSON:\n                paramTitle = 'Доход за каждый звонок';\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                paramTitle = 'Затраты на секунду звонка';\n                break;\n\n            case DistributionType.NORMAL:\n                specificParametersOutput = (\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={specificParameters.a ?? ''}\n                                   onChange={this.onSpecificParameterChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyInteger(specificParameters.a) && +specificParameters.a > 0} />\n                        </span>\n                    </div>\n                );\n                break;\n        }\n\n        if (paramTitle) {\n            specificParametersOutput = (\n                <Fieldset legend=\"Третье задание:\">\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            {paramTitle}:\n                        </span>\n\n                        <InputText value={specificParameters.k ?? ''}\n                                   onChange={this.onSpecificParameterChange('k')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyInteger(specificParameters.k) && +specificParameters.k > 0} />\n                        </span>\n                    </div>\n                </Fieldset>\n            );\n        }\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка для задания:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom-not-last\">\n                    <span className=\"p-inputgroup-addon\">\n                        Распределение:\n                    </span>\n\n                    <InputDistributionType exclude={[DistributionType.BERNOULLI]} value={distributionType}\n                                           onChange={this.onDistributionTypeChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={!!this.state.distributionType} />\n                    </span>\n                </div>\n\n                {specificParametersOutput}\n            </>\n        );\n    }\n\n    private static renderGeneralPart(start: number, end: number): React.ReactNode {\n        return (\n            <>\n                Левая граница диапазона <strong>&#952;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(start)} />\n                <br />\n\n                Правая граница диапазона <strong>&#952;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(end)} />\n            </>\n        )\n    }\n\n    private renderBinomialAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const m = +specificParameters.m;\n        const c = quantile * Math.sqrt(avg * (1 - avg / m)) / (sqrtN * m);\n        const theta = avg / m + c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(avg / m - c, theta)}\n                <br />\n\n                Среднее количество опаздавших поездов при максимально возможном значении &#952; и <strong>m = {m}</strong>:&nbsp;\n                <InputText readOnly value={Math.round(theta * m)} />\n            </>\n        );\n    }\n\n    private renderGeometricAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const c = quantile * Math.sqrt(1 - 1 / avg) / (sqrtN * avg);\n        const theta = 1 / avg - c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(theta, 1 / avg + c)}\n                <br />\n\n                Вероятность, что музыкант убежит, если в него попало ровно <strong>{k}</strong> помидоров:&nbsp;\n                <InputText readOnly value={Math.round(10 * theta)} />\n            </>\n        );\n    }\n\n    private renderPoissonAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const c = quantile * Math.sqrt(avg) / sqrtN;\n        const theta = avg + c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(avg - c, theta)}\n                <br />\n\n                Сумма, которую заработает компания за 5 минут при максимально возможном среднем количестве звонков,\n                если за каждый звонок она получает доход в <strong>{k}</strong> рубля:&nbsp;\n                <InputText readOnly value={normalizeNumber(k * theta)} />\n            </>\n        );\n    }\n\n    private static renderUniformAnswer(avg: number, quantile: number, sqrtN: number, first: number, last: number): React.ReactNode {\n        const c = quantile * (last - first) / (Math.sqrt(3) * sqrtN);\n\n        const start = 2 * avg - c - last;\n        const end = 2 * avg + c - first;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(start, end)}\n                <br />\n\n                Длина экрана:&nbsp;\n                <InputText readOnly value={normalizeNumber(end - start)} />\n            </>\n        );\n    }\n\n    private renderExponentialAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const c = quantile / (sqrtN * avg);\n        const theta = 1 / avg - c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(theta, 1 / avg + c)}\n                <br />\n\n                Максимальная в среднем сумма, которую может тратить колл-центр на один звонок,\n                если за каждую секунду звонка тратит <strong>{k}</strong> копейки:&nbsp;\n                <InputText readOnly value={normalizeNumber(k / theta)} />\n            </>\n        );\n    }\n\n    private renderNormalAnswer(sample: number[]): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const a = +specificParameters.a;\n\n        const c = sample.map(x => (x - a) ** 2);\n        const start = c.map(x => x / 10279.07).reduce((a, b) => a + b);\n        const end = c.map(x => x / 9724.718).reduce((a, b) => a + b);\n\n        return (\n            <>\n                {Task9.renderGeneralPart(start, end)}\n                <br />\n\n                Какое минимальное количество молока можно ожидать потребителю:&nbsp;\n                <InputText readOnly value={normalizeNumber(a - Math.sqrt(end))} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, distributionType } = this.state;\n\n        if (!sample || !distributionType) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const quantile = normStInv(1 - 0.05 / 2);\n        const sqrtN = Math.sqrt(sample.length);\n\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                return this.renderBinomialAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.GEOMETRIC:\n                return this.renderGeometricAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.POISSON:\n                return this.renderPoissonAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.UNIFORM:\n                return Task9.renderUniformAnswer(avg, quantile, sqrtN, sample[0], sample[sample.length - 1]);\n\n            case DistributionType.EXPONENTIAL:\n                return this.renderExponentialAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.NORMAL:\n                return this.renderNormalAnswer(sample);\n        }\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task9 } from '../../tasks/Task9/Task9';\n\nexport class Week9 extends Week {\n\n    weekName = 'Неделя 9. Точные и асимптотические доверительные интервалы';\n\n    protected renderContent() {\n        return (<Task9 />);\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { normStInv } from '../../utils/normStInv';\n\ninterface Task10State {\n\n    sample?: number[];\n    m: string;\n    e: string;\n}\n\nexport class Task10 extends Task<{}, Task10State> {\n\n    state: Task10State = { m: '', e: '' };\n\n    protected checkParameters(): boolean {\n        const { sample, m, e } = this.state;\n\n        return !!sample && verifyInteger(m) && verifyNumber(e);\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onMChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            m: e.currentTarget.value\n        });\n    }\n\n    private onEChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            e: e.currentTarget.value\n        });\n    }\n\n    protected renderParameters() {\n        const { m, e } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка для задания:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Вес одного эскимо:\n                    </span>\n\n                    <InputText value={m} onChange={this.onMChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyInteger(m)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#949;</strong> =\n                    </span>\n\n                    <InputText value={e} onChange={this.onEChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(e)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, m, e } = this.state;\n\n        if (!sample) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const sqAvg = mean(sample.map(x => x ** 2));\n        const sampleVariance = sqAvg - avg ** 2;\n        const deviation = Math.sqrt(sample.length / (sample.length - 1) * sampleVariance);\n        const absDeviationFunc = Math.abs(Math.sqrt(sample.length) * (avg - +m) / deviation);\n        const hypothesis = absDeviationFunc < normStInv(1 - +e / 2);\n\n        return (\n            <>\n                Выборочное среднее:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Оценка среднеквадратического отклонения:&nbsp;\n                <InputText readOnly value={normalizeNumber(deviation)} />\n                <br />\n\n                Значение модуля функции отклонения:&nbsp;\n                <InputText readOnly value={normalizeNumber(absDeviationFunc)} />\n                <br />\n\n                Ответ:&nbsp;\n                <InputText readOnly value={hypothesis ? 1 : 0} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task10 } from '../../tasks/Task10/Task10';\n\nexport class Week10 extends Week {\n\n    weekName = 'Неделя 10. Проверка гипотез';\n\n    protected renderContent() {\n        return (<Task10 />);\n    }\n}\n","import React from 'react';\n\nimport { Header } from '../Header/Header';\nimport { Week5 } from '../../weeks/Week5/Week5';\nimport { Week6 } from '../../weeks/Week6/Week6';\nimport { Week7 } from '../../weeks/Week7/Week7';\nimport { Week8 } from '../../weeks/Week8/Week8';\nimport { Week9 } from '../../weeks/Week9/Week9';\nimport { Week10 } from '../../weeks/Week10/Week10';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"margin-bottom\"><Header /></div>\n                <div className=\"margin-bottom\"><Week5 /></div>\n                <div className=\"margin-bottom\"><Week6 /></div>\n                <div className=\"margin-bottom\"><Week7 /></div>\n                <div className=\"margin-bottom\"><Week8 /></div>\n                <div className=\"margin-bottom\"><Week9 /></div>\n                <div><Week10 /></div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pythonTab.137e3c15.png\";"],"sourceRoot":""}