{"version":3,"sources":["components/Week/Week.tsx","components/LoadingContainer/LoadingContainer.tsx","utils/distribution.ts","components/Task/Task.tsx","components/ValidationIcon/ValidationIcon.tsx","components/DistributionSelector/DistributionSelector.tsx","utils/filterObject.ts","weeks/Week6/Task1/Task1.tsx","utils/dispersion.tsx","weeks/Week6/Task21/Task21.tsx","components/FetchingInputSample/FetchingInputSample.tsx","weeks/Week6/Task21/Task22.tsx","weeks/Week6/Week6.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Week","props","weekName","className","weekClassName","classNames","Array","isArray","push","join","this","header","toggleable","collapsed","renderContent","React","Component","LoadingContainer","loading","renderLoading","progress","minProgress","maxProgress","mode","value","children","defaultProps","DistributionType","Task","taskClassName","answerPromise","state","prevProps","prevState","snapshot","isEqual","omit","checkParameters","a","async","renderAnswer","setState","answer","undefined","renderParameters","distributionTypesSelectItems","BERNOULLI","BINOMIAL","GEOMETRIC","POISSON","UNIFORM","EXPONENTIAL","NORMAL","map","type","label","ValidationIcon","valid","clickable","onClick","style","cursor","DistributionSelector","distributionParams","distributionType","mapValues","params","String","onDistributionChange","param","event","currentTarget","newDistribution","numericParams","object","predicate","ret","forEach","v","k","filterObject","s","trim","Boolean","Number","isNaN","p","n","l","b","d","onChange","normalSigmaSquare","name","field","paramsComponents","Fragment","key","e","onDistributionParamChange","options","onDistributionTypeChange","bind","Task1","randomSeed","distribution","numericN","numericRandomSeed","onNChange","onRandomSeedChange","code","href","target","rel","variance","sample","expected","mean","Task21","alchemistsRegexp","alchemists","test","placeholder","onAlchemistsChange","replace","split","sort","counts","i","count","filter","length","m","maxCount","maxBy","f","readOnly","Math","sqrt","FetchingInputSample","previousFetch","Date","now","urlRegex","proxyUrl","url","reload","Promise","resolve","setTimeout","max","fetch","response","ok","text","sampleText","console","log","onUrlChange","onIconClick","Task22","sample10","sample10000","onSample10Change","onSample10000Change","e10","e10000","d10","d10000","output","property","trueP","trueD","abs","Week6","multiple","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGsBA,EAAtB,YAOI,WAAsBC,GAAW,IAAD,uBAC5B,4CAAMA,KANkBC,cAKI,IAJbC,eAIa,IAFfC,mBAEe,EAG5B,IAAMC,EAAa,CAAC,QAHQ,OAIxB,EAAKF,YACDG,MAAMC,QAAQ,EAAKJ,WACnBE,EAAWG,KAAX,MAAAH,EAAU,YAAS,EAAKF,YAExBE,EAAWG,KAAK,EAAKL,YAI7B,EAAKC,cAAgBC,EAAWI,KAAK,KAZT,EAPpC,sEAuBQ,OACI,yBAAKN,UAAWO,KAAKN,eACjB,kBAAC,QAAD,CAAOO,OAAQD,KAAKR,SAAUU,YAAU,EAACC,WAAS,GAC7CH,KAAKI,sBA1B1B,GAAmDC,IAAMC,W,sCCQ5CC,EAAb,iLAYQ,OAFoBP,KAAKT,MAAjBiB,QAGGR,KAAKS,gBAELT,KAAKI,kBAfxB,sCAmBgD,IAAD,EACQJ,KAAKT,MAA5CmB,EAD+B,EAC/BA,SAAUC,EADqB,EACrBA,YAAaC,EADQ,EACRA,YAE/B,OACI,kBAAC,cAAD,CAAaC,KAAMH,EAAW,cAAgB,gBAAiBI,MAA2B,kBAAbJ,GACxEA,EAAWC,IAAgBC,EAAcD,GAAe,MAxBzE,sCA6BQ,OAAOX,KAAKT,MAAMwB,aA7B1B,GAAsDV,IAAMC,WAA/CC,EAEFS,aAAsC,CAEzCR,SAAS,EACTG,YAAa,EACbC,YAAa,K,ICfTK,E,kCCQUC,EAAtB,YASI,WAAsB3B,GAAW,IAAD,uBAC5B,4CAAMA,KARSE,eAOa,IALf0B,mBAKe,IAJxBC,mBAIwB,IAFhCC,MAAQ,GAKJ,IAAM1B,EAAa,CAAC,QAHQ,OAIxB,EAAKF,YACDG,MAAMC,QAAQ,EAAKJ,WACnBE,EAAWG,KAAX,MAAAH,EAAU,YAAS,EAAKF,YAExBE,EAAWG,KAAK,EAAKL,YAI7B,EAAK0B,cAAgBxB,EAAWI,KAAK,KAZT,EATpC,gFAyBQuB,EACAC,EACAC,GACK,IAAD,QACCC,IAAQC,IAAK1B,KAAKqB,MAAO,UAAWK,IAAKH,EAAW,YAAcvB,KAAK2B,mBACxE,WAAC,UAAAC,EAAAC,OAAA,uDACST,EAAgB,EAAKA,cAAgB,EAAKU,eAEhD,EAAKC,SAAL,eAAmB,EAAKV,MAAxB,CAA+BW,YAAQC,KAH1C,WAAAL,EAAA,MAKwBR,GALxB,OAKSY,EALT,OAOO,EAAKZ,gBAAkBA,GACvB,EAAKW,SAAL,eAAmB,EAAKV,MAAxB,CAA+BW,YARtC,qCAAD,KA9BZ,+BA6CQ,OACI,yBAAKvC,UAAWO,KAAKmB,eAChBnB,KAAKkC,mBAELlC,KAAK2B,mBAAsB,oCACxB,6BAEC3B,KAAKS,oBApD1B,sCA8DgD,IAChCuB,EAAWhC,KAAKqB,MAAhBW,OAER,OACI,kBAAC,EAAD,CAAkBxB,SAAUwB,GACvBA,OAnEjB,GAAmD3B,IAAMC,Y,SDR7CW,K,6DAAAA,E,0FAAAA,E,iGAAAA,E,2DAAAA,E,6EAAAA,E,6FAAAA,E,uEAAAA,M,KA6EL,IAUMkB,EAVoB,CAC7BlB,EAAiBmB,UACjBnB,EAAiBoB,SACjBpB,EAAiBqB,UACjBrB,EAAiBsB,QACjBtB,EAAiBuB,QACjBvB,EAAiBwB,YACjBxB,EAAiByB,QAIhBC,KAAI,SAAAC,GAAI,MAAK,CAAEC,MAAOD,EAAM9B,MAAO8B,M,kDEhFjC,IAAME,EAAb,iLAQc,IAAD,EACiC9C,KAAKT,MAAnCwD,EADH,EACGA,MAAOC,EADV,EACUA,UAAWC,EADrB,EACqBA,QAE1B,YAAchB,IAAVc,EACOC,EACA,uBAAGvD,UAAU,yBACb,uBAAGA,UAAU,0BAEbsD,EACA,uBAAGtD,UAAU,gBACduD,EACK,uBAAGvD,UAAU,eAAeyD,MAAO,CAAEC,OAAQ,WAAaF,QAASA,IACnE,uBAAGxD,UAAU,oBApBpC,GAAoCY,IAAMC,WAA7BwC,EAEF9B,aAAoC,CAEvCgC,WAAW,EACXC,QAHuC,cCaxC,IAAMG,EAAb,2MASI/B,MAAmC,CAAEgC,mBAAoB,IAT7D,kFAYQ/B,EACAC,EACAC,IAEKC,IAAQzB,KAAKT,MAAMuB,MAAOQ,EAAUR,QAAUd,KAAKT,MAAMuB,OAC1Dd,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIiC,iBAAkBtD,KAAKT,MAAMuB,MAAM8B,KACnCS,mBAAmB,eACZrD,KAAKqB,MAAMgC,mBADA,GAGXE,IAAUvD,KAAKT,MAAMuB,MAAM0C,OAAQC,YAK7ChC,IAAQzB,KAAKqB,MAAOE,IACrBvB,KAAK0D,yBA9BjB,+CAkCqC5C,GAC7Bd,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIiC,iBAAkBxC,EAAMA,WAtCpC,gDA0CsC6C,EAAeC,GAC7C5D,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIgC,mBAAmB,eACZrD,KAAKqB,MAAMgC,mBADA,eAGbM,EAAQC,EAAMC,cAAc/C,aAjD7C,6CAsDoC,IAGxBgD,EAHuB,EACsB9D,KAAKqB,MAA9CiC,EADmB,EACnBA,iBAAkBD,EADC,EACDA,mBAGpBU,EAAgBR,ICjFvB,SAA+DS,EAAsBC,GACxF,IAAMC,EAAoB,GAQ1B,OANAC,IAAQH,GAAQ,SAACI,EAAGC,GACZJ,EAAUG,EAAGC,KACbH,EAAIG,GAAUD,MAIfF,EDyECI,CACIf,IAAUF,GAAoB,SAAAkB,GAAC,OAAIA,EAAIA,EAAEC,YAASvC,KAClDwC,SAEJC,QAEJ,OAAQpB,GACJ,KAAKrC,EAAiBmB,UACbuC,MAAMZ,EAAa,KACpBD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CAAEoB,EAAGb,EAAa,KAGlC,MAEJ,KAAK9C,EAAiBoB,SACbsC,MAAMZ,EAAa,IAAWY,MAAMZ,EAAa,KAClDD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CACJqB,EAAGd,EAAa,EAChBa,EAAGb,EAAa,KAI5B,MAEJ,KAAK9C,EAAiBqB,UACbqC,MAAMZ,EAAa,KACpBD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CAAEoB,EAAGb,EAAa,KAGlC,MAEJ,KAAK9C,EAAiBsB,QACboC,MAAMZ,EAAa,KACpBD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CAAEsB,EAAGf,EAAa,KAGlC,MAEJ,KAAK9C,EAAiBuB,QACbmC,MAAMZ,EAAa,IAAWY,MAAMZ,EAAa,KAClDD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CACJ5B,EAAGmC,EAAa,EAChBgB,EAAGhB,EAAa,KAI5B,MAEJ,KAAK9C,EAAiBwB,YACbkC,MAAMZ,EAAa,KACpBD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CAAEsB,EAAGf,EAAa,KAGlC,MAEJ,KAAK9C,EAAiByB,OACbiC,MAAMZ,EAAa,IAAWY,MAAMZ,EAAa,KAClDD,EAAkB,CACdlB,KAAMU,EACNE,OAAQ,CACJ5B,EAAGmC,EAAa,EAChBiB,EAAGjB,EAAa,KAOpC/D,KAAKT,MAAM0F,SAASnB,KA3I5B,+BA8Ic,IAAD,OACGoB,EAAsBlF,KAAKT,MAA3B2F,kBADH,EAE4ClF,KAAKqB,MAA9CiC,EAFH,EAEGA,iBAAkBD,EAFrB,EAEqBA,mBAEpBG,EAA4C,GAClD,OAAQF,GACJ,KAAKrC,EAAiBmB,UAClBoB,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC,MAEJ,KAAKnE,EAAiBoB,SAClBmB,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC5B,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC,MAEJ,KAAKnE,EAAiBqB,UAClBkB,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC,MAEJ,KAAKnE,EAAiBsB,QAClBiB,EAAO1D,KAAK,CAAEqF,KAAM,SAAUC,MAAO,MACrC,MAEJ,KAAKnE,EAAiBuB,QAClBgB,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC5B,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC,MAEJ,KAAKnE,EAAiBwB,YAClBe,EAAO1D,KAAK,CAAEqF,KAAM,SAAUC,MAAO,MACrC,MAEJ,KAAKnE,EAAiByB,OAClBc,EAAO1D,KAAK,CAAEqF,KAAM,IAAKC,MAAO,MAChC5B,EAAO1D,KAAK,CAAEqF,KAAM,UAAYD,EAAoB,OAAW,IAAKE,MAAO,MAInF,IAAMC,EAAkC7B,EACnCb,KAAI,SAAAgB,GACD,IAAM7C,EAAQuC,EAAmBM,EAAMyB,OAEvC,OACI,kBAAC,IAAME,SAAP,CAAgBC,IAAK5B,EAAMwB,MACvB,gCAASxB,EAAMwB,MADnB,KAEI,kBAAC,YAAD,CAAWrE,MAAK,OAAEA,QAAF,IAAEA,IAAS,GAAImE,SAAU,SAAAO,GAAC,OAAI,EAAKC,0BAA0B9B,EAAMyB,MAAOI,MAC1F,kBAAC,EAAD,CAAgBzC,SAAQ,OAACjC,QAAD,IAACA,OAAD,EAACA,EAAO0D,UAAWG,OAAO7D,KAClD,iCAKhB,OACI,sHAEI,kBAAC,WAAD,CAAUA,MAAOd,KAAKqB,MAAMiC,iBAAkBoC,QAASvD,EAC7C8C,SAAUjF,KAAK2F,yBAAyBC,KAAK5F,QACvD,kBAAC,EAAD,CAAgB+C,QAAS/C,KAAKqB,MAAMiC,mBACpC,6BAEC+B,OA1MjB,GAA0ChF,IAAMC,WAAnC8C,EAEFpC,aAA0C,CAE7CkE,mBAAmB,EAEnBD,SAJ6C,cEZ9C,IAAMY,EAAb,2MAEIxE,MAAoB,CAAEwD,EAAG,GAAIiB,WAAY,IAF7C,yEAIsBN,GACdxF,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIwD,EAAGW,EAAE3B,cAAc/C,WAR/B,2CAYiCA,GACzBd,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGI0E,aAAcjF,OAhB1B,yCAoB+B0E,GACvBxF,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIyE,WAAYN,EAAE3B,cAAc/C,WAxBxC,wCA4B0C,IAAD,EACOd,KAAKqB,MAArCwD,EADyB,EACzBA,EAAGkB,EADsB,EACtBA,aAAcD,EADQ,EACRA,WAEnBE,EAAWnB,GAAKA,OAAI5C,EACpBgE,EAAoBH,GAAcA,OAAa7D,EAErD,YAAoBA,IAAb+D,IAA2BrB,MAAMqB,MAAeD,QAC7B9D,IAAtBgE,IAAoCtB,MAAMsB,KAnCtD,yCAsCkC,IAAD,EACejG,KAAKqB,MAArCwD,EADiB,EACjBA,EAAGkB,EADc,EACdA,aAAcD,EADA,EACAA,WAEnBE,EAAWnB,GAAKA,OAAI5C,EACpBgE,EAAoBH,GAAcA,OAAa7D,EAErD,OACI,uEACW,qCADX,OAEI,kBAAC,YAAD,CAAWnB,MAAO+D,EAAGI,SAAUjF,KAAKkG,UAAUN,KAAK5F,QACnD,kBAAC,EAAD,CAAgB+C,WAAoBd,IAAb+D,IAA2BrB,MAAMqB,KACxD,6BAEA,kBAAC,EAAD,CAAsBd,mBAAmB,EAAOpE,MAAOiF,EACjCd,SAAUjF,KAAK0D,qBAAqBkC,KAAK5F,QAE/D,+CATJ,KAUI,kBAAC,YAAD,CAAWc,MAAOgF,EAAYb,SAAUjF,KAAKmG,mBAAmBP,KAAK5F,QACrE,kBAAC,EAAD,CAAgB+C,WAA6Bd,IAAtBgE,IAAoCtB,MAAMsB,QAxDjF,0HA8DgDjG,KAAKqB,MAArCwD,EA9DhB,EA8DgBA,EAAGkB,EA9DnB,EA8DmBA,aAAcD,EA9DjC,EA8DiCA,WAEpBjB,GAAMkB,GAAiBD,EAhEpC,iDAoEYM,EApEZ,+CAsEiBN,EAtEjB,YAwEgBC,EAAanD,KAxE7B,cAyEiB3B,EAAiBmB,UAzElC,SA6EiBnB,EAAiBoB,SA7ElC,SAiFiBpB,EAAiBqB,UAjFlC,UAqFiBrB,EAAiBsB,QArFlC,UAyFiBtB,EAAiBuB,QAzFlC,UA6FiBvB,EAAiBwB,YA7FlC,UAiGiBxB,EAAiByB,OAjGlC,0BA0EgB0D,GAAI,yCAAsCL,EAAavC,OAAOoB,EAA1D,aAAgEC,EAAhE,KA1EpB,mCA8EgBuB,GAAI,sCAAmCL,EAAavC,OAAOqB,EAAvD,aAA6DkB,EAAavC,OAAOoB,EAAjF,aAAuFC,EAAvF,KA9EpB,oCAkFgBuB,GAAI,uCAAoCL,EAAavC,OAAOoB,EAAxD,aAA8DC,EAA9D,KAlFpB,oCAsFgBuB,GAAI,qCAAkCL,EAAavC,OAAOsB,EAAtD,aAA4DD,EAA5D,KAtFpB,oCA0FgBuB,GAAI,qCAAkCL,EAAavC,OAAO5B,EAAtD,aAA4DmE,EAAavC,OAAOuB,EAAhF,aAAsFF,EAAtF,KA1FpB,oCA8FgBuB,GAAI,6CAA0CL,EAAavC,OAAOsB,EAA9D,aAAoED,EAApE,KA9FpB,oCAkGgBuB,GAAI,oCAAiCL,EAAavC,OAAO5B,EAArD,aAA2DmE,EAAavC,OAAOwB,EAA/E,aAAqFH,EAArF,KAlGpB,oCAsGQuB,GAAI,6GAEwBvB,EAAI,EAF5B,qEAtGZ,kBA6GY,oWACuE,uBAAGwB,KAAK,kBAAkBC,OAAO,SAASC,IAAI,uBAA9C,WADvE,KAGI,6BAAMH,GAHV,qTA7GZ,uDAA2BlF,G,kCCbpB,SAASsF,EAASC,EAAkBC,GACvC,IAAMlB,EAAIkB,GAAsBC,IAAKF,GAErC,OAAOE,IAAKF,EAAO9D,KAAI,SAAAyB,GAAC,gBAAKA,EAAIoB,EAAM,OCepC,IAAMoB,EAAb,2MAEYC,iBAAmB,yCAF/B,EAIIxF,MAAqB,CAAEyF,WAAY,IAJvC,kFAM+BtB,GACvBxF,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIyF,WAAYtB,EAAE3B,cAAc/C,WAVxC,wCAeQ,OAAOd,KAAK6G,iBAAiBE,KAAK/G,KAAKqB,MAAMyF,cAfrD,yCAkBkC,IAClBA,EAAe9G,KAAKqB,MAApByF,WAER,OACI,mFACa,kBAAC,YAAD,CAAWE,YAAY,eAAelG,MAAOgG,EAClC7B,SAAUjF,KAAKiH,mBAAmBrB,KAAK5F,QAC3D,kBAAC,EAAD,CAAgB+C,MAAO/C,KAAK6G,iBAAiBE,KAAKD,QAzBlE,iDAAAtB,EAAA,6EA+BgBsB,EAAe9G,KAAKqB,MAApByF,WA/BhB,wDAqCcL,EAASK,EAAWI,QAAQ,QAAS,IAAI1C,OAC1C0C,QAAQ,KAAM,KAAKA,QAAQ,MAAO,KAClCC,MAAM,KAAKxE,KAAI,SAAAyB,GAAC,OAAIM,OAAON,EAAEI,WAAS4C,MAAK,SAACxF,EAAGmD,GAAJ,OAAUnD,EAAImD,KAExDsC,EAA6B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9C1E,KAAI,SAAA2E,GAAC,MAAK,CAACxG,MAAOwG,EAAGC,MAAOd,EAAOe,QAAO,SAAApD,GAAC,OAAIA,IAAMkD,KAAGG,WAEvDjC,EAAImB,IAAKF,GACTzB,EAAIwB,EAASC,EAAQjB,GACrBkC,EAAIjB,EAAOgB,OAAS,IAAM,GACzBhB,EAAOA,EAAOgB,OAAS,GAAKhB,EAAOA,EAAOgB,OAAS,IAAM,EAC1DhB,GAAQA,EAAOgB,OAAS,GAAK,GAE7BE,EAlDd,UAkDyBC,IAAMP,GAAQ,SAAAjD,GAAC,OAAIA,EAAEmD,gBAlD9C,aAkDyB,EAA6BA,MACxC1G,EAAOwG,EAAOG,QAAO,SAAApD,GAAC,OAAIA,EAAEmD,QAAUI,KACvChF,KAAI,SAAAyB,GAAC,OAAIA,EAAEtD,SAAOsG,MAAK,SAACxF,EAAGmD,GAAJ,OAAUnD,EAAImD,KAAG,GApDrD,kBAuDY,oCACI,+BACI,+BACC,CAAC,SAACX,GAAD,OAAoBA,EAAEtD,MAAQ,GAAG,SAACsD,GAAD,OAAoBA,EAAEtD,MAAQ,IAAG6B,KAAI,SAAAkF,GAAC,OACrE,wBAAItC,IAAK9B,OAAOoE,IACXR,EAAOG,OAAOK,GAAGlF,KAAI,SAAAyB,GAAC,OACnB,wBAAImB,IAAKnB,EAAEtD,OAAX,WACY,kCADZ,MAC4BsD,EAAEtD,MAD9B,MAEI,kBAAC,YAAD,CAAWgH,UAAQ,EAAChH,MAAmB,IAAZsD,EAAEmD,MAAc,IAAhB,UAAyBnD,EAAEmD,MAA3B,cAAsCd,EAAOgB,oBARhG,0IAgB6B,kBAAC,YAAD,CAAWK,UAAQ,EAAChH,MAAO0E,IAAK,6BAhB7D,2DAiBe,kBAAC,YAAD,CAAWsC,UAAQ,EAAChH,MAAOkE,IAAK,6BAjB/C,0LAkBqC,kBAAC,YAAD,CAAW8C,UAAQ,EAAChH,MAAOiH,KAAKC,KAAKhD,KAAM,6BAlBhF,+CAmBa,kBAAC,YAAD,CAAW8C,UAAQ,EAAChH,MAAO4G,IAAK,6BAnB7C,6BAoBU,kBAAC,YAAD,CAAWI,UAAQ,EAAChH,MAAOD,IAAQ,+BA3EzD,uDAA4BK,GCDf+G,EAAb,2MAEYC,cAAwBC,KAAKC,MAFzC,EAIYC,SAAW,mDAJvB,EAKYC,SAAW,iCALvB,EAOIjH,MAAkC,CAC9BkH,IAAK,GACL/H,SAAS,GATjB,kFAaQc,EACAC,EACAC,GAEKC,IAAQC,IAAK1B,KAAKqB,MAAO,CAAC,UAAW,WAAYK,IAAKH,EAAW,CAAC,UAAW,aAC9EvB,KAAKwI,WAlBjB,+BAsBsB,IAAD,OACLD,EAAQvI,KAAKqB,MAAbkH,KAER,WAAC,YAAA3G,EAAAC,OAAA,6DAEW,EAAKwG,SAAStB,KAAKwB,GAF9B,mCAAA3G,EAAA,MAGiB,IAAI6G,SAAQ,SAAAC,GAAO,OACrBC,WAAWD,EAASX,KAAKa,IAAI,EAAG,EAAKV,cAAgB,IAAMC,KAAKC,YAJ/E,cAMW,EAAKF,cAAgBC,KAAKC,MANrC,WAAAxG,EAAA,MAOkCiH,MAAM,EAAKP,SAAWC,IAPxD,YAOiBO,EAPjB,QASwBC,GATxB,oCAAAnH,EAAA,MAUwCkH,EAASE,QAVjD,eAUqBC,EAVrB,OAWqBxC,EAASwC,EAAW9B,MAAM,MAC3BxE,KAAI,SAAA4B,GAAC,OAAIA,EAAEC,UAAQgD,OAAO/C,SAAS9B,IAAI+B,QAExC,EAAKrD,MAAMkH,MAAQA,IACnB,EAAKxG,SAAL,eAAmB,EAAKV,MAAxB,CAA+Bb,SAAS,EAAOiG,YAC/C,EAAKlH,MAAM0F,SAASwB,IAhBvC,6EAuBOyC,QAAQC,IAAR,MAvBP,QA0BG,EAAKpH,SAAL,eAAmB,EAAKV,MAAxB,CAA+Bb,SAAS,EAAOiG,YAAQxE,KACvD,EAAK1C,MAAM0F,cAAShD,GA3BvB,yDAAD,KAzBR,kCAwDwBuD,GAChBxF,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGIkH,IAAK/C,EAAE3B,cAAc/C,MACrBN,SAAS,OA7DrB,oCAkEQR,KAAK+B,SAAL,eAAmB/B,KAAKqB,MAAxB,CAA+Bb,SAAS,KACxCR,KAAKwI,WAnEb,+BAsEc,IAAD,EAC4BxI,KAAKqB,MAA9BkH,EADH,EACGA,IAAK/H,EADR,EACQA,QAASiG,EADjB,EACiBA,OAEtB,OACI,oCACI,kBAAC,YAAD,CAAW3F,MAAOyH,EAAKtD,SAAUjF,KAAKoJ,YAAYxD,KAAK5F,QACvD,kBAAC,EAAD,CAAgBgD,UAAWhD,KAAKqI,SAAStB,KAAKwB,GAAMxF,MAAOvC,OAAUyB,IAAcwE,EACnExD,QAASjD,KAAKqJ,YAAYzD,KAAK5F,aA7E/D,GAAyCK,IAAMC,WCFlCgJ,EAAb,2MAEIjI,MAAqB,GAFzB,gFAI6BkI,GACrBvJ,KAAK+B,SAAL,eAAkB/B,KAAKqB,MAAvB,CAA8BkI,gBALtC,0CAQgCC,GACxBxJ,KAAK+B,SAAL,eAAkB/B,KAAKqB,MAAvB,CAA8BmI,mBATtC,2CAYiC1I,GACzBd,KAAK+B,SAAL,eACO/B,KAAKqB,MADZ,CAGI0E,aAAcjF,OAhB1B,wCAoB0C,IAAD,EACed,KAAKqB,MAA7CkI,EADyB,EACzBA,SAAUC,EADe,EACfA,YAAazD,EADE,EACFA,aAE/B,QAASwD,KAAcC,KAAiBzD,IAvBhD,yCA0BkC,IAClBA,EAAiB/F,KAAKqB,MAAtB0E,aAER,OACI,uHACmB,0CADnB,IAEI,kBAAC,EAAD,CAAqBd,SAAUjF,KAAKyJ,iBAAiB7D,KAAK5F,QAC1D,6BAHJ,mFAKmB,6CALnB,IAMI,kBAAC,EAAD,CAAqBiF,SAAUjF,KAAK0J,oBAAoB9D,KAAK5F,QAC7D,6BAEA,kBAAC,EAAD,CAAsBkF,mBAAmB,EAAOpE,MAAOiF,EACjCd,SAAUjF,KAAK0D,qBAAqBkC,KAAK5F,WAxC/E,kIA0DwDA,KAAKqB,MAA7CkI,EA1DhB,EA0DgBA,SAAUC,EA1D1B,EA0D0BA,YAAazD,EA1DvC,EA0DuCA,aAE1BwD,GAAaC,GAAgBzD,EA5D1C,iDAgEc4D,EAAMhD,IAAK4C,GACXK,EAASjD,IAAK6C,GACdK,EAAMrD,EAAS+C,EAAUI,GACzBG,EAAStD,EAASgD,EAAaI,GAnE7C,KAsEgB7D,EAAanD,KAtE7B,cAuEiB3B,EAAiBmB,UAvElC,UAkFiBnB,EAAiBoB,SAlFlC,UA6FiBpB,EAAiBqB,UA7FlC,UAwGiBrB,EAAiBsB,QAxGlC,UAmHiBtB,EAAiBuB,QAnHlC,UA8HiBvB,EAAiBwB,YA9HlC,UAyIiBxB,EAAiByB,OAzIlC,2BAwEgBqH,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,IACA3F,EACAoB,EACAO,EAAavC,OAAOoB,EACpBI,EACAe,EAAavC,OAAOoB,GAAK,EAAImB,EAAavC,OAAOoB,KA9ErE,oCAmFgBmF,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,IACA3F,EACAoB,EAAIO,EAAavC,OAAOqB,EACxBkB,EAAavC,OAAOoB,EACpBI,EACAe,EAAavC,OAAOqB,EAAIkB,EAAavC,OAAOoB,GAAK,EAAImB,EAAavC,OAAOoB,KAzF7F,oCA8FgBmF,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,IACA3F,EACA,EAAIoB,EACJO,EAAavC,OAAOoB,EACpBI,GACC,EAAIe,EAAavC,OAAOoB,GAAzB,SAA8BmB,EAAavC,OAAOoB,EAAK,KApG3E,oCAyGgBmF,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,SACA3F,EACAoB,EACAO,EAAavC,OAAOsB,EACpBE,EACAe,EAAavC,OAAOsB,IA/GxC,oCAoHgBiF,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,IACA3F,EACA,EAAIoB,EAAIO,EAAavC,OAAOuB,EAC5BgB,EAAavC,OAAO5B,EACpBoD,EACA,SAACe,EAAavC,OAAOuB,EAAIgB,EAAavC,OAAO5B,EAAM,GAAI,KA1H3E,oCA+HgBmI,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,SACA3F,EACA,EAAIoB,EACJO,EAAavC,OAAOsB,EACpBE,EACA,WAAIe,EAAavC,OAAOsB,EAAK,KArIjD,oCA0IgBiF,EAAS,SAAC3F,EAAGoB,EAAGR,GAAP,OAAasE,EAAOS,OACzB,IACA3F,EACAoB,EACAO,EAAavC,OAAO5B,EACpBoD,EACAe,EAAavC,OAAOwB,IAhJxC,sDAsJY,oCACK+E,EAAO,GAAIJ,EAAKE,GAEjB,6BAECE,EAAO,IAAOH,EAAQE,KA3JvC,iFA6C0BE,EAAkB5F,EAAWQ,EAAWqF,EAAejF,EAAWkF,GACpF,OACI,0IACuB,gCAAS9F,GADhC,IAC4C,6BAD5C,wCAEW,gCAAS4F,GAFpB,KAEwC,kBAAC,YAAD,CAAWlC,UAAQ,EAAChH,MAAO8D,IAAK,6BAFxE,4GAGwB,kBAAC,YAAD,CAAWkD,UAAQ,EAAChH,MAAOiH,KAAKoC,IAAIvF,EAAIqF,KAAU,6BAH1E,gGAIsB,kBAAC,YAAD,CAAWnC,UAAQ,EAAChH,MAAOkE,IAAK,6BAJtD,mKAKkC,kBAAC,YAAD,CAAW8C,UAAQ,EAAChH,MAAOiH,KAAKoC,IAAInF,EAAIkF,UApDtF,GAA4BhJ,GCTfkJ,EAAb,2MAEI5K,SAAW,6NAFf,+EAKQ,OACI,kBAAC,YAAD,CAAW6K,UAAQ,GACf,kBAAC,eAAD,CAAcpK,OAAO,2EAAwB,kBAAC,EAAD,OAC7C,kBAAC,eAAD,CAAcA,OAAO,0GAAyB,kBAAC,EAAD,OAC9C,kBAAC,eAAD,CAAcA,OAAO,0GAAyB,kBAAC,EAAD,YAT9D,GAA2BX,GCFdgL,G,OAAb,iLAGQ,OACI,yBAAK7K,UAAU,OACX,kBAAC,EAAD,WALhB,GAAyBY,IAAMC,YCMXmE,QACW,cAA7B8F,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7e960488.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nexport abstract class Week<P = {}, S = {}> extends React.Component<P, S> {\n\n    protected readonly abstract weekName: string;\n    protected readonly className?: string | string[];\n\n    private readonly weekClassName: string;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Week'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.weekClassName = classNames.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.weekClassName}>\n                <Panel header={this.weekName} toggleable collapsed>\n                    {this.renderContent()}\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\nimport { ProgressBar } from 'primereact/progressbar';\n\nexport interface LoadingContainerProps {\n\n    loading: boolean;\n    progress?: number;\n    minProgress: number;\n    maxProgress: number;\n}\n\nexport class LoadingContainer<P = {}, S = {}> extends React.Component<P & React.PropsWithChildren<LoadingContainerProps>, S> {\n\n    static defaultProps: LoadingContainerProps = {\n\n        loading: false,\n        minProgress: 0,\n        maxProgress: 100\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return this.renderLoading();\n        } else {\n            return this.renderContent();\n        }\n    }\n\n    protected renderLoading(): React.ReactNode {\n        const { progress, minProgress, maxProgress } = this.props;\n\n        return (\n            <ProgressBar mode={progress ? 'determinate' : 'indeterminate'} value={typeof progress === 'number' ?\n                (progress - minProgress) / (maxProgress - minProgress) : 0} />\n        );\n    }\n\n    protected renderContent(): React.ReactNode {\n        return this.props.children;\n    }\n}\n","import { SelectItem } from 'primereact/api';\n\nexport enum DistributionType {\n\n    BERNOULLI = 'Бернулли',\n\n    BINOMIAL = 'Биноминальное',\n\n    GEOMETRIC = 'Геометрическое',\n\n    POISSON = 'Пуассона',\n\n    UNIFORM = 'Равномерное',\n\n    EXPONENTIAL = 'Показательное',\n\n    NORMAL = 'Нормальное'\n}\n\nexport interface BernoulliDistribution {\n\n    type: DistributionType.BERNOULLI;\n    params: { p: number };\n}\n\nexport interface BinomialDistribution {\n\n    type: DistributionType.BINOMIAL;\n    params: {\n        n: number;\n        p: number;\n    }\n}\n\nexport interface GeometricDistribution {\n\n    type: DistributionType.GEOMETRIC;\n    params: { p: number };\n}\n\nexport interface PoissonDistribution {\n\n    type: DistributionType.POISSON;\n    params: { l: number };\n}\n\nexport interface UniformDistribution {\n\n    type: DistributionType.UNIFORM;\n    params: {\n        a: number;\n        b: number;\n    }\n}\n\nexport interface ExponentialDistribution {\n\n    type: DistributionType.EXPONENTIAL;\n    params: { l: number };\n}\n\nexport interface NormalDistribution {\n\n    type: DistributionType.NORMAL;\n    params: {\n        a: number;\n        d: number;\n    }\n}\n\nexport type Distribution =\n    BernoulliDistribution |\n    BinomialDistribution |\n    GeometricDistribution |\n    PoissonDistribution |\n    UniformDistribution |\n    ExponentialDistribution |\n    NormalDistribution;\n\nexport const distributionTypes = [\n    DistributionType.BERNOULLI,\n    DistributionType.BINOMIAL,\n    DistributionType.GEOMETRIC,\n    DistributionType.POISSON,\n    DistributionType.UNIFORM,\n    DistributionType.EXPONENTIAL,\n    DistributionType.NORMAL\n];\n\nexport const distributionTypesSelectItems: SelectItem[] = distributionTypes\n    .map(type => ({ label: type, value: type }));\n","import React from 'react';\nimport { LoadingContainer } from '../LoadingContainer/LoadingContainer';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\ninterface TaskState {\n\n    answer?: React.ReactNode;\n}\n\nexport abstract class Task<P = {}, S = {}> extends React.Component<React.PropsWithChildren<P>, S & TaskState> {\n\n    protected readonly className?: string | string[];\n\n    private readonly taskClassName: string;\n    private answerPromise?: Promise<React.ReactNode>;\n\n    state = {} as S & TaskState;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Task'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.taskClassName = classNames.join(' ');\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<React.PropsWithChildren<P>>,\n        prevState: Readonly<S & TaskState>,\n        snapshot?: any\n    ): void {\n        if (!isEqual(omit(this.state, 'answer'), omit(prevState, 'answer')) && this.checkParameters()) {\n            (async () => {\n                const answerPromise = this.answerPromise = this.renderAnswer();\n\n                this.setState({ ...this.state, answer: undefined });\n\n                const answer = await answerPromise;\n\n                if (this.answerPromise === answerPromise) {\n                    this.setState({ ...this.state, answer });\n                }\n            })();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.taskClassName}>\n                {this.renderParameters()}\n\n                {this.checkParameters() && (<>\n                    <hr />\n\n                    {this.renderLoading()}\n                </>)}\n            </div>\n        );\n    }\n\n    protected abstract checkParameters(): boolean;\n    protected abstract renderParameters(): React.ReactNode;\n    protected abstract async renderAnswer(): Promise<React.ReactNode>;\n\n    protected renderLoading(): React.ReactNode {\n        const { answer } = this.state;\n\n        return (\n            <LoadingContainer loading={!answer}>\n                {answer}\n            </LoadingContainer>\n        );\n    }\n}\n","import React from 'react';\n\nexport interface ValidationIconProps {\n\n    valid?: boolean;\n    clickable: boolean;\n\n    onClick(): void;\n}\n\nexport class ValidationIcon extends React.Component<ValidationIconProps> {\n\n    static defaultProps: ValidationIconProps = {\n\n        clickable: false,\n        onClick() {}\n    };\n\n    render() {\n        const { valid, clickable, onClick } = this.props;\n\n        if (valid === undefined) {\n            return clickable\n                ? (<i className=\"pi pi-spin pi-replay\" />)\n                : (<i className=\"pi pi-spin pi-spinner\" />);\n        } else {\n            return valid\n                ? (<i className=\"pi pi-check\" />)\n                : clickable\n                    ? (<i className=\"pi pi-replay\" style={{ cursor: 'pointer' }} onClick={onClick} />)\n                    : (<i className=\"pi pi-times\" />);\n        }\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { SelectItem } from 'primereact/api';\nimport mapValues from 'lodash/mapValues';\nimport isEqual from 'lodash/isEqual';\n\nimport { Distribution, DistributionType, distributionTypesSelectItems } from '../../utils/distribution';\nimport { filterObject } from '../../utils/filterObject';\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface DistributionSelectorProps {\n\n    value?: Distribution;\n    normalSigmaSquare: boolean;\n\n    onChange(value?: Distribution): void;\n}\n\ninterface DistributionSelectorState {\n\n    distributionType?: DistributionType;\n    distributionParams: { [key: string]: string | undefined };\n}\n\nexport class DistributionSelector extends React.Component<DistributionSelectorProps, DistributionSelectorState> {\n\n    static defaultProps: DistributionSelectorProps = {\n\n        normalSigmaSquare: true,\n\n        onChange() {}\n    };\n\n    state: DistributionSelectorState = { distributionParams: {} };\n\n    componentDidUpdate(\n        prevProps: Readonly<DistributionSelectorProps>,\n        prevState: Readonly<DistributionSelectorState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(this.props.value, prevProps.value) && this.props.value) {\n            this.setState({\n                ...this.state,\n\n                distributionType: this.props.value.type,\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    ...mapValues(this.props.value.params, String)\n                }\n            });\n        }\n\n        if (!isEqual(this.state, prevState)) {\n            this.onDistributionChange();\n        }\n    }\n\n    private onDistributionTypeChange(value: SelectItem) {\n        this.setState({\n            ...this.state,\n\n            distributionType: value.value as DistributionType\n        });\n    }\n\n    private onDistributionParamChange(param: string, event: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            distributionParams: {\n                ...this.state.distributionParams,\n\n                [param]: event.currentTarget.value\n            }\n        });\n    }\n\n    private onDistributionChange() {\n        const { distributionType, distributionParams } = this.state;\n\n        let newDistribution: Distribution | undefined;\n        const numericParams = mapValues(\n            filterObject(\n                mapValues(distributionParams, s => s ? s.trim() : undefined),\n                Boolean\n            ),\n            Number\n        );\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    }\n                }\n                break;\n\n            case DistributionType.BINOMIAL:\n                if (!isNaN(numericParams['n']) && !isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            n: numericParams['n'],\n                            p: numericParams['p']\n                        }\n                    }\n                }\n                break;\n\n            case DistributionType.GEOMETRIC:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    }\n                }\n                break;\n\n            case DistributionType.POISSON:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    }\n                }\n                break;\n\n            case DistributionType.UNIFORM:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['b'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            b: numericParams['b']\n                        }\n                    }\n                }\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    }\n                }\n                break;\n\n            case DistributionType.NORMAL:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['d'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            d: numericParams['d']\n                        }\n                    }\n                }\n                break;\n        }\n\n        this.props.onChange(newDistribution);\n    }\n\n    render() {\n        const { normalSigmaSquare } = this.props;\n        const { distributionType, distributionParams } = this.state;\n\n        const params: { name: string, field: string }[] = [];\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.BINOMIAL:\n                params.push({ name: 'n', field: 'n'});\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.GEOMETRIC:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.POISSON:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.UNIFORM:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: 'b', field: 'b'});\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.NORMAL:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: '\\u03C3' + (normalSigmaSquare ? '\\u00B2' : ''), field: 'd'});\n                break;\n        }\n\n        const paramsComponents: JSX.Element[] = params\n            .map(param => {\n                const value = distributionParams[param.field];\n\n                return (\n                    <React.Fragment key={param.name}>\n                        <strong>{param.name}</strong> =\n                        <InputText value={value ?? ''} onChange={e => this.onDistributionParamChange(param.field, e)}/>\n                        <ValidationIcon valid={!!value?.trim() && !isNaN(+value)}/>\n                        <br/>\n                    </React.Fragment>\n                );\n            });\n\n        return (\n            <>\n                Распределение:\n                <Dropdown value={this.state.distributionType} options={distributionTypesSelectItems}\n                          onChange={this.onDistributionTypeChange.bind(this)} />\n                <ValidationIcon valid={!!this.state.distributionType} />\n                <br />\n\n                {paramsComponents}\n            </>\n        );\n    }\n}\n","import forEach from 'lodash/forEach'\n\nexport function filterObject<V = any, K extends keyof any = keyof {}>(object: Record<K, V>, predicate: (v: V, k: K) => boolean) {\n    const ret: Record<K, V> = {} as Record<K, V>;\n\n    forEach(object, (v, k) => {\n        if (predicate(v, k as K)) {\n            ret[k as K] = v;\n        }\n    });\n\n    return ret;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../../utils/distribution';\nimport { DistributionSelector } from '../../../components/DistributionSelector/DistributionSelector';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\n\ninterface Task1State {\n\n    n: string;\n    distribution?: Distribution;\n    randomSeed: string;\n}\n\nexport class Task1 extends Task<{}, Task1State> {\n\n    state: Task1State = { n: '', randomSeed: '' };\n\n    private onNChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            n: e.currentTarget.value\n        })\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    private onRandomSeedChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            randomSeed: e.currentTarget.value\n        })\n    }\n\n    protected checkParameters(): boolean {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n ? +n : undefined;\n        const numericRandomSeed = randomSeed ? +randomSeed : undefined;\n\n        return numericN !== undefined && !isNaN(numericN) && !!distribution &&\n            numericRandomSeed !== undefined && !isNaN(numericRandomSeed);\n    }\n\n    protected renderParameters() {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n ? +n : undefined;\n        const numericRandomSeed = randomSeed ? +randomSeed : undefined;\n\n        return (\n            <>\n                Объём (<strong>n</strong> =):\n                <InputText value={n} onChange={this.onNChange.bind(this)} />\n                <ValidationIcon valid={numericN !== undefined && !isNaN(numericN)} />\n                <br />\n\n                <DistributionSelector normalSigmaSquare={false} value={distribution}\n                                      onChange={this.onDistributionChange.bind(this)} />\n\n                <strong>random seed</strong> =\n                <InputText value={randomSeed} onChange={this.onRandomSeedChange.bind(this)} />\n                <ValidationIcon valid={numericRandomSeed !== undefined && !isNaN(numericRandomSeed)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, distribution, randomSeed } = this.state;\n\n        if (!n || !distribution || !randomSeed) {\n            return;\n        }\n\n        let code = `\nimport numpy as np\nnp.random.seed(${randomSeed})\n`;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                code += `sample = np.random.binomial(1, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.BINOMIAL:\n                code += `sample = np.random.binomial(${distribution.params.n}, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.GEOMETRIC:\n                code += `sample = np.random.geometric(${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.POISSON:\n                code += `sample = np.random.poisson(${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.UNIFORM:\n                code += `sample = np.random.uniform(${distribution.params.a}, ${distribution.params.b}, ${n})`;\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                code += `sample = np.random.exponential(1 / ${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.NORMAL:\n                code += `sample = np.random.normal(${distribution.params.a}, ${distribution.params.d}, ${n})`;\n                break;\n        }\n\n        code += `\nprint(\",\".join([str(round(sample[i], 2)) for i in range(5)]))\nprint(\",\".join([str(round(sample[${+n - 5} + i], 2)) for i in range(5)]))\nprint(sum(sample)/len(sample))\n`;\n\n        return (\n            <>\n                Выполните следущий код в Python-интерпретаторе (например, на сайте <a href=\"https://repl.it\" target=\"_blank\" rel=\"noopener noreferrer\">repl.it</a>):\n\n                <pre>{code}</pre>\n\n                И скопируйте выведенные на экран строки в поля для ответов.\n            </>\n        );\n    }\n}\n","import mean from 'lodash/mean';\n\nexport function variance(sample: number[], expected?: number) {\n    const e = expected ? expected : mean(sample);\n\n    return mean(sample.map(v => (v - e) ** 2));\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport maxBy from 'lodash/maxBy';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { variance } from '../../../utils/dispersion';\n\ninterface Task21State {\n\n    alchemists: string;\n}\n\ninterface CountObject {\n\n    value: number;\n    count: number;\n}\n\nexport class Task21 extends Task<{}, Task21State> {\n\n    private alchemistsRegexp = /^( *\\()?( *\\d+( *,)?)* *\\d+? *(\\) *)?$/;\n\n    state: Task21State = { alchemists: '' };\n\n    private onAlchemistsChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            alchemists: e.currentTarget.value\n        })\n    }\n\n    protected checkParameters(): boolean {\n        return this.alchemistsRegexp.test(this.state.alchemists);\n    }\n\n    protected renderParameters() {\n        const { alchemists } = this.state;\n\n        return (\n            <>\n                Выборка: <InputText placeholder=\"(a, b, c...)\" value={alchemists}\n                                    onChange={this.onAlchemistsChange.bind(this)} />\n                <ValidationIcon valid={this.alchemistsRegexp.test(alchemists)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { alchemists } = this.state;\n\n        if (!alchemists) {\n            return;\n        }\n\n        const sample = alchemists.replace(/[()]/g, '').trim()\n            .replace(/,/g, ' ').replace(/ +/g, ' ')\n            .split(' ').map(v => Number(v.trim())).sort((a, b) => a - b);\n\n        const counts: Array<CountObject> = [1, 2, 3, 4, 5, 6]\n            .map(i => ({value: i, count: sample.filter(v => v === i).length}));\n\n        const e = mean(sample);\n        const d = variance(sample, e);\n        const m = sample.length % 2 === 0\n            ? (sample[sample.length / 2] + sample[sample.length / 2]) / 2\n            : sample[(sample.length + 1) / 2];\n\n        const maxCount = maxBy(counts, v => v.count)?.count;\n        const mode = counts.filter(v => v.count === maxCount)\n            .map(v => v.value).sort((a, b) => a - b)[0];\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                    {[(v: CountObject) => v.value < 4, (v: CountObject) => v.value > 3].map(f => (\n                        <tr key={String(f)}>\n                            {counts.filter(f).map(v => (\n                                <td key={v.value}>\n                                    P(&#958;<sup>*</sup> = {v.value}) =\n                                    <InputText readOnly value={v.count === 0 ? '0' : `${v.count} / ${sample.length}`} />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                Математическое ожидание: <InputText readOnly value={e} /><br />\n                Дисперсия: <InputText readOnly value={d} /><br />\n                Среднеквадратическое отклонение: <InputText readOnly value={Math.sqrt(d)} /><br />\n                Медиана: <InputText readOnly value={m} /><br />\n                Мода: <InputText readOnly value={mode} /><br />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport { InputText } from 'primereact/inputtext';\n\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface FetchingInputSampleProps {\n\n    onChange(sample?: number[]): void;\n}\n\ninterface FetchingInputSampleState {\n\n    url: string;\n    loading: boolean;\n    sample?: number[];\n}\n\nexport class FetchingInputSample extends React.Component<FetchingInputSampleProps, FetchingInputSampleState> {\n\n    private previousFetch: number = Date.now();\n\n    private urlRegex = /^[^:/?#]+:\\/\\/[^/?#]*[^?#]*(\\?([^#]*))?(#(.*))?$/;\n    private proxyUrl = 'https://proxy.byprogminer.ru/?';\n\n    state: FetchingInputSampleState = {\n        url: '',\n        loading: false\n    };\n\n    componentDidUpdate(\n        prevProps: Readonly<FetchingInputSampleProps>,\n        prevState: Readonly<FetchingInputSampleState>,\n        snapshot?: any\n    ): void {\n        if (!isEqual(omit(this.state, ['loading', 'sample']), omit(prevState, ['loading', 'sample']))) {\n            this.reload();\n        }\n    }\n\n    private reload() {\n        const { url } = this.state;\n\n        (async () => {\n            try {\n                if (this.urlRegex.test(url)) {\n                    await new Promise(resolve =>\n                        setTimeout(resolve, Math.max(0, this.previousFetch + 100 - Date.now())));\n\n                    this.previousFetch = Date.now();\n                    const response = await fetch(this.proxyUrl + url);\n\n                    if (response.ok) {\n                        const sampleText = await response.text();\n                        const sample = sampleText.split('\\n')\n                            .map(s => s.trim()).filter(Boolean).map(Number);\n\n                        if (this.state.url === url) {\n                            this.setState({ ...this.state, loading: false, sample });\n                            this.props.onChange(sample);\n                        }\n\n                        return;\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n\n            this.setState({ ...this.state, loading: false, sample: undefined });\n            this.props.onChange(undefined);\n        })();\n    }\n\n    private onUrlChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            url: e.currentTarget.value,\n            loading: true\n        });\n    }\n\n    private onIconClick() {\n        this.setState({ ...this.state, loading: true });\n        this.reload();\n    }\n\n    render() {\n        const { url, loading, sample } = this.state;\n\n        return (\n            <>\n                <InputText value={url} onChange={this.onUrlChange.bind(this)} />\n                <ValidationIcon clickable={this.urlRegex.test(url)} valid={loading ? undefined : !!sample}\n                                onClick={this.onIconClick.bind(this)} />\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../../utils/distribution';\nimport { DistributionSelector } from '../../../components/DistributionSelector/DistributionSelector';\nimport { FetchingInputSample } from '../../../components/FetchingInputSample/FetchingInputSample';\nimport { variance } from '../../../utils/dispersion';\n\ninterface Task22State {\n\n    sample10?: number[];\n    sample10000?: number[];\n    distribution?: Distribution;\n}\n\nexport class Task22 extends Task<{}, Task22State> {\n\n    state: Task22State = {};\n\n    private onSample10Change(sample10?: number[]) {\n        this.setState({...this.state, sample10});\n    }\n\n    private onSample10000Change(sample10000?: number[]) {\n        this.setState({...this.state, sample10000});\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { sample10, sample10000, distribution } = this.state;\n\n        return !!sample10 && !!sample10000 && !!distribution;\n    }\n\n    protected renderParameters() {\n        const { distribution } = this.state;\n\n        return (\n            <>\n                Выборка объёма <strong>n = 10</strong>:\n                <FetchingInputSample onChange={this.onSample10Change.bind(this)} />\n                <br />\n\n                Выборка объёма <strong>n = 10000</strong>:\n                <FetchingInputSample onChange={this.onSample10000Change.bind(this)} />\n                <br />\n\n                <DistributionSelector normalSigmaSquare={false} value={distribution}\n                                      onChange={this.onDistributionChange.bind(this)} />\n            </>\n        );\n    }\n\n    private static output(property: string, v: number, p: number, trueP: number, d: number, trueD: number): React.ReactNode {\n        return (\n            <>\n                Для выборки объёма <strong>{v}</strong>:<br />\n                Оценка <strong>{property}</strong>: <InputText readOnly value={p} /><br />\n                Погрешность оценки: <InputText readOnly value={Math.abs(p - trueP)} /><br />\n                Оценка дисперсии: <InputText readOnly value={d} /><br />\n                Погрешность оценки дисперсии: <InputText readOnly value={Math.abs(d - trueD)} />\n            </>\n        )\n    }\n\n    protected async renderAnswer() {\n        const { sample10, sample10000, distribution } = this.state;\n\n        if (!sample10 || !sample10000 || !distribution) {\n            return;\n        }\n\n        const e10 = mean(sample10);\n        const e10000 = mean(sample10000);\n        const d10 = variance(sample10, e10);\n        const d10000 = variance(sample10000, e10000);\n\n        let output: (v: number, e: number, d: number) => React.ReactNode;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                output = (v, e, d) => Task22.output(\n                    'p',\n                    v,\n                    e,\n                    distribution.params.p,\n                    d,\n                    distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.BINOMIAL:\n                output = (v, e, d) => Task22.output(\n                    'p',\n                    v,\n                    e / distribution.params.n,\n                    distribution.params.p,\n                    d,\n                    distribution.params.n * distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                output = (v, e, d) => Task22.output(\n                    'p',\n                    v,\n                    1 / e,\n                    distribution.params.p,\n                    d,\n                    (1 - distribution.params.p) / distribution.params.p ** 2\n                );\n                break;\n\n            case DistributionType.POISSON:\n                output = (v, e, d) => Task22.output(\n                    '\\u03BB',\n                    v,\n                    e,\n                    distribution.params.l,\n                    d,\n                    distribution.params.l\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                output = (v, e, d) => Task22.output(\n                    'a',\n                    v,\n                    2 * e - distribution.params.b,\n                    distribution.params.a,\n                    d,\n                    (distribution.params.b - distribution.params.a) ** 2 / 12\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                output = (v, e, d) => Task22.output(\n                    '\\u03BB',\n                    v,\n                    1 / e,\n                    distribution.params.l,\n                    d,\n                    1 / distribution.params.l ** 2\n                );\n                break;\n\n            case DistributionType.NORMAL:\n                output = (v, e, d) => Task22.output(\n                    'a',\n                    v,\n                    e,\n                    distribution.params.a,\n                    d,\n                    distribution.params.d\n                );\n                break;\n        }\n\n        return (\n            <>\n                {output(10, e10, d10)}\n\n                <hr />\n\n                {output(10000, e10000, d10000)}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task1 } from './Task1/Task1';\nimport { Task21 } from './Task21/Task21';\nimport { Task22 } from './Task21/Task22';\n\nexport class Week6 extends Week {\n\n    weekName = 'Неделя 6. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1 (Python)\"><Task1 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 1\"><Task21 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task22 /></AccordionTab>\n            </Accordion>\n        )\n    }\n}\n","import React from 'react';\n\nimport { Week6 } from '../../weeks/Week6/Week6';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Week6 />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}