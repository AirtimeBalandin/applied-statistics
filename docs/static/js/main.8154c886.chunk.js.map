{"version":3,"sources":["components/HeaderTemplate/HeaderTemplate.tsx","onlineCourse/components/Header/Header.tsx","components/Week/Week.tsx","components/LoadingContainer/LoadingContainer.tsx","components/Task/Task.tsx","components/ValidationIcon/ValidationIcon.tsx","utils/verifyNumber.ts","utils/verifyInteger.ts","utils/factorial.ts","utils/normalizeNumber.ts","utils/parseExpression.ts","onlineCourse/tasks/Task411/Task411.tsx","utils/distribution.ts","onlineCourse/tasks/Task412/Task412.tsx","onlineCourse/tasks/Task413/Task413.tsx","onlineCourse/weeks/Week4/Week4.tsx","onlineCourse/tasks/Task511/Task511.tsx","onlineCourse/tasks/Task512/Task512.tsx","onlineCourse/tasks/Task522/Task522.tsx","onlineCourse/tasks/Task523/Task523.tsx","onlineCourse/tasks/Task521/Task521.tsx","onlineCourse/weeks/Week5/Week5.tsx","components/InputDistributionType/InputDistributionType.tsx","components/InputDistribution/InputDistribution.tsx","utils/filterObject.ts","onlineCourse/tasks/Task61/Task61.tsx","utils/sampleVariance.tsx","utils/median.ts","onlineCourse/tasks/Task621/Task621.tsx","components/FetchingInputSample/FetchingInputSample.tsx","onlineCourse/tasks/Task622/Task622.tsx","onlineCourse/weeks/Week6/Week6.tsx","utils/sampleQuantile.ts","onlineCourse/tasks/Task7/Task7.tsx","onlineCourse/weeks/Week7/Week7.tsx","onlineCourse/tasks/Task8/Task8.tsx","utils/erf.ts","onlineCourse/weeks/Week8/Week8.tsx","utils/normStInv.ts","onlineCourse/tasks/Task9/Task9.tsx","onlineCourse/weeks/Week9/Week9.tsx","onlineCourse/tasks/Task10/Task10.tsx","onlineCourse/weeks/Week10/Week10.tsx","finalTest/components/Header/Header.tsx","finalTest/components/FinalTask/FinalTask.tsx","finalTest/tasks/Task1/Task1.tsx","finalTest/tasks/Task2/Task2.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","onlineCourse/tasks/Task61/pythonTab.png"],"names":["HeaderTemplate","className","header","this","renderContent","href","target","rel","style","paddingLeft","React","Component","Header","Week","props","weekName","weekClassName","classNames","Array","isArray","push","join","toggleable","collapsed","LoadingContainer","loading","renderLoading","progress","minProgress","maxProgress","mode","value","children","defaultProps","Task","taskClassName","answerPromise","state","prevProps","prevState","snapshot","isEqual","omit","checkParameters","a","async","renderAnswer","setState","answer","undefined","renderParameters","ValidationIcon","valid","clickable","onClick","cursor","verifyNumber","n","isNaN","verifyInteger","num","Number","isInteger","factorialBuffer","factorial","Math","floor","normalizeNumber","scale","c","round","toFixed","leftExprRegexp","rightExprRegexp","parseExpression","leftExpr","rightExpr","k1","k2","ret","includes","substring","length","DistributionType","Task411","p","param","trim","e","currentTarget","test","legend","onChange","onStateChange","textAlign","cleanedLeftExpr","replace","cleanedRightExpr","s","k","readOnly","Task412","Task413","l","exp","Week4","multiple","disabled","Task511","expr","b","checkRow","i","row","map","Fragment","key","minWidth","onRowChange","onExprChange","sort","reducedN","reduce","v","filter","Task512","checkArray","params","onParamChange","array","Task522","onEChange","Task523","d","onDChange","Task521","Week5","BERNOULLI","BINOMIAL","GEOMETRIC","POISSON","UNIFORM","EXPONENTIAL","NORMAL","InputDistributionType","exclude","itemTemplate","dropdownTemplate","options","selectItems","option","mnemonic","mnemonics","get","label","Map","InputDistribution","distributionParams","distributionType","type","mapValues","String","onDistributionChange","newDistribution","numericParams","object","predicate","forEach","filterObject","normalSigmaSquare","name","field","integer","paramsComponents","onDistributionParamChange","onDistributionTypeChange","bind","Task61","randomSeed","count","distribution","onNChange","onRandomSeedChange","onCountChange","code","src","pythonTab","alt","sampleVariance","sample","expected","mean","median","Task621","alchemistsRegexp","alchemists","placeholder","onAlchemistsChange","split","counts","m","maxCount","maxBy","f","sqrt","FetchingInputSample","previousFetch","Date","now","urlRegex","proxyUrl","url","reload","Promise","resolve","setTimeout","max","fetch","response","ok","text","sampleText","Boolean","console","log","onUrlChange","onIconClick","Task622","sample10","sample10000","onSample10Change","onSample10000Change","e10","e10000","d10","d10000","output","property","trueP","trueD","abs","Week6","sampleQuantile","level","index","integerIndex","citySelectItems","avgSalary","Task7","cities","sampleIndices","intervalIndices","checkIndices","indices","verticalAlign","onCitiesChange","onIndexChange","_","numericSampleIndices","numericIntervalIndices","intervalLength","intervalOffset","fixedV","Week7","Task8","specificParameters","specificParametersCheck","specificParametersOutput","onSpecificParameterChange","onSampleChange","avg","variance","theta","sqAvg","sqrt3Variance","x","sum","pow","erf","renderBinomialAnswer","renderGeometricAnswer","renderPoissonAnswer","renderUniformAnswer","renderExponentialAnswer","renderNormalAnswer","Week8","normStInv","q","r","retVal","c1","c2","c3","c4","c5","c6","d1","d2","d3","d4","Task9","paramTitle","quantile","sqrtN","renderGeneralPart","start","end","first","last","Week9","Task10","onMChange","deviation","absDeviationFunc","hypothesis","Week10","FinalTask","renderProblem","renderFinalParameters","Task1","white","red","onChangeState","Task2","pChanged","checkTable","j","table","letter","onPChange","en","en2","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8154c886.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nimport './HeaderTemplate.css';\n\nexport abstract class HeaderTemplate extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <Panel header=\"Добро пожаловать!\">\n                    {this.renderContent()}\n\n                    <br />\n                    <br />\n\n                    Автор:{' '}\n                    <a href=\"https://byprogminer.ru/vk\" target=\"_blank\" rel=\"noopener noreferrer\">Доморацкий Эридан</a>.{' '}\n                    <strong>В случае ошибки (например, вывода неправильного ответа), пишите, пожалуйста, в ЛС!</strong>\n                    <br />\n\n                    <small>\n                        (донатить сюда: <strong>5321<span style={{ paddingLeft: '0.5ch' }} />{' '}\n                        8687<span style={{ paddingLeft: '0.5ch' }} />2723<span style={{ paddingLeft: '0.5ch' }} />{' '}\n                        3422</strong> — MasterCard Банк СПб;{' '}\n\n                        <a href=\"https://my.qiwi.com/Erydan-DMVuYwfjtW\" target=\"_blank\" rel=\"noopener noreferrer\">Qiwi</a>)\n                    </small>\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\n\nimport { HeaderTemplate } from '../../../components/HeaderTemplate/HeaderTemplate';\n\nexport class Header extends HeaderTemplate {\n\n    protected renderContent() {\n        return (\n            <>\n                Это онлайн программа для решения задач из упражнений онлайн-курса Прикладная статистика.\n                <br />\n\n                Отдельное спасибо авторам программ и таблиц, на основе которых была создана эта:{' '}\n                <strong>Никита Черняк</strong> (4.1, 6.2.2), <strong>Даниил Коровин</strong> (5.2.1),{' '}\n                <strong>Света Пелевина</strong> (7),{' '}<strong>Павел Нестерчук</strong>{' '}\n                (9: распределения геометрическое и Пуассона), <strong>Andrey Kharchuk</strong>{' '}\n                (9: равномерное и нормальное распределения), <strong>Александр Щербаков</strong>{' '}\n                (9: последнее задание в нормальном распределении).\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nexport abstract class Week<P = {}, S = {}> extends React.Component<P, S> {\n\n    protected readonly abstract weekName: string;\n    protected readonly className?: string | string[];\n\n    private readonly weekClassName: string;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Week'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.weekClassName = classNames.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.weekClassName}>\n                <Panel header={this.weekName} toggleable collapsed>\n                    {this.renderContent()}\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\nimport { ProgressBar } from 'primereact/progressbar';\n\nexport interface LoadingContainerProps {\n\n    loading: boolean;\n    progress?: number;\n    minProgress: number;\n    maxProgress: number;\n}\n\nexport class LoadingContainer<P = {}, S = {}> extends React.Component<P & React.PropsWithChildren<LoadingContainerProps>, S> {\n\n    static defaultProps: LoadingContainerProps = {\n\n        loading: false,\n        minProgress: 0,\n        maxProgress: 100\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return this.renderLoading();\n        } else {\n            return this.renderContent();\n        }\n    }\n\n    protected renderLoading(): React.ReactNode {\n        const { progress, minProgress, maxProgress } = this.props;\n\n        return (\n            <ProgressBar mode={progress ? 'determinate' : 'indeterminate'} value={typeof progress === 'number' ?\n                (progress - minProgress) / (maxProgress - minProgress) : 0} />\n        );\n    }\n\n    protected renderContent(): React.ReactNode {\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport { LoadingContainer } from '../LoadingContainer/LoadingContainer';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\ninterface TaskState {\n\n    answer?: React.ReactNode;\n}\n\nexport abstract class Task<P = {}, S = {}> extends React.Component<React.PropsWithChildren<P>, S & TaskState> {\n\n    protected readonly className?: string | string[];\n\n    private readonly taskClassName: string;\n    private answerPromise?: Promise<React.ReactNode>;\n\n    state = {} as S & TaskState;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Task'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.taskClassName = classNames.join(' ');\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<React.PropsWithChildren<P>>,\n        prevState: Readonly<S & TaskState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, 'answer'), omit(prevState, 'answer')) && this.checkParameters()) {\n            (async () => {\n                const answerPromise = this.answerPromise = this.renderAnswer();\n                this.setState({ ...this.state, answer: undefined });\n\n                const answer = await answerPromise;\n                if (this.answerPromise === answerPromise) {\n                    this.setState({ ...this.state, answer });\n                }\n            })();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.taskClassName}>\n                {this.renderParameters()}\n\n                {this.checkParameters() && (\n                    <>\n                        <hr />\n\n                        {this.renderLoading()}\n                        </>\n                )}\n            </div>\n        );\n    }\n\n    protected abstract checkParameters(): boolean;\n    protected abstract renderParameters(): React.ReactNode;\n    protected abstract async renderAnswer(): Promise<React.ReactNode>;\n\n    protected renderLoading(): React.ReactNode {\n        const { answer } = this.state;\n\n        return (\n            <LoadingContainer loading={!answer}>\n                {answer}\n            </LoadingContainer>\n        );\n    }\n}\n","import React from 'react';\n\nexport interface ValidationIconProps {\n\n    valid?: boolean;\n    clickable: boolean;\n\n    onClick(): void;\n}\n\nexport class ValidationIcon extends React.Component<ValidationIconProps> {\n\n    static defaultProps: ValidationIconProps = {\n\n        clickable: false,\n\n        onClick() {}\n    };\n\n    render() {\n        const { valid, clickable, onClick } = this.props;\n\n        if (valid === undefined) {\n            return clickable\n                ? (<i className=\"pi pi-spin pi-replay\" />)\n                : (<i className=\"pi pi-spin pi-spinner\" />);\n        } else {\n            return valid\n                ? (<i className=\"pi pi-check\" />)\n                : clickable\n                    ? (<i className=\"pi pi-replay\" style={{ cursor: 'pointer' }} onClick={onClick} />)\n                    : (<i className=\"pi pi-times\" />);\n        }\n    }\n}\n","\nexport function verifyNumber(n?: string): boolean {\n    if (n === undefined) {\n        return false;\n    }\n\n    return !!n && !isNaN(+n);\n}\n","\nexport function verifyInteger(n?: string): boolean {\n    if (n === undefined) {\n        return false;\n    }\n\n    const num = +n;\n    return !!n && !isNaN(num) && Number.isInteger(num);\n}\n","const factorialBuffer: number[] = [1, 1, 2];\n\nexport function factorial(n: number): number {\n    if (factorialBuffer[n]) {\n        return factorialBuffer[n];\n    }\n\n    if (n < 1) {\n        return 0;\n    }\n\n    n = Math.floor(n);\n    return factorialBuffer[n] = factorial(n - 1) * n;\n}\n","\nexport function normalizeNumber(n: number, scale: number = 15) {\n    const c = 10 ** scale;\n\n    return +(Math.round(n * c) / c).toFixed(scale);\n}\n","\nexport const leftExprRegexp = /^(\\s*-?\\d+\\s*<=?)?\\s*$/;\nexport const rightExprRegexp = /^\\s*[<>]=?\\s*-?\\d+\\s*$/;\n\nexport function parseExpression(\n    leftExpr: string,\n    rightExpr: string,\n    k1: number,\n    k2: number\n): { k1: number, k2: number } {\n    const ret = { k1, k2 };\n\n    if (!leftExpr) {\n        if (rightExpr[0] === '>') {\n            ret.k1 = rightExpr.includes('=')\n                ? +rightExpr.substring(2)\n                : +rightExpr.substring(1) + 1;\n        } else {\n            ret.k2 = rightExpr.includes('=')\n                ? +rightExpr.substring(2) + 1\n                : +rightExpr.substring(1);\n        }\n    } else {\n        ret.k1 = leftExpr.includes('=')\n            ? +leftExpr.substring(0, leftExpr.length - 2)\n            : +leftExpr.substring(0, leftExpr.length - 1) + 1;\n\n        ret.k2 = rightExpr.includes('=')\n            ? +rightExpr.substring(2) + 1\n            : +rightExpr.substring(1);\n    }\n\n    return ret;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { verifyInteger } from '../../../utils/verifyInteger';\nimport { factorial } from '../../../utils/factorial';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { leftExprRegexp, parseExpression, rightExprRegexp } from '../../../utils/parseExpression';\n\ninterface Task411State {\n\n    n: string;\n    p: string;\n    leftExpr: string;\n    rightExpr: string;\n}\n\nexport class Task411 extends Task<{}, Task411State> {\n\n    state: Task411State = { n: '', p: '', leftExpr: '', rightExpr: '' };\n\n    private onStateChange(param: 'n' | 'p' | 'leftExpr' | 'rightExpr', trim: boolean = true) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                [param]: trim ? e.currentTarget.value.trim() : e.currentTarget.value\n            });\n        };\n    }\n\n    protected checkParameters(): boolean {\n        const { n, p, leftExpr, rightExpr } = this.state;\n\n        return verifyInteger(n) && verifyNumber(p) && leftExprRegexp.test(leftExpr) && rightExprRegexp.test(rightExpr);\n    }\n\n    protected renderParameters() {\n        const { n, p, leftExpr, rightExpr } = this.state;\n\n        return (\n            <>\n                <Fieldset legend={\n                    <strong>Bin({n || 'n'}, {p || 'p'})</strong>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>n</strong> =\n                        </span>\n\n                        <InputText value={n} onChange={this.onStateChange('n')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyInteger(n)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>p</strong> =\n                        </span>\n\n                        <InputText value={p} onChange={this.onStateChange('p')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(p)} />\n                        </span>\n                    </div>\n                </Fieldset>\n                <br />\n\n                <strong>В выражении используйте &lt;= для &le;.</strong>\n                <br />\n                <br />\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выражение:\n                    </span>\n\n                    <InputText style={{ textAlign: 'right' }} value={leftExpr}\n                               onChange={this.onStateChange('leftExpr', false)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#958;</strong>\n                    </span>\n\n                    <InputText value={rightExpr} onChange={this.onStateChange('rightExpr', false)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon\n                            valid={leftExprRegexp.test(leftExpr) && rightExprRegexp.test(rightExpr)}\n                        />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, p, leftExpr, rightExpr } = this.state;\n\n        const cleanedLeftExpr = leftExpr.replace(/\\s/, '');\n        const cleanedRightExpr = rightExpr.replace(/\\s/, '');\n\n        if (!!cleanedLeftExpr && cleanedRightExpr.includes('>')) {\n            return (\n                <>Введены некорректные данные</>\n            );\n        }\n\n        const { k1, k2 } = parseExpression(cleanedLeftExpr, cleanedRightExpr, 0, +n + 1);\n\n        let s = 0;\n        for (let k = k1; k < k2; ++k) {\n            s += (+p) ** k * (1 - +p) ** (+n - k) / factorial(k) / factorial(+n - k);\n        }\n\n        return (\n            <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\">\n                    <strong>P({k1} &le; &#958; &le; {k2})</strong> =\n                </span>\n\n                <InputText readOnly value={normalizeNumber(factorial(+n) * s)} />\n            </div>\n        );\n    }\n}\n","\nexport enum DistributionType {\n\n    BERNOULLI = 1,\n    BINOMIAL,\n    GEOMETRIC,\n    POISSON,\n    UNIFORM,\n    EXPONENTIAL,\n    NORMAL\n}\n\nexport interface BernoulliDistribution {\n\n    type: DistributionType.BERNOULLI;\n    params: { p: number };\n}\n\nexport interface BinomialDistribution {\n\n    type: DistributionType.BINOMIAL;\n    params: {\n        n: number;\n        p: number;\n    }\n}\n\nexport interface GeometricDistribution {\n\n    type: DistributionType.GEOMETRIC;\n    params: { p: number };\n}\n\nexport interface PoissonDistribution {\n\n    type: DistributionType.POISSON;\n    params: { l: number };\n}\n\nexport interface UniformDistribution {\n\n    type: DistributionType.UNIFORM;\n    params: {\n        a: number;\n        b: number;\n    }\n}\n\nexport interface ExponentialDistribution {\n\n    type: DistributionType.EXPONENTIAL;\n    params: { l: number };\n}\n\nexport interface NormalDistribution {\n\n    type: DistributionType.NORMAL;\n    params: {\n        a: number;\n        d: number;\n    }\n}\n\nexport type Distribution =\n    BernoulliDistribution |\n    BinomialDistribution |\n    GeometricDistribution |\n    PoissonDistribution |\n    UniformDistribution |\n    ExponentialDistribution |\n    NormalDistribution;\n\nexport const distributionTypes = [\n    DistributionType.BERNOULLI,\n    DistributionType.BINOMIAL,\n    DistributionType.GEOMETRIC,\n    DistributionType.POISSON,\n    DistributionType.UNIFORM,\n    DistributionType.EXPONENTIAL,\n    DistributionType.NORMAL\n];\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { leftExprRegexp, parseExpression, rightExprRegexp } from '../../../utils/parseExpression';\n\ninterface Task412State {\n\n    p: string;\n    leftExpr: string;\n    rightExpr: string;\n}\n\nexport class Task412 extends Task<{}, Task412State> {\n\n    state: Task412State = { p: '', leftExpr: '', rightExpr: '' };\n\n    private onStateChange(param: 'p' | 'leftExpr' | 'rightExpr', trim: boolean = true) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                [param]: trim ? e.currentTarget.value.trim() : e.currentTarget.value\n            });\n        };\n    }\n\n    protected checkParameters(): boolean {\n        const { p, leftExpr, rightExpr } = this.state;\n\n        return verifyNumber(p) && leftExprRegexp.test(leftExpr) && rightExprRegexp.test(rightExpr);\n    }\n\n    protected renderParameters() {\n        const { p, leftExpr, rightExpr } = this.state;\n\n        return (\n            <>\n                <Fieldset legend={\n                    <strong>G<sub>{p || 'p'}</sub></strong>\n                }>\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>p</strong> =\n                        </span>\n\n                        <InputText value={p} onChange={this.onStateChange('p')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(p)} />\n                        </span>\n                    </div>\n                </Fieldset>\n                <br />\n\n                <strong>В выражении используйте &lt;= для &le;.</strong>\n                <br />\n                <br />\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выражение:\n                    </span>\n\n                    <InputText style={{ textAlign: 'right' }} value={leftExpr}\n                               onChange={this.onStateChange('leftExpr', false)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#958;</strong>\n                    </span>\n\n                    <InputText value={rightExpr} onChange={this.onStateChange('rightExpr', false)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon\n                            valid={leftExprRegexp.test(leftExpr) && rightExprRegexp.test(rightExpr)}\n                        />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { p, leftExpr, rightExpr } = this.state;\n\n        const cleanedLeftExpr = leftExpr.replace(/\\s/, '');\n        const cleanedRightExpr = rightExpr.replace(/\\s/, '');\n\n        if (!!cleanedLeftExpr && cleanedRightExpr.includes('>')) {\n            return (\n                <>Введены некорректные данные</>\n            );\n        }\n\n        const { k1, k2 } = parseExpression(cleanedLeftExpr, cleanedRightExpr, 1, 1001);\n\n        let s = 0;\n        for (let k = k1; k < k2; ++k) {\n            s += (1 - +p) ** (k - 1);\n        }\n\n        return (\n            <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\">\n                    <strong>P({k1} &le; &#958; &le; {k2})</strong> =\n                </span>\n\n                <InputText readOnly value={normalizeNumber(+p * s)} />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { leftExprRegexp, parseExpression, rightExprRegexp } from '../../../utils/parseExpression';\nimport { factorial } from '../../../utils/factorial';\n\ninterface Task413State {\n\n    l: string;\n    leftExpr: string;\n    rightExpr: string;\n}\n\nexport class Task413 extends Task<{}, Task413State> {\n\n    state: Task413State = { l: '', leftExpr: '', rightExpr: '' };\n\n    private onStateChange(param: 'l' | 'leftExpr' | 'rightExpr', trim: boolean = true) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                [param]: trim ? e.currentTarget.value.trim() : e.currentTarget.value\n            });\n        };\n    }\n\n    protected checkParameters(): boolean {\n        const { l, leftExpr, rightExpr } = this.state;\n\n        return verifyNumber(l) && leftExprRegexp.test(leftExpr) && rightExprRegexp.test(rightExpr);\n    }\n\n    protected renderParameters() {\n        const { l, leftExpr, rightExpr } = this.state;\n\n        return (\n            <>\n                <Fieldset legend={\n                    <strong>&#928;<sub>{l || '\\u03bb'}</sub></strong>\n                }>\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>&#955;</strong> =\n                        </span>\n\n                        <InputText value={l} onChange={this.onStateChange('l')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(l)} />\n                        </span>\n                    </div>\n                </Fieldset>\n                <br />\n\n                <strong>В выражении используйте &lt;= для &le;.</strong>\n                <br />\n                <br />\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выражение:\n                    </span>\n\n                    <InputText style={{ textAlign: 'right' }} value={leftExpr}\n                               onChange={this.onStateChange('leftExpr', false)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#958;</strong>\n                    </span>\n\n                    <InputText value={rightExpr} onChange={this.onStateChange('rightExpr', false)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon\n                            valid={leftExprRegexp.test(leftExpr) && rightExprRegexp.test(rightExpr)}\n                        />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { l, leftExpr, rightExpr } = this.state;\n\n        const cleanedLeftExpr = leftExpr.replace(/\\s/, '');\n        const cleanedRightExpr = rightExpr.replace(/\\s/, '');\n\n        if (!!cleanedLeftExpr && cleanedRightExpr.includes('>')) {\n            return (\n                <>Введены некорректные данные</>\n            );\n        }\n\n        const { k1, k2 } = parseExpression(cleanedLeftExpr, cleanedRightExpr, 0, 101);\n\n        let s = 0;\n        for (let k = k1; k < k2; ++k) {\n            s += (+l) ** k / factorial(k);\n        }\n\n        return (\n            <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\">\n                    <strong>P({k1} &le; &#958; &le; {k2})</strong> =\n                </span>\n\n                <InputText readOnly value={normalizeNumber(Math.exp(-l) * s)} />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task411 } from '../../tasks/Task411/Task411';\nimport { Task412 } from '../../tasks/Task412/Task412';\nimport { Task413 } from '../../tasks/Task413/Task413';\n\nexport class Week4 extends Week {\n\n    weekName = 'Неделя 4. Типы распределений случайных величин';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1. Задача 1\"><Task411 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 1. Задача 2\"><Task412 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 1. Задача 3\"><Task413 /></AccordionTab>\n                <AccordionTab disabled header=\"Упражнение 2. Задача 1 (coming soon)\" />\n                <AccordionTab disabled header=\"Упражнение 2. Задача 2 (coming soon)\" />\n                <AccordionTab disabled header=\"Упражнение 2. Задача 3 (coming soon)\" />\n                <AccordionTab disabled header=\"Упражнение 3. Задача 1 (coming soon)\" />\n                <AccordionTab disabled header=\"Упражнение 3. Задача 2 (coming soon)\" />\n            </Accordion>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\nimport isEqual from 'lodash/isEqual';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\n\ninterface Task511State {\n\n    e: [string, string, string, string];\n    p: [string, string, string, string];\n    expr: {\n        a: string;\n        p: string;\n        b: string;\n    }\n}\n\nexport class Task511 extends Task<{}, Task511State> {\n\n    state: Task511State = {\n        e: ['', '', '', ''],\n        p: ['', '', '', ''],\n        expr: { a: '', p: '', b: '' }\n    };\n\n    private static checkRow(row: [string, string, string, string]) {\n        return row.filter(verifyNumber).length === 4;\n    }\n\n    protected checkParameters(): boolean {\n        const { e, p, expr } = this.state;\n\n        return Task511.checkRow(e) && Task511.checkRow(p) &&\n            verifyNumber(expr.a) && verifyNumber(expr.p) && verifyNumber(expr.b);\n    }\n\n    private onRowChange(param: 'e' | 'p', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const row = [...this.state[param]];\n\n            row[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [param]: row });\n        };\n    }\n\n    private onExprChange(param: 'a' | 'b' | 'p') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                expr: {\n                    ...this.state.expr,\n\n                    [param]: e.currentTarget.value.trim()\n                }\n            });\n        };\n    }\n\n    protected renderParameters() {\n        const { e, p, expr } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#958;</strong>\n                    </span>\n\n                    {[0, 1, 2, 3].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={e[i]} onChange={this.onRowChange('e', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task511.checkRow(e)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>P</strong>\n                    </span>\n\n                    {[0, 1, 2, 3].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={p[i]} onChange={this.onRowChange('p', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task511.checkRow(p)} />\n                    </span>\n                </div>\n\n                <Fieldset legend={\n                    <>\n                        <strong>&#951;</strong> ={' '}\n                        <strong>{expr.a || 'a'}</strong> &#8901;{' '}\n                        <strong>&#958;<sup>{expr.p || 'p'}</sup></strong> +{' '}\n                        <strong>{expr.b || 'b'}</strong>\n                    </>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={expr.a} onChange={this.onExprChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(expr.a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>p</strong> =\n                        </span>\n\n                        <InputText value={expr.p} onChange={this.onExprChange('p')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(expr.p)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>b</strong> =\n                        </span>\n\n                        <InputText value={expr.b} onChange={this.onExprChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(expr.b)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { e, p, expr } = this.state;\n\n        const n: { value: number, p: number }[] = [];\n        for (let i = 0; i < 4; ++i) {\n            n.push({\n                value: +expr.a * (+e[i]) ** +expr.p + +expr.b,\n                p: +p[i]\n            });\n        }\n\n        n.sort((a, b) => a.value - b.value);\n        const reducedN = n.reduce((a: { value: number, p: number }[], b) => {\n            const ret = a.map(a => a.value === b.value ? { value: a.value, p: a.p + b.p } : a);\n\n            if (isEqual(a, ret)) {\n                ret.push(b);\n            }\n\n            return ret;\n        }, []);\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#951;</strong> = <strong>{expr.a} &#8901; &#958;<sup>{expr.p}</sup> + {expr.b}</strong>\n                    </span>\n\n                    {reducedN.map((v, i) => (\n                        <React.Fragment key={'v' + v.value}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText readOnly value={v.value} />\n                        </React.Fragment>\n                    ))}\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>P</strong>\n                    </span>\n\n                    {reducedN.map((v, i) => (\n                        <React.Fragment key={'p' + v.value}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText readOnly value={v.p} />\n                        </React.Fragment>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\n\ninterface Task512State {\n\n    a: [string, string];\n    b: [string, string];\n}\n\nexport class Task512 extends Task<{}, Task512State> {\n\n    state: Task512State = {\n        a: ['', ''],\n        b: ['', ''],\n    };\n\n    private static checkArray(array: [string, string]) {\n        return array.filter(verifyNumber).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { a, b } = this.state;\n\n        return Task512.checkArray(a) && Task512.checkArray(b);\n    }\n\n    private onParamChange(param: 'a' | 'b', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const params = [...this.state[param]];\n\n            params[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [param]: params });\n        };\n    }\n\n    protected renderParameters() {\n        const { a, b } = this.state;\n\n        return (\n            <>\n                <Fieldset legend={\n                    <><strong>&#958;</strong> ~ <strong>U<sub>{a[0] || 'a'},{b[0] || 'b'}</sub></strong></>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={a[0]} onChange={this.onParamChange('a', 0)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a[0])} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>b</strong> =\n                        </span>\n\n                        <InputText value={b[0]} onChange={this.onParamChange('b', 0)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b[0])} />\n                        </span>\n                    </div>\n                </Fieldset>\n\n                <Fieldset legend={\n                    <><strong>&#951;</strong> ~ <strong>U<sub>{a[1] || 'a'},{b[1] || 'b'}</sub></strong></>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={a[1]} onChange={this.onParamChange('a', 1)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a[1])} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>b</strong> =\n                        </span>\n\n                        <InputText value={b[1]} onChange={this.onParamChange('b', 1)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b[1])} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { a, b } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#952;<sub>0</sub></strong> =\n                    </span>\n\n                    <InputText readOnly value={`${+b[1] - +a[1]} / ${+b[0] - +a[0]}`} />\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#952;<sub>1</sub></strong> =\n                    </span>\n\n                    <InputText value={`${+a[0] * +a[1] - +a[0] * +b[1] + +a[1] * (+b[0] - +a[0])} / ${+b[0] - +a[0]}`}\n                               readOnly />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\n\ninterface Task522State {\n\n    e: [string, string];\n    a: string;\n    b: string;\n}\n\nexport class Task522 extends Task<{}, Task522State> {\n\n    state: Task522State = { e: ['', ''], a: '', b: '' };\n\n    private static checkArray(array: [string, string]) {\n        return array.filter(verifyNumber).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { e, a, b } = this.state;\n\n        return Task522.checkArray(e) && verifyNumber(a) && verifyNumber(b);\n    }\n\n    private onEChange(i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const params = [...this.state.e] as [string, string];\n\n            params[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, e: params });\n        };\n    }\n\n    private onParamChange(param: 'a' | 'b') {\n        return (e: React.FormEvent<HTMLInputElement>) => this.setState({\n            ...this.state,\n\n            [param]: e.currentTarget.value\n        });\n    }\n\n    protected renderParameters() {\n        const { e, a, b } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#917;&#958;<sub>1</sub></strong> =\n                    </span>\n\n                    <InputText value={e[0]} onChange={this.onEChange(0)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(e[0])} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#917;&#958;<sub>2</sub></strong> =\n                    </span>\n\n                    <InputText value={e[1]} onChange={this.onEChange(1)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(e[1])} />\n                    </span>\n                </div>\n\n                <Fieldset legend={\n                    <>Найти <strong>&#917;({a || 'a'}&#958;<sub>1</sub> + {b || 'b'}&#958;<sub>2</sub>)</strong></>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={a} onChange={this.onParamChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>b</strong> =\n                        </span>\n\n                        <InputText value={b} onChange={this.onParamChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { e, a, b } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#917;({a}&#958;<sub>1</sub> + {b}&#958;<sub>2</sub>)</strong> =\n                    </span>\n\n                    <InputText readOnly value={+a * +e[0] + +b * +e[1]} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#917;(&#958;<sub>1</sub>&#958;<sub>2</sub>)</strong> =\n                    </span>\n\n                    <InputText value={+e[0] * +e[1]} readOnly />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\n\ninterface Task523State {\n\n    d: [string, string];\n    a: string;\n    b: string;\n    c: string;\n}\n\nexport class Task523 extends Task<{}, Task523State> {\n\n    state: Task523State = { d: ['', ''], a: '', b: '', c: '' };\n\n    private static checkArray(array: [string, string]) {\n        return array.filter(verifyNumber).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { d, a, b, c } = this.state;\n\n        return Task523.checkArray(d) && verifyNumber(a) && verifyNumber(b) && verifyNumber(c);\n    }\n\n    private onDChange(i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const params = [...this.state.d] as [string, string];\n\n            params[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, d: params });\n        };\n    }\n\n    private onParamChange(param: 'a' | 'b' | 'c') {\n        return (e: React.FormEvent<HTMLInputElement>) => this.setState({\n            ...this.state,\n\n            [param]: e.currentTarget.value\n        });\n    }\n\n    protected renderParameters() {\n        const { d, a, b, c } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>D&#958;<sub>1</sub></strong> =\n                    </span>\n\n                    <InputText value={d[0]} onChange={this.onDChange(0)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(d[0])} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>D&#958;<sub>2</sub></strong> =\n                    </span>\n\n                    <InputText value={d[1]} onChange={this.onDChange(1)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(d[1])} />\n                    </span>\n                </div>\n\n                <Fieldset legend={\n                    <>\n                        Вычислить{' '}\n                        <strong>D({a || 'a'}&#958;<sub>1</sub> + {b || 'b'}&#958;<sub>2</sub> + {c || 'c'})</strong>\n                    </>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={a} onChange={this.onParamChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>b</strong> =\n                        </span>\n\n                        <InputText value={b} onChange={this.onParamChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>c</strong> =\n                        </span>\n\n                        <InputText value={c} onChange={this.onParamChange('c')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(c)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { d, a, b, c } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>D({a}&#958;<sub>1</sub> + {b}&#958;<sub>2</sub> + {c})</strong> =\n                    </span>\n\n                    <InputText readOnly value={(+a) ** 2 * +d[0] + (+b) ** 2 * +d[1]} />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Fieldset } from 'primereact/fieldset';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\n\ninterface Task521State {\n\n    p: string;\n    a: string;\n    b: string;\n}\n\nexport class Task521 extends Task<{}, Task521State> {\n\n    state: Task521State = { p: '', a: '', b: '' };\n\n    protected checkParameters(): boolean {\n        const { p, a, b } = this.state;\n\n        return verifyNumber(p) && verifyNumber(a) && verifyNumber(b);\n    }\n\n    private onExprChange(param: 'p' | 'a' | 'b') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                [param]: e.currentTarget.value.trim()\n            });\n        };\n    }\n\n    protected renderParameters() {\n        const { p, a, b } = this.state;\n\n        return (\n            <>\n                <Fieldset legend={\n                    <>\n                        <strong>f<sub>&#958;</sub></strong> = <strong>cx<sup>{p || 'p'}</sup></strong>,{' '}\n                        <strong>x &isin; [{a || 'a'}, {b || 'b'}]</strong>\n                    </>\n                }>\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>p</strong> =\n                        </span>\n\n                        <InputText value={p} onChange={this.onExprChange('p')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(p)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup half-margin-bottom\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={a} onChange={this.onExprChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(a)} />\n                        </span>\n                    </div>\n\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>b</strong> =\n                        </span>\n\n                        <InputText value={b} onChange={this.onExprChange('b')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(b)} />\n                        </span>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { p, a, b } = this.state;\n\n        const c = `${+p + 1} / ${(+b) ** (+p + 1) - (+a) ** (+p + 1)}`;\n        const e = `${c} / ${+p + 2} * ${(+b) ** (+p + 2) - (+a) ** (+p + 2)}`;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>c</strong> =\n                    </span>\n\n                    <InputText readOnly value={c} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#917;&#958;</strong> =\n                    </span>\n\n                    <InputText readOnly value={e} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>D&#958;</strong> =\n                    </span>\n\n                    <InputText readOnly value={`${c} / ${+p + 3} * ${(+b) ** (+p + 3) - (+a) ** (+p + 3)} - (${e})^2`} />\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task511 } from '../../tasks/Task511/Task511';\nimport { Task512 } from '../../tasks/Task512/Task512';\nimport { Task522 } from '../../tasks/Task522/Task522';\nimport { Task523 } from '../../tasks/Task523/Task523';\nimport { Task521 } from '../../tasks/Task521/Task521';\n\nexport class Week5 extends Week {\n\n    weekName = 'Неделя 5. Числовые характеристики, сходимость';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1. Задача 1\"><Task511 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 1. Задача 2\"><Task512 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 1\"><Task521 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task522 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 3\"><Task523 /></AccordionTab>\n            </Accordion>\n        );\n    }\n}\n","import React from 'react';\nimport { Dropdown } from 'primereact/dropdown';\nimport { SelectItem } from 'primereact/api';\n\nimport { DistributionType } from '../../utils/distribution';\n\nexport interface InputDistributionTypeProps {\n\n    value?: DistributionType;\n    exclude: DistributionType[];\n\n    onChange(value?: DistributionType): void;\n}\n\nexport class InputDistributionType extends React.Component<InputDistributionTypeProps> {\n\n    static defaultProps: InputDistributionTypeProps = { exclude: [], onChange() {} };\n\n    private static selectItems: SelectItem[] = [\n        { label: 'Бернулли', value: DistributionType.BERNOULLI },\n        { label: 'Биномиальное', value: DistributionType.BINOMIAL },\n        { label: 'Геометрическое', value: DistributionType.GEOMETRIC },\n        { label: 'Пуассона', value: DistributionType.POISSON },\n        { label: 'Равномерное', value: DistributionType.UNIFORM },\n        { label: 'Показательное', value: DistributionType.EXPONENTIAL },\n        { label: 'Нормальное', value: DistributionType.NORMAL }\n    ];\n\n    private static mnemonics = new Map<DistributionType, [string, string]>([\n        [DistributionType.BERNOULLI, ['B', 'p']],\n        [DistributionType.BINOMIAL, ['Bin', 'n,p']],\n        [DistributionType.GEOMETRIC, ['G', 'p']],\n        [DistributionType.POISSON, ['\\u03A0', '\\u03BB']],\n        [DistributionType.UNIFORM, ['U', 'a,b']],\n        [DistributionType.EXPONENTIAL, ['Exp', '\\u03BB']],\n        [DistributionType.NORMAL, ['N', 'a,\\u03C3\\u00B2']],\n    ]);\n\n    private static dropdownTemplate(option: SelectItem): React.ReactNode {\n        const mnemonic = InputDistributionType.mnemonics.get(option.value)!;\n\n        return (<>{option.label}&nbsp;(<strong>{mnemonic[0]}<sub>{mnemonic[1]}</sub></strong>)</>);\n    }\n\n    render() {\n        const { exclude } = this.props;\n\n        return (\n            <Dropdown itemTemplate={InputDistributionType.dropdownTemplate} value={this.props.value}\n                      options={InputDistributionType.selectItems.filter(v => !exclude.includes(v.value))}\n                      onChange={(e: { value: DistributionType }) => this.props.onChange(e.value)} />\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport mapValues from 'lodash/mapValues';\nimport isEqual from 'lodash/isEqual';\n\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { filterObject } from '../../utils/filterObject';\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\nimport { InputDistributionType } from '../InputDistributionType/InputDistributionType';\nimport { verifyNumber } from '../../utils/verifyNumber';\nimport { verifyInteger } from '../../utils/verifyInteger';\n\nexport interface InputDistributionProps {\n\n    value?: Distribution;\n    normalSigmaSquare: boolean;\n    exclude: DistributionType[];\n\n    onChange(value?: Distribution): void;\n}\n\ninterface InputDistributionState {\n\n    distributionType?: DistributionType;\n    distributionParams: { [key: string]: string };\n}\n\nexport class InputDistribution extends React.Component<InputDistributionProps, InputDistributionState> {\n\n    static defaultProps: InputDistributionProps = {\n\n        normalSigmaSquare: true,\n        exclude: [],\n\n        onChange() {}\n    };\n\n    state: InputDistributionState = { distributionParams: {} };\n\n    componentDidUpdate(\n        prevProps: Readonly<InputDistributionProps>,\n        prevState: Readonly<InputDistributionState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(this.props.value, prevProps.value) && this.props.value) {\n            this.setState({\n                ...this.state,\n\n                distributionType: this.props.value.type,\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    ...mapValues(this.props.value.params, String)\n                }\n            });\n        }\n\n        if (!isEqual(this.state, prevState)) {\n            this.onDistributionChange();\n        }\n    }\n\n    private onDistributionTypeChange(distributionType: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onDistributionParamChange(param: string) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    [param]: e.currentTarget.value.trim()\n                }\n            });\n        };\n    }\n\n    private onDistributionChange() {\n        const { distributionType, distributionParams } = this.state;\n\n        const numericParams = mapValues(filterObject(distributionParams, verifyNumber), Number);\n        let newDistribution: Distribution | undefined;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                if (numericParams.p !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams.p }\n                    };\n                }\n                break;\n\n            case DistributionType.BINOMIAL:\n                if (numericParams.n !== undefined && numericParams.p !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            n: numericParams.n,\n                            p: numericParams.p\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.GEOMETRIC:\n                if (numericParams.p !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams.p }\n                    };\n                }\n                break;\n\n            case DistributionType.POISSON:\n                if (numericParams.l !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams.l }\n                    };\n                }\n                break;\n\n            case DistributionType.UNIFORM:\n                if (numericParams.a !== undefined && numericParams.b !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams.a,\n                            b: numericParams.b\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                if (numericParams.l !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams.l }\n                    };\n                }\n                break;\n\n            case DistributionType.NORMAL:\n                if (numericParams.a !== undefined && numericParams.d !== undefined) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams.a,\n                            d: numericParams.d\n                        }\n                    };\n                }\n                break;\n        }\n\n        this.props.onChange(newDistribution);\n    }\n\n    render() {\n        const { normalSigmaSquare, exclude } = this.props;\n        const { distributionType, distributionParams } = this.state;\n\n        const params: { name: string, field: string, integer?: true }[] = [];\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                params.push({ name: 'p', field: 'p' });\n                break;\n\n            case DistributionType.BINOMIAL:\n                params.push({ name: 'n', field: 'n', integer: true });\n                params.push({ name: 'p', field: 'p' });\n                break;\n\n            case DistributionType.GEOMETRIC:\n                params.push({ name: 'p', field: 'p' });\n                break;\n\n            case DistributionType.POISSON:\n                params.push({ name: '\\u03BB', field: 'l' });\n                break;\n\n            case DistributionType.UNIFORM:\n                params.push({ name: 'a', field: 'a' });\n                params.push({ name: 'b', field: 'b' });\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                params.push({ name: '\\u03BB', field: 'l' });\n                break;\n\n            case DistributionType.NORMAL:\n                params.push({ name: 'a', field: 'a' });\n                params.push({ name: '\\u03C3' + (normalSigmaSquare ? '\\u00B2' : ''), field: 'd' });\n                break;\n        }\n\n        const paramsComponents: JSX.Element[] = params\n            .map(param => {\n                const value = distributionParams[param.field] ?? '';\n\n                return (\n                    <div key={param.name} className=\"p-inputgroup half-margin-bottom-not-last\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>{param.name}</strong> =\n                        </span>\n\n                        <InputText value={value} onChange={this.onDistributionParamChange(param.field)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={param.integer ? verifyInteger(value) : verifyNumber(value)} />\n                        </span>\n                    </div>\n                );\n            });\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom-not-last\">\n                    <span className=\"p-inputgroup-addon\">\n                        Распределение:\n                    </span>\n\n                    <InputDistributionType exclude={exclude} value={this.state.distributionType}\n                                           onChange={this.onDistributionTypeChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={!!this.state.distributionType} />\n                    </span>\n                </div>\n\n                {paramsComponents}\n            </>\n        );\n    }\n}\n","import forEach from 'lodash/forEach'\n\nexport function filterObject<V = any, K extends keyof any = keyof {}>(object: Record<K, V>, predicate: (v: V, k: K) => boolean) {\n    const ret: Record<K, V> = {} as Record<K, V>;\n\n    forEach(object, (v, k) => {\n        if (predicate(v, k as K)) {\n            ret[k as K] = v;\n        }\n    });\n\n    return ret;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../../utils/distribution';\nimport { InputDistribution } from '../../../components/InputDistribution/InputDistribution';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { verifyInteger } from '../../../utils/verifyInteger';\n\nimport pythonTab from './pythonTab.png';\n\ninterface Task61State {\n\n    n: string;\n    distribution?: Distribution;\n    randomSeed: string;\n    count: string;\n}\n\nexport class Task61 extends Task<{}, Task61State> {\n\n    state: Task61State = { n: '', randomSeed: '', count: '5' };\n\n    private onNChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            n: e.currentTarget.value.trim()\n        });\n    }\n\n    private onDistributionChange(distribution?: Distribution) {\n        this.setState({ ...this.state, distribution });\n    }\n\n    private onRandomSeedChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            randomSeed: e.currentTarget.value.trim()\n        });\n    }\n\n    private onCountChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            count: e.currentTarget.value.trim()\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { n, distribution, randomSeed, count } = this.state;\n\n        return verifyNumber(n) && distribution !== undefined && verifyNumber(randomSeed) && verifyInteger(count);\n    }\n\n    protected renderParameters() {\n        const { n, distribution, randomSeed, count } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Объём <strong>n</strong> =\n                    </span>\n\n                    <InputText value={n} onChange={this.onNChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(n)} />\n                    </span>\n                </div>\n\n                <InputDistribution normalSigmaSquare={false} value={distribution}\n                                   onChange={this.onDistributionChange.bind(this)} />\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>random seed</strong> =\n                    </span>\n\n                    <InputText value={randomSeed} onChange={this.onRandomSeedChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(randomSeed)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Количество первых и последних элементов:\n                    </span>\n\n                    <InputText value={count} onChange={this.onCountChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyInteger(count)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, distribution, randomSeed, count } = this.state;\n\n        if (distribution === undefined) {\n            return;\n        }\n\n        let code = `\nimport numpy as np\nnp.random.seed(${randomSeed})\n`;\n\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                code += `sample = np.random.binomial(1, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.BINOMIAL:\n                code += `sample = np.random.binomial(${distribution.params.n}, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.GEOMETRIC:\n                code += `sample = np.random.geometric(${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.POISSON:\n                code += `sample = np.random.poisson(${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.UNIFORM:\n                code += `sample = np.random.uniform(${distribution.params.a}, ${distribution.params.b}, ${n})`;\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                code += `sample = np.random.exponential(1 / ${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.NORMAL:\n                code += `sample = np.random.normal(${distribution.params.a}, ${distribution.params.d}, ${n})`;\n                break;\n        }\n\n        code += `\nprint(\",\".join([str(round(sample[i], 2)) for i in range(${count})]))\nprint(\",\".join([str(round(sample[${+n - +count} + i], 2)) for i in range(${count})]))\nprint(sum(sample)/len(sample))\n`;\n\n        return (\n            <>\n                {+count === 3 && (\n                    <>\n                        <strong>Внимание!</strong>{' '}\n\n                        Убедитесь, что вы открыли в курсе вкладку <strong>Упражнение 6.1 (Python)</strong>,{' '}\n                        а не Упражнение 6.1 (<strong>Excel</strong>). Эта вкладка <strong>предпоследняя</strong>{' '}\n                        в разделе!\n                        <br />\n\n                        <img src={pythonTab} alt=\"вкладка Python\" />\n                        <hr />\n                    </>\n                )}\n\n                <div className=\"margin-bottom\">\n                    Выполните следущий код в Python-интерпретаторе (например, на сайте <a href=\"https://repl.it\" target=\"_blank\" rel=\"noopener noreferrer\">repl.it</a>):\n                </div>\n\n                <code className=\"margin-bottom\">{code.trim()}</code>\n\n                И скопируйте выведенные на экран строки в поля для ответов.\n            </>\n        );\n    }\n}\n","import mean from 'lodash/mean';\n\nexport function sampleVariance(sample: number[], expected?: number) {\n    const e = expected ? expected : mean(sample);\n\n    return mean(sample.map(v => (v - e) ** 2));\n}\n","\nexport function median(sample: number[]) {\n    return sample.length % 2 === 0\n        ? (sample[sample.length / 2 - 1] + sample[sample.length / 2]) / 2\n        : sample[(sample.length - 1) / 2];\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport maxBy from 'lodash/maxBy';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../../utils/sampleVariance';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { median } from '../../../utils/median';\n\ninterface Task621State {\n\n    alchemists: string;\n}\n\ninterface CountObject {\n\n    value: number;\n    count: number;\n}\n\nexport class Task621 extends Task<{}, Task621State> {\n\n    private alchemistsRegexp = /^( *\\()?( *\\d+( *,)?)* *\\d+? *(\\) *)?$/;\n\n    state: Task621State = { alchemists: '' };\n\n    private onAlchemistsChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            alchemists: e.currentTarget.value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        return this.alchemistsRegexp.test(this.state.alchemists);\n    }\n\n    protected renderParameters() {\n        const { alchemists } = this.state;\n\n        return (\n            <div className=\"p-inputgroup\">\n                <span className=\"p-inputgroup-addon\">\n                    Выборка:\n                </span>\n\n                <InputText placeholder=\"(a, b, c...)\" value={alchemists}\n                           onChange={this.onAlchemistsChange.bind(this)} />\n\n                <span className=\"p-inputgroup-addon\">\n                    <ValidationIcon valid={this.alchemistsRegexp.test(alchemists)} />\n                </span>\n            </div>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { alchemists } = this.state;\n\n        if (!alchemists) {\n            return;\n        }\n\n        const sample = alchemists.replace(/[()]/g, '').trim()\n            .split(/[,\\s]+/).map(Number).sort((a, b) => a - b);\n\n        const counts: CountObject[] = [1, 2, 3, 4, 5, 6]\n            .map(i => ({value: i, count: sample.filter(v => v === i).length}));\n\n        const e = mean(sample);\n        const d = sampleVariance(sample, e);\n        const m = median(sample);\n\n        const maxCount = maxBy(counts, v => v.count)?.count;\n        const mode = counts.filter(v => v.count === maxCount)\n            .map(v => v.value).sort((a, b) => a - b)[0];\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                    {[(v: CountObject) => v.value < 4, (v: CountObject) => v.value > 3].map(f => (\n                        <tr key={String(f)}>\n                            {counts.filter(f).map(v => (\n                                <td key={v.value}>\n                                    <strong>P(&#958;<sup>*</sup> = {v.value})</strong> ={' '}\n                                    <InputText readOnly value={v.count === 0 ? '0' : `${v.count} / ${sample.length}`} />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                Математическое ожидание: <InputText readOnly value={normalizeNumber(e)} /><br />\n                Дисперсия: <InputText readOnly value={normalizeNumber(d)} /><br />\n                Среднеквадратическое отклонение: <InputText readOnly value={normalizeNumber(Math.sqrt(d))} /><br />\n                Медиана: <InputText readOnly value={m} /><br />\n                Мода: <InputText readOnly value={mode} /><br />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport { InputText } from 'primereact/inputtext';\n\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface FetchingInputSampleProps {\n\n    onChange(sample?: number[]): void;\n}\n\ninterface FetchingInputSampleState {\n\n    url: string;\n    loading: boolean;\n    sample?: number[];\n}\n\nexport class FetchingInputSample extends React.Component<FetchingInputSampleProps, FetchingInputSampleState> {\n\n    private previousFetch: number = Date.now();\n\n    private urlRegex = /^[^:/?#]+:\\/\\/[^/?#]*[^?#]*(\\?([^#]*))?(#(.*))?$/;\n    private proxyUrl = 'https://proxy.byprogminer.ru/?';\n\n    state: FetchingInputSampleState = {\n        url: '',\n        loading: false\n    };\n\n    componentDidUpdate(\n        prevProps: Readonly<FetchingInputSampleProps>,\n        prevState: Readonly<FetchingInputSampleState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, ['loading', 'sample']), omit(prevState, ['loading', 'sample']))) {\n            this.reload();\n        }\n    }\n\n    private reload() {\n        const { url } = this.state;\n\n        (async () => {\n            try {\n                if (this.urlRegex.test(url)) {\n                    await new Promise(resolve =>\n                        setTimeout(resolve, Math.max(0, this.previousFetch + 100 - Date.now())));\n\n                    this.previousFetch = Date.now();\n                    const response = await fetch(this.proxyUrl + url);\n\n                    if (response.ok) {\n                        const sampleText = await response.text();\n                        const sample = sampleText.split('\\n')\n                            .map(s => s.trim()).filter(Boolean).map(Number)\n                            .filter(v => !isNaN(v)).sort((a, b) => a - b);\n\n                        if (sample.length > 0) {\n                            if (this.state.url === url) {\n                                this.setState({ ...this.state, loading: false, sample });\n                                this.props.onChange(sample);\n                            }\n\n                            return;\n                        }\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n\n            this.setState({ ...this.state, loading: false, sample: undefined });\n            this.props.onChange(undefined);\n        })();\n    }\n\n    private onUrlChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            url: e.currentTarget.value.trim(),\n            loading: true\n        });\n    }\n\n    private onIconClick() {\n        this.setState({ ...this.state, loading: true });\n        this.reload();\n    }\n\n    render() {\n        const { url, loading, sample } = this.state;\n\n        return (\n            <>\n                <InputText placeholder=\"URL-адрес выборки\" value={url} onChange={this.onUrlChange.bind(this)} />\n\n                <span className=\"p-inputgroup-addon\">\n                    <ValidationIcon clickable={this.urlRegex.test(url)} valid={loading ? undefined : !!sample}\n                                    onClick={this.onIconClick.bind(this)} />\n                </span>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../../utils/distribution';\nimport { InputDistribution } from '../../../components/InputDistribution/InputDistribution';\nimport { FetchingInputSample } from '../../../components/FetchingInputSample/FetchingInputSample';\nimport { sampleVariance } from '../../../utils/sampleVariance';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\n\ninterface Task622State {\n\n    sample10?: number[];\n    sample10000?: number[];\n    distribution?: Distribution;\n}\n\nexport class Task622 extends Task<{}, Task622State> {\n\n    state: Task622State = {};\n\n    private onSample10Change(sample10?: number[]) {\n        this.setState({...this.state, sample10});\n    }\n\n    private onSample10000Change(sample10000?: number[]) {\n        this.setState({...this.state, sample10000});\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { sample10, sample10000, distribution } = this.state;\n\n        return !!sample10 && !!sample10000 && !!distribution;\n    }\n\n    protected renderParameters() {\n        const { distribution } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка объёма <strong>n = 10</strong>:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSample10Change.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка объёма <strong>n = 10000</strong>:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSample10000Change.bind(this)} />\n                </div>\n\n                <InputDistribution value={distribution} onChange={this.onDistributionChange.bind(this)} />\n            </>\n        );\n    }\n\n    private static output(property: string, v: number, p: number, trueP: number, d: number, trueD: number): React.ReactNode {\n        return (\n            <>\n                Для выборки объёма <strong>{v}</strong>:<br />\n                Оценка <strong>{property}</strong>: <InputText readOnly value={normalizeNumber(p)} /><br />\n                Погрешность оценки: <InputText readOnly value={normalizeNumber(Math.abs(p - trueP))} /><br />\n                Оценка дисперсии: <InputText readOnly value={normalizeNumber(d)} /><br />\n                Погрешность оценки дисперсии: <InputText readOnly value={normalizeNumber(Math.abs(d - trueD))} />\n            </>\n        )\n    }\n\n    protected async renderAnswer() {\n        const { sample10, sample10000, distribution } = this.state;\n\n        if (!sample10 || !sample10000 || !distribution) {\n            return;\n        }\n\n        const e10 = mean(sample10);\n        const e10000 = mean(sample10000);\n        const d10 = sampleVariance(sample10, e10);\n        const d10000 = sampleVariance(sample10000, e10000);\n\n        let output: (v: number, e: number, d: number) => React.ReactNode;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e,\n                    distribution.params.p,\n                    d,\n                    distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.BINOMIAL:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e / distribution.params.n,\n                    distribution.params.p,\n                    d,\n                    distribution.params.n * distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    1 / e,\n                    distribution.params.p,\n                    d,\n                    (1 - distribution.params.p) / distribution.params.p ** 2\n                );\n                break;\n\n            case DistributionType.POISSON:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    e,\n                    distribution.params.l,\n                    d,\n                    distribution.params.l\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    2 * e - distribution.params.b,\n                    distribution.params.a,\n                    d,\n                    (distribution.params.b - distribution.params.a) ** 2 / 12\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    1 / e,\n                    distribution.params.l,\n                    d,\n                    1 / distribution.params.l ** 2\n                );\n                break;\n\n            case DistributionType.NORMAL:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    e,\n                    distribution.params.a,\n                    d,\n                    distribution.params.d\n                );\n                break;\n        }\n\n        return (\n            <>\n                {output(10, e10, d10)}\n\n                <hr />\n\n                {output(10000, e10000, d10000)}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task61 } from '../../tasks/Task61/Task61';\nimport { Task621 } from '../../tasks/Task621/Task621';\nimport { Task622 } from '../../tasks/Task622/Task622';\n\nexport class Week6 extends Week {\n\n    weekName = 'Неделя 6. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1 (Python)\"><Task61 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 1\"><Task621 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task622 /></AccordionTab>\n            </Accordion>\n        );\n    }\n}\n","\nexport function sampleQuantile(level: number, sample: number[]) {\n    const index = sample.length * level;\n\n    const integerIndex = Math.floor(index);\n\n    if (!Number.isInteger(index)) {\n        return sample[integerIndex];\n    } else {\n        return (sample[integerIndex - 1] + sample[integerIndex]) / 2;\n    }\n}\n","import React from 'react';\nimport { SelectItem } from 'primereact/api';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../../utils/sampleVariance';\nimport { median } from '../../../utils/median';\nimport { sampleQuantile } from '../../../utils/sampleQuantile';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { verifyInteger } from '../../../utils/verifyInteger';\n\nconst citySelectItems: SelectItem[] = [\n    { label: 'Алтайский край', value: 0 },\n    { label: 'Амурская область', value: 1 },\n    { label: 'Архангельская область', value: 2 },\n    { label: 'Астраханская область', value: 3 },\n    { label: 'Белгородская область', value: 4 },\n    { label: 'Брянская область', value: 5 },\n    { label: 'Владимирская область', value: 6 },\n    { label: 'Волгоградская область', value: 7 },\n    { label: 'Вологодская область', value: 8 },\n    { label: 'Воронежская область', value: 9 },\n    { label: 'г. Москва', value: 10 },\n    { label: 'г. Санкт-Петербург', value: 11 },\n    { label: 'г. Севастополь', value: 12 },\n    { label: 'Еврейская АО', value: 13 },\n    { label: 'Забайкальский край', value: 14 },\n    { label: 'Ивановская область', value: 15 },\n    { label: 'Иркутская область', value: 16 },\n    { label: 'Кабардино-Балкарская Республика', value: 17 },\n    { label: 'Калининградская область', value: 18 },\n    { label: 'Калужская область', value: 19 },\n    { label: 'Камчатский край', value: 20 },\n    { label: 'Карачаево-Черкесская Республика', value: 21 },\n    { label: 'Кемеровская область', value: 22 },\n    { label: 'Кировская область', value: 23 },\n    { label: 'Костромская область', value: 24 },\n    { label: 'Краснодарский край', value: 25 },\n    { label: 'Красноярский край', value: 26 },\n    { label: 'Курганская область', value: 27 },\n    { label: 'Курская область', value: 28 },\n    { label: 'Ленинградская область', value: 29 },\n    { label: 'Липецкая область', value: 30 },\n    { label: 'Магаданская обл.', value: 31 },\n    { label: 'Московская обл.', value: 32 },\n    { label: 'Мурманская обл.', value: 33 },\n    { label: 'Ненецкий АО', value: 34 },\n    { label: 'Нижегородская область', value: 35 },\n    { label: 'Новгородская область', value: 36 },\n    { label: 'Новосибирская область', value: 37 },\n    { label: 'Омская область', value: 38 },\n    { label: 'Оренбургская область', value: 39 },\n    { label: 'Орловская область', value: 40 },\n    { label: 'Пензенская область', value: 41 },\n    { label: 'Пермский край', value: 42 },\n    { label: 'Приморский край', value: 43 },\n    { label: 'Псковская область', value: 44 },\n    { label: 'Республика Адыгея', value: 45 },\n    { label: 'Республика Алтай', value: 46 },\n    { label: 'Республика Башкортостан', value: 47 },\n    { label: 'Республика Бурятия', value: 48 },\n    { label: 'Республика Дагестан', value: 49 },\n    { label: 'Республика Ингушетия', value: 50 },\n    { label: 'Республика Калмыкия', value: 51 },\n    { label: 'Республика Карелия', value: 52 },\n    { label: 'Республика Коми', value: 53 },\n    { label: 'Республика Крым', value: 54 },\n    { label: 'Республика Марий Эл', value: 55 },\n    { label: 'Республика Мордовия', value: 56 },\n    { label: 'Республика Саха (Якутия)', value: 57 },\n    { label: 'Республика Северная Осетия - Алания', value: 58 },\n    { label: 'Республика Татарстан', value: 59 },\n    { label: 'Республика Тыва', value: 60 },\n    { label: 'Республика Хакасия', value: 61 },\n    { label: 'Ростовская область', value: 62 },\n    { label: 'Рязанская область', value: 63 },\n    { label: 'Самарская область', value: 64 },\n    { label: 'Саратовская область', value: 65 },\n    { label: 'Сахалинская обл.', value: 66 },\n    { label: 'Свердловская область', value: 67 },\n    { label: 'Смоленская область', value: 68 },\n    { label: 'Ставропольский край', value: 69 },\n    { label: 'Тамбовская область', value: 70 },\n    { label: 'Тверская область', value: 71 },\n    { label: 'Томская область', value: 72 },\n    { label: 'Тульская область', value: 73 },\n    { label: 'Тюменская обл.', value: 74 },\n    { label: 'Удмуртская Республика', value: 75 },\n    { label: 'Ульяновская область', value: 76 },\n    { label: 'Хабаровский край', value: 77 },\n    { label: 'Ханты-Мансийский АО (Югра)', value: 78 },\n    { label: 'Челябинская область', value: 79 },\n    { label: 'Чеченская Республика', value: 80 },\n    { label: 'Чувашская Республика', value: 81 },\n    { label: 'Чукотский АО', value: 82 },\n    { label: 'Ямало-Ненецкий АО', value: 83 },\n    { label: 'Ярославская область', value: 84 },\n];\n\nconst avgSalary: number[] = [25960, 43156, 47526, 32166, 31163, 27403, 31647, 30097, 36081, 31286, 78946, 58310,\n    31008, 39797, 40728, 26053, 42921, 25318, 32473, 38005, 71553, 25699, 37857, 27580, 27948, 33258, 44692, 27887,\n    30125, 42434, 30775, 101662, 50135, 56005, 77277, 32973, 30820, 36048, 32013, 29892, 26834, 30112, 34809, 42026,\n    27339, 27455, 37764, 33137, 37867, 24550, 25663, 25719, 39755, 48316, 28400, 28232, 26999, 65881, 26108, 35722,\n    35619, 37949, 30647, 31192, 33086, 26555, 73261, 37605, 29566, 28256, 26754, 30764, 39707, 33933, 61937, 31990,\n    27927, 46583, 62555, 34944, 26108, 27028, 96930, 86560, 33882];\n\ninterface Task7State {\n\n    cities: number[];\n    sampleIndices: [string, string, string];\n    intervalIndices: [string, string, string];\n}\n\nexport class Task7 extends Task<{}, Task7State> {\n\n    state: Task7State = {\n        cities: [],\n        sampleIndices: ['', '', ''],\n        intervalIndices: ['', '', '']\n    };\n\n    private static checkIndices(indices: [string, string, string], max: number = 10) {\n        return indices.filter(verifyInteger).map(Number).filter(v => v > 0 && v <= max).length === 3;\n    }\n\n    protected checkParameters(): boolean {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n\n        return Task7.checkIndices(sampleIndices, avgSalary.length - cities.length) &&\n            Task7.checkIndices(intervalIndices);\n    }\n\n    private onCitiesChange(e: { value: number[] }) {\n        this.setState({\n            ...this.state,\n\n            cities: e.value\n        });\n    }\n\n    private onIndexChange(name: 'sampleIndices' | 'intervalIndices', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const indices = [...this.state[name]];\n\n            indices[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [name]: indices });\n        }\n    }\n\n    protected renderParameters() {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выберите города, <strong>не</strong> попавшие в выборку:\n                    </span>\n\n                    <MultiSelect filter value={cities} options={citySelectItems} style={{ verticalAlign: 'middle' }}\n                                 onChange={this.onCitiesChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Введите номера необходимых элементов выборки (<strong>X</strong>):\n                    </span>\n\n                    {[0, 1, 2].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={sampleIndices[i]}\n                                       onChange={this.onIndexChange('sampleIndices', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task7.checkIndices(sampleIndices, avgSalary.length - cities.length)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        Введите номера необходимых интервалов (<strong>A</strong>):&nbsp;\n                    </span>\n\n                    {[0, 1, 2].map(i => (\n                        <React.Fragment key={i}>\n                            {i > 0 && (\n                                <span className=\"p-inputgroup-addon\" style={{ minWidth: 0 }} />\n                            )}\n\n                            <InputText value={intervalIndices[i]}\n                                       onChange={this.onIndexChange('intervalIndices', i)} />\n                        </React.Fragment>\n                    ))}\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={Task7.checkIndices(intervalIndices)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer(): Promise<React.ReactNode> {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n        const sample = avgSalary.filter((_, i) => !cities.includes(i)).sort((a, b) => a - b);\n\n        const numericSampleIndices = sampleIndices.map(v => +v - 1);\n        const numericIntervalIndices = intervalIndices.map(v => +v - 1);\n\n        const a: number[] = [];\n        const intervalLength = (sample[sample.length - 1] - sample[0]) / 10;\n        for (let i = 0; i < 10; ++i) {\n            const intervalOffset = sample[0] + i * intervalLength;\n\n            a[i] = sample.filter((v) => v >= intervalOffset && v < intervalOffset + intervalLength).length;\n        }\n\n        const e = mean(sample);\n        const v = sampleVariance(sample, e);\n        const fixedV = v * sample.length / (sample.length - 1);\n        const m = median(sample);\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericSampleIndices.map(v => (\n                                <td key={v}>\n                                    <strong>X<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={sample[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericIntervalIndices.map(v => (\n                                <td key={v}>\n                                    <strong>A<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={a[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                Выборочное среднее:&nbsp;\n                <InputText readOnly value={normalizeNumber(e)} />\n                <br />\n\n                Смещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={normalizeNumber(v)} />\n                <br />\n\n                Несмещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={normalizeNumber(fixedV)} />\n                <br />\n\n                Выборочная медиана:&nbsp;\n                <InputText readOnly value={m} />\n                <br />\n\n                Квантиль уровня <strong>0.25</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.25, sample)} />\n                <br />\n\n                Квантиль уровня <strong>0.75</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.75, sample)} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task7 } from '../../tasks/Task7/Task7';\n\nexport class Week7 extends Week {\n\n    weekName = 'Неделя 7. Выборочные характеристики';\n\n    protected renderContent() {\n        return (<Task7 />);\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { DistributionType } from '../../../utils/distribution';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { FetchingInputSample } from '../../../components/FetchingInputSample/FetchingInputSample';\nimport { InputDistributionType } from '../../../components/InputDistributionType/InputDistributionType';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { verifyInteger } from '../../../utils/verifyInteger';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { factorial } from '../../../utils/factorial';\nimport { erf } from '../../../utils/erf';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task8State {\n\n    sample?: number[];\n    distributionType?: DistributionType;\n    specificParameters: { [key: string]: string };\n}\n\nexport class Task8 extends Task<{}, Task8State> {\n\n    state: Task8State = { specificParameters: {} };\n\n    protected checkParameters(): boolean {\n        const { sample, distributionType, specificParameters } = this.state;\n\n        let specificParametersCheck: boolean = true;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersCheck = verifyInteger(specificParameters.m) && +specificParameters.m > 0 &&\n                    verifyInteger(specificParameters.k) && +specificParameters.k <= +specificParameters.m;\n                break;\n\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersCheck = verifyInteger(specificParameters.k) && +specificParameters.k > 0;\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersCheck = verifyNumber(specificParameters.a) && verifyNumber(specificParameters.b);\n                break;\n        }\n\n        return !!sample && !!distributionType && specificParametersCheck;\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onDistributionTypeChange(distributionType?: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onSpecificParameterChange(name: 'a' | 'b' | 'm' | 'k') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                specificParameters: {\n                    ...this.state.specificParameters,\n\n                    [name]: e.currentTarget.value.trim()\n                }\n            });\n        }\n    }\n\n    protected renderParameters() {\n        const { distributionType, specificParameters } = this.state;\n\n        let specificParametersOutput: React.ReactNode;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersOutput = (\n                    <>\n                        <Fieldset legend=\"Третье задание:\" className=\"half-margin-bottom\">\n                            <div className=\"p-inputgroup\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>m</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.m ?? ''}\n                                           onChange={this.onSpecificParameterChange('m')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyInteger(specificParameters.m) &&\n                                        +specificParameters.m > 0} />\n                                </span>\n                            </div>\n                        </Fieldset>\n\n                        <Fieldset legend=\"Четвёртое задание:\">\n                            <div className=\"p-inputgroup\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>k</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.k ?? ''}\n                                           onChange={this.onSpecificParameterChange('k')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyInteger(specificParameters.k) &&\n                                        +specificParameters.k <= +specificParameters.m} />\n                                </span>\n                            </div>\n                        </Fieldset>\n                    </>\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersOutput = (\n                    <Fieldset legend=\"Четвёртое задание:\">\n                        <div className=\"p-inputgroup\">\n                            <span className=\"p-inputgroup-addon\">\n                                <strong>k</strong> =\n                            </span>\n\n                            <InputText value={specificParameters.k ?? ''}\n                                       onChange={this.onSpecificParameterChange('k')} />\n\n                            <span className=\"p-inputgroup-addon\">\n                                <ValidationIcon valid={verifyInteger(specificParameters.k) &&\n                                    +specificParameters.k > 0} />\n                            </span>\n                        </div>\n                    </Fieldset>\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersOutput = (\n                        <Fieldset legend=\"Четвёртое задание:\">\n                            <div className=\"p-inputgroup half-margin-bottom\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>a</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.a ?? ''}\n                                           onChange={this.onSpecificParameterChange('a')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyNumber(specificParameters.a)} />\n                                </span>\n                            </div>\n\n                            <div className=\"p-inputgroup\">\n                                <span className=\"p-inputgroup-addon\">\n                                    <strong>b</strong> =\n                                </span>\n\n                                <InputText value={specificParameters.b ?? ''}\n                                           onChange={this.onSpecificParameterChange('b')} />\n\n                                <span className=\"p-inputgroup-addon\">\n                                    <ValidationIcon valid={verifyNumber(specificParameters.b)} />\n                                </span>\n                            </div>\n                        </Fieldset>\n                );\n                break;\n        }\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка для задания:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom-not-last\">\n                    <span className=\"p-inputgroup-addon\">\n                        Распределение:\n                    </span>\n\n                    <InputDistributionType exclude={[DistributionType.BERNOULLI]} value={distributionType}\n                                           onChange={this.onDistributionTypeChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={!!this.state.distributionType} />\n                    </span>\n                </div>\n\n                {specificParametersOutput}\n            </>\n        );\n    }\n\n    private renderBinomialAnswer(avg: number, variance: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const m = +specificParameters.m;\n        const k = +specificParameters.k;\n\n        const theta = avg / m;\n        const p = factorial(m) / (factorial(m - k) * factorial(k)) * theta ** k * (1 - theta) ** (m - k);\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(1 - variance / avg)} />\n                <br />\n\n                Оценка метода моментов <strong>m&#770;</strong>:&nbsp;\n                <InputText readOnly value={Math.round(avg ** 2 / (avg - variance))} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong> для&nbsp;\n                <strong>m = {m}</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Вероятность, что завтра опоздает ровно <strong>k = {k}</strong> поездов:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderGeometricAnswer(avg: number, sqAvg: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n\n        const theta = 1 / avg;\n        const p = (1 - theta) ** (k - 1) * theta;\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((-1 + Math.sqrt(1 + 8 * sqAvg)) / (2 * sqAvg))} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Вероятность, что музыкант убежит, если в него попало ровно <strong>k = {k}</strong> помидоров:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderPoissonAnswer(avg: number, sqAvg: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const p = Math.exp(-avg) * avg ** k / factorial(k);\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((-1 + Math.sqrt(1 + 4 * sqAvg)) / 2)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Вероятность, что в течение случайных пяти минут поступит <strong>k = {k}</strong> звонков:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderUniformAnswer(avg: number, variance: number): React.ReactNode {\n        const { sample, specificParameters } = this.state;\n\n        if (!sample) {\n            return;\n        }\n\n        const sqrt3Variance = Math.sqrt(3 * variance);\n        const b = sample[sample.length - 1];\n        const a = sample[0];\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg - sqrt3Variance)} />\n                <br />\n\n                Оценка метода моментов <strong>b&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg + sqrt3Variance)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>b</strong>:&nbsp;\n                <InputText readOnly value={b} />\n                <br />\n\n                Вероятность обрушения на участке от&nbsp;\n                <strong>a = {specificParameters.a}</strong> до&nbsp;\n                <strong>b = {specificParameters.b}</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((+specificParameters.b - +specificParameters.a) / (b - a))} />\n            </>\n        );\n    }\n\n    private renderExponentialAnswer(avg: number, sqAvg: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n\n        const theta = 1 / avg;\n        const p = 1 - Math.exp(-theta * k);\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(Math.sqrt(2 / sqAvg))} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(theta)} />\n                <br />\n\n                Вероятность, что при следующем звонке с оператором поговорят меньше <strong>k = {k}</strong> секунд:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    private renderNormalAnswer(avg: number, variance: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const p = (1 + erf((k - avg) / Math.sqrt(2 * variance))) / 2;\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;<sub>1</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Оценка метода моментов <strong>&#952;&#770;<sub>2</sub></strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(variance)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Вероятность, что в случайно купленной бутылке молока менее <strong>k = {k}</strong> миллилитров молока:&nbsp;\n                <InputText readOnly value={normalizeNumber(p)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, distributionType } = this.state;\n\n        if (!sample || !distributionType) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const sqAvg = mean(sample.map(x => x ** 2));\n        const sampleVariance = sqAvg - avg ** 2;\n\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                return this.renderBinomialAnswer(avg, sampleVariance);\n\n            case DistributionType.GEOMETRIC:\n                return this.renderGeometricAnswer(avg, sqAvg);\n\n            case DistributionType.POISSON:\n                return this.renderPoissonAnswer(avg, sqAvg);\n\n            case DistributionType.UNIFORM:\n                return this.renderUniformAnswer(avg, sampleVariance);\n\n            case DistributionType.EXPONENTIAL:\n                return this.renderExponentialAnswer(avg, sqAvg);\n\n            case DistributionType.NORMAL:\n                return this.renderNormalAnswer(avg, sampleVariance);\n        }\n    }\n}\n","\n// https://gist.github.com/kcrt/6210661\nexport function erf(x: number) {\n    // erf(x) = 2/sqrt(pi) * integrate(from=0, to=x, e^-(t^2) ) dt\n    // with using Taylor expansion,\n    //        = 2/sqrt(pi) * sigma(n=0 to +inf, ((-1)^n * x^(2n+1))/(n! * (2n+1)))\n    // calculating n=0 to 50 bellow (note that inside sigma equals x when n = 0, and 50 may be enough)\n\n    let m = 1.00;\n    let s = 1.00;\n    let sum = x;\n    for (let i = 1; i < 50; i++) {\n        m *= i;\n        s *= -1;\n        sum += (s * Math.pow(x, 2 * i + 1)) / (m * (2 * i + 1));\n    }\n\n    return 2 * sum / Math.sqrt(3.14159265358979);\n}","import React from 'react';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task8 } from '../../tasks/Task8/Task8';\n\nexport class Week8 extends Week {\n\n    weekName = 'Неделя 8. Точечное оценивание';\n\n    protected renderContent() {\n        return (<Task8 />);\n    }\n}\n","\n// https://gist.github.com/janjarfalk/08877a0703764c7ed2ba7b9662fcdecb\nexport function normStInv(p: number) {\n    const a1 = -39.6968302866538, a2 = 220.946098424521, a3 = -275.928510446969;\n    const a4 = 138.357751867269, a5 = -30.6647980661472, a6 = 2.50662827745924;\n    const b1 = -54.4760987982241, b2 = 161.585836858041, b3 = -155.698979859887;\n    const b4 = 66.8013118877197, b5 = -13.2806815528857, c1 = -7.78489400243029E-03;\n    const c2 = -0.322396458041136, c3 = -2.40075827716184, c4 = -2.54973253934373;\n    const c5 = 4.37466414146497, c6 = 2.93816398269878, d1 = 7.78469570904146E-03;\n    const d2 = 0.32246712907004, d3 = 2.445134137143, d4 = 3.75440866190742;\n    const p_low = 0.02425, p_high = 1 - p_low;\n    let q, r;\n    let retVal;\n\n    if ((p < 0) || (p > 1)) {\n        console.log(\"normSInv: Argument out of range.\");\n        retVal = 0;\n    } else if (p < p_low) {\n        q = Math.sqrt(-2 * Math.log(p));\n        retVal = (((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n    } else if (p <= p_high) {\n        q = p - 0.5;\n        r = q * q;\n        retVal = (((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * q / (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1);\n    } else {\n        q = Math.sqrt(-2 * Math.log(1 - p));\n        retVal = -(((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n    }\n\n    return retVal;\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { DistributionType } from '../../../utils/distribution';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { FetchingInputSample } from '../../../components/FetchingInputSample/FetchingInputSample';\nimport { InputDistributionType } from '../../../components/InputDistributionType/InputDistributionType';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { verifyInteger } from '../../../utils/verifyInteger';\nimport { normStInv } from '../../../utils/normStInv';\nimport { Fieldset } from 'primereact/fieldset';\n\ninterface Task9State {\n\n    sample?: number[];\n    distributionType?: DistributionType;\n    specificParameters: { [key: string]: string };\n}\n\nexport class Task9 extends Task<{}, Task9State> {\n\n    state: Task9State = { specificParameters: {} };\n\n    protected checkParameters(): boolean {\n        const { sample, distributionType, specificParameters } = this.state;\n\n        let specificParametersCheck: boolean = true;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersCheck = verifyInteger(specificParameters.m) && +specificParameters.m > 0;\n                break;\n\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n            case DistributionType.EXPONENTIAL:\n                specificParametersCheck = verifyInteger(specificParameters.k) && +specificParameters.k > 0;\n                break;\n\n            case DistributionType.NORMAL:\n                specificParametersCheck = verifyInteger(specificParameters.a) && +specificParameters.a > 0;\n                break;\n        }\n\n        return !!sample && !!distributionType && specificParametersCheck;\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onDistributionTypeChange(distributionType?: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onSpecificParameterChange(name: 'm' | 'k' | 'a') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                specificParameters: {\n                    ...this.state.specificParameters,\n\n                    [name]: e.currentTarget.value.trim()\n                }\n            });\n        }\n    }\n\n    protected renderParameters() {\n        const { distributionType, specificParameters } = this.state;\n\n        let paramTitle: string = '';\n        let specificParametersOutput: React.ReactNode;\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                specificParametersOutput = (\n                    <Fieldset legend=\"Третье задание:\">\n                        <div className=\"p-inputgroup\">\n                            <span className=\"p-inputgroup-addon\">\n                                <strong>m</strong> =\n                            </span>\n\n                            <InputText value={specificParameters.m ?? ''}\n                                       onChange={this.onSpecificParameterChange('m')} />\n\n                            <span className=\"p-inputgroup-addon\">\n                                <ValidationIcon valid={verifyInteger(specificParameters.m) && +specificParameters.m > 0} />\n                            </span>\n                        </div>\n                    </Fieldset>\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                paramTitle = 'Количество помидоров';\n                break;\n\n            case DistributionType.POISSON:\n                paramTitle = 'Доход за каждый звонок';\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                paramTitle = 'Затраты на секунду звонка';\n                break;\n\n            case DistributionType.NORMAL:\n                specificParametersOutput = (\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            <strong>a</strong> =\n                        </span>\n\n                        <InputText value={specificParameters.a ?? ''}\n                                   onChange={this.onSpecificParameterChange('a')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyInteger(specificParameters.a) && +specificParameters.a > 0} />\n                        </span>\n                    </div>\n                );\n                break;\n        }\n\n        if (paramTitle) {\n            specificParametersOutput = (\n                <Fieldset legend=\"Третье задание:\">\n                    <div className=\"p-inputgroup\">\n                        <span className=\"p-inputgroup-addon\">\n                            {paramTitle}:\n                        </span>\n\n                        <InputText value={specificParameters.k ?? ''}\n                                   onChange={this.onSpecificParameterChange('k')} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyInteger(specificParameters.k) && +specificParameters.k > 0} />\n                        </span>\n                    </div>\n                </Fieldset>\n            );\n        }\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка для задания:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom-not-last\">\n                    <span className=\"p-inputgroup-addon\">\n                        Распределение:\n                    </span>\n\n                    <InputDistributionType exclude={[DistributionType.BERNOULLI]} value={distributionType}\n                                           onChange={this.onDistributionTypeChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={!!this.state.distributionType} />\n                    </span>\n                </div>\n\n                {specificParametersOutput}\n            </>\n        );\n    }\n\n    private static renderGeneralPart(start: number, end: number): React.ReactNode {\n        return (\n            <>\n                Левая граница диапазона <strong>&#952;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(start)} />\n                <br />\n\n                Правая граница диапазона <strong>&#952;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(end)} />\n            </>\n        )\n    }\n\n    private renderBinomialAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const m = +specificParameters.m;\n        const c = quantile * Math.sqrt(avg * (1 - avg / m)) / (sqrtN * m);\n        const theta = avg / m + c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(avg / m - c, theta)}\n                <br />\n\n                Среднее количество опаздавших поездов при максимально возможном значении <strong>&#952;</strong>{' '}\n                и <strong>m = {m}</strong>:&nbsp;\n                <InputText readOnly value={Math.round(theta * m)} />\n            </>\n        );\n    }\n\n    private renderGeometricAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const c = quantile * Math.sqrt(1 - 1 / avg) / (sqrtN * avg);\n        const theta = 1 / avg - c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(theta, 1 / avg + c)}\n                <br />\n\n                Вероятность, что музыкант убежит, если в него попало ровно <strong>{k}</strong> помидоров:&nbsp;\n                <InputText readOnly value={Math.round(10 * theta)} />\n            </>\n        );\n    }\n\n    private renderPoissonAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const c = quantile * Math.sqrt(avg) / sqrtN;\n        const theta = avg + c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(avg - c, theta)}\n                <br />\n\n                Сумма, которую заработает компания за 5 минут при максимально возможном среднем количестве звонков,\n                если за каждый звонок она получает доход в <strong>{k}</strong> рубля:&nbsp;\n                <InputText readOnly value={normalizeNumber(k * theta)} />\n            </>\n        );\n    }\n\n    private static renderUniformAnswer(avg: number, quantile: number, sqrtN: number, first: number, last: number) {\n        const c = quantile * (last - first) / (Math.sqrt(3) * sqrtN);\n\n        const start = 2 * avg - c - last;\n        const end = 2 * avg + c - first;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(start, end)}\n                <br />\n\n                Длина экрана:&nbsp;\n                <InputText readOnly value={normalizeNumber(end - start)} />\n            </>\n        );\n    }\n\n    private renderExponentialAnswer(avg: number, quantile: number, sqrtN: number): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const k = +specificParameters.k;\n        const c = quantile / (sqrtN * avg);\n        const theta = 1 / avg - c;\n\n        return (\n            <>\n                {Task9.renderGeneralPart(theta, 1 / avg + c)}\n                <br />\n\n                Максимальная в среднем сумма, которую может тратить колл-центр на один звонок,\n                если за каждую секунду звонка тратит <strong>{k}</strong> копейки:&nbsp;\n                <InputText readOnly value={normalizeNumber(k / theta)} />\n            </>\n        );\n    }\n\n    private renderNormalAnswer(sample: number[]): React.ReactNode {\n        const { specificParameters } = this.state;\n\n        const a = +specificParameters.a;\n\n        const c = sample.map(x => (x - a) ** 2);\n        const start = c.map(x => x / 10279.07).reduce((a, b) => a + b);\n        const end = c.map(x => x / 9724.718).reduce((a, b) => a + b);\n\n        return (\n            <>\n                {Task9.renderGeneralPart(start, end)}\n                <br />\n\n                Какое минимальное количество молока можно ожидать потребителю:&nbsp;\n                <InputText readOnly value={normalizeNumber(a - Math.sqrt(end))} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, distributionType } = this.state;\n\n        if (!sample || !distributionType) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const quantile = normStInv(1 - 0.05 / 2);\n        const sqrtN = Math.sqrt(sample.length);\n\n        switch (distributionType) {\n            case DistributionType.BINOMIAL:\n                return this.renderBinomialAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.GEOMETRIC:\n                return this.renderGeometricAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.POISSON:\n                return this.renderPoissonAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.UNIFORM:\n                return Task9.renderUniformAnswer(avg, quantile, sqrtN, sample[0], sample[sample.length - 1]);\n\n            case DistributionType.EXPONENTIAL:\n                return this.renderExponentialAnswer(avg, quantile, sqrtN);\n\n            case DistributionType.NORMAL:\n                return this.renderNormalAnswer(sample);\n        }\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task9 } from '../../tasks/Task9/Task9';\n\nexport class Week9 extends Week {\n\n    weekName = 'Неделя 9. Точные и асимптотические доверительные интервалы';\n\n    protected renderContent() {\n        return (<Task9 />);\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../../components/Task/Task';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\nimport { FetchingInputSample } from '../../../components/FetchingInputSample/FetchingInputSample';\nimport { normalizeNumber } from '../../../utils/normalizeNumber';\nimport { verifyInteger } from '../../../utils/verifyInteger';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { normStInv } from '../../../utils/normStInv';\n\ninterface Task10State {\n\n    sample?: number[];\n    m: string;\n    e: string;\n}\n\nexport class Task10 extends Task<{}, Task10State> {\n\n    state: Task10State = { m: '', e: '' };\n\n    protected checkParameters(): boolean {\n        const { sample, m, e } = this.state;\n\n        return !!sample && verifyInteger(m) && verifyNumber(e);\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onMChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            m: e.currentTarget.value\n        });\n    }\n\n    private onEChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            e: e.currentTarget.value\n        });\n    }\n\n    protected renderParameters() {\n        const { m, e } = this.state;\n\n        return (\n            <>\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Выборка для задания:\n                    </span>\n\n                    <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                </div>\n\n                <div className=\"p-inputgroup half-margin-bottom\">\n                    <span className=\"p-inputgroup-addon\">\n                        Вес одного эскимо:\n                    </span>\n\n                    <InputText value={m} onChange={this.onMChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyInteger(m)} />\n                    </span>\n                </div>\n\n                <div className=\"p-inputgroup\">\n                    <span className=\"p-inputgroup-addon\">\n                        <strong>&#949;</strong> =\n                    </span>\n\n                    <InputText value={e} onChange={this.onEChange.bind(this)} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(e)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, m, e } = this.state;\n\n        if (!sample) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const sqAvg = mean(sample.map(x => x ** 2));\n        const sampleVariance = sqAvg - avg ** 2;\n        const deviation = Math.sqrt(sample.length / (sample.length - 1) * sampleVariance);\n        const absDeviationFunc = Math.abs(Math.sqrt(sample.length) * (avg - +m) / deviation);\n        const hypothesis = absDeviationFunc < normStInv(1 - +e / 2);\n\n        return (\n            <>\n                Выборочное среднее:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg)} />\n                <br />\n\n                Оценка среднеквадратического отклонения:&nbsp;\n                <InputText readOnly value={normalizeNumber(deviation)} />\n                <br />\n\n                Значение модуля функции отклонения:&nbsp;\n                <InputText readOnly value={normalizeNumber(absDeviationFunc)} />\n                <br />\n\n                Ответ:&nbsp;\n                <InputText readOnly value={hypothesis ? 1 : 0} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../../components/Week/Week';\nimport { Task10 } from '../../tasks/Task10/Task10';\n\nexport class Week10 extends Week {\n\n    weekName = 'Неделя 10. Проверка гипотез';\n\n    protected renderContent() {\n        return (<Task10 />);\n    }\n}\n","import React from 'react';\n\nimport { HeaderTemplate } from '../../../components/HeaderTemplate/HeaderTemplate';\n\nexport class Header extends HeaderTemplate {\n\n    protected renderContent() {\n        return (\n            <>\n                Это онлайн программа для решения задач из зачёта по онлайн-курсу Прикладная статистика.\n                <br />\n\n                Отдельное спасибо <strong>Софье Датской</strong> за документ, на основе которого была сделана эта программа.\n\n                <br />\n                <br />\n\n                <strong>Внимание!</strong> Проверяйте условия задачи перед отправкой.{' '}\n                Если ваше условие не совпадает с условием в решателе,{' '}\n                то скорее всего ваша задача к сожалению не реализована.\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Task } from '../../../components/Task/Task';\nimport { Fieldset } from 'primereact/fieldset';\n\nexport abstract class FinalTask<P = {}, S = {}> extends Task<P, S> {\n\n    protected renderParameters() {\n        return (\n            <>\n                <Fieldset legend=\"Условие задачи\" className=\"margin-bottom\">\n                    {this.renderProblem()}\n                </Fieldset>\n\n                {this.renderFinalParameters()}\n            </>\n        );\n    }\n\n    protected abstract renderProblem(): React.ReactNode;\n    protected abstract renderFinalParameters(): React.ReactNode;\n}\n","import React from 'react';\n\nimport { FinalTask } from '../../components/FinalTask/FinalTask';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { InputText } from 'primereact/inputtext';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\n\ninterface Task1State {\n\n    white: string;\n    red: string;\n}\n\nexport class Task1 extends FinalTask<{}, Task1State> {\n\n    state: Task1State = { white: '', red: '' };\n\n    protected checkParameters(): boolean {\n        const { white, red } = this.state;\n\n        return verifyNumber(white) && verifyNumber(red);\n    }\n\n    protected renderProblem() {\n        const { white, red } = this.state;\n\n        return (\n            <>\n                В корзине <strong>{white || '?'}</strong> белых и <strong>{red || '?'}</strong> красных шаров.{' '}\n                Из корзины наудачу вытащили один шар и, не смотря на его цвет, отложили в сторону,{' '}\n                а затем вытащили еще один шар.\n            </>\n        );\n    }\n\n    private onChangeState(param: 'white' | 'red') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                [param]: e.currentTarget.value.trim()\n            });\n        }\n    }\n\n    protected renderFinalParameters() {\n        const { white, red } = this.state;\n\n        return (\n            <>\n                Количество белых шаров:{' '}\n                <div className=\"p-inputgroup margin-bottom\">\n                    <InputText value={white} onChange={this.onChangeState('white')} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(white)} />\n                    </span>\n                </div>\n\n                Количество красных шаров:{' '}\n                <div className=\"p-inputgroup\">\n                    <InputText value={red} onChange={this.onChangeState('red')} />\n\n                    <span className=\"p-inputgroup-addon\">\n                        <ValidationIcon valid={verifyNumber(red)} />\n                    </span>\n                </div>\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { white, red } = this.state;\n\n        return (\n            <>\n                Какова вероятность, что вытащенный шар — красный?\n                <br />\n\n                <InputText readOnly value={`${red} / (${white} + ${red})`} />\n\n                <br />\n                <br />\n\n                Пусть вторым вытащен красный шар. Какова вероятность, что первым вытащен белый?\n                <br />\n\n                <InputText readOnly value={`${white} / (${white} + ${red} - 1)`} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { FinalTask } from '../../components/FinalTask/FinalTask';\nimport { verifyNumber } from '../../../utils/verifyNumber';\nimport { InputText } from 'primereact/inputtext';\nimport { ValidationIcon } from '../../../components/ValidationIcon/ValidationIcon';\n\ninterface Task2State {\n\n    e: [string, string];\n    n: [string, string];\n    p: [[string, string], [string, string]];\n    pChanged: number; // Hack\n}\n\nexport class Task2 extends FinalTask<{}, Task2State> {\n\n    state: Task2State = { e: ['', ''], n: ['', ''], p: [['', ''], ['', '']], pChanged: 0 };\n\n    private static checkRow(row: [string, string]) {\n        return row.filter(verifyNumber).length === 2;\n    }\n\n    private static checkTable(table: [[string, string], [string, string]]) {\n        return table.filter(this.checkRow).length === 2;\n    }\n\n    protected checkParameters(): boolean {\n        const { e, n, p } = this.state;\n\n        return Task2.checkRow(e) && Task2.checkRow(n) && Task2.checkTable(p);\n    }\n\n    protected renderProblem() {\n        const { e, n, p } = this.state;\n\n        return (\n            <>\n                Случайный вектор имеет распределение, задаваемое таблицей:\n                <br />\n\n                <table>\n                    <thead>\n                    <tr>\n                        <th>&#951; \\ &#958;</th>\n                        <th>{e[0] || (<>&#958;<sub>1</sub></>)}</th>\n                        <th>{e[1] || (<>&#958;<sub>2</sub></>)}</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                    <tr>\n                        <th>{n[0] || (<>&#951;<sub>1</sub></>)}</th>\n                        <th>{p[0][0] || (<>P<sub>1,1</sub></>)}</th>\n                        <th>{p[0][1] || (<>P<sub>1,2</sub></>)}</th>\n                    </tr>\n\n                    <tr>\n                        <th>{n[1] || (<>&#951;<sub>2</sub></>)}</th>\n                        <th>{p[1][0] || (<>P<sub>2,1</sub></>)}</th>\n                        <th>{p[1][1] || (<>P<sub>2,2</sub></>)}</th>\n                    </tr>\n                    </tbody>\n                </table>\n\n                Составьте маргинальные распределения &#958; и &#951;.\n            </>\n        );\n    }\n\n    private onRowChange(param: 'e' | 'n', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const row = [...this.state[param]];\n\n            row[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [param]: row });\n        };\n    }\n\n    private onPChange(i: number, j: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const table = [...this.state.p] as [[string, string], [string, string]];\n\n            table[i][j] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, p: table, pChanged: this.state.pChanged + 1 });\n        };\n    }\n\n    protected renderFinalParameters() {\n        const { p } = this.state;\n\n        return (\n            <>\n                {[{ letter: '\\u03be', name: 'e' }, { letter: '\\u03b7', name: 'n' }]\n                    .map(param => [0, 1].map(i => (\n                        <div key={param.name + i} className=\"p-inputgroup margin-bottom\">\n                            <span className=\"p-inputgroup-addon\">\n                                {param.letter}<sub>{i + 1}</sub>\n                            </span>\n\n                            <InputText value={this.state[param.name as 'e' | 'n'][i]}\n                                       onChange={this.onRowChange(param.name as 'e' | 'n', i)} />\n\n                            <span className=\"p-inputgroup-addon\">\n                                <ValidationIcon valid={verifyNumber(this.state[param.name as 'e' | 'n'][i])} />\n                            </span>\n                        </div>\n                    )))}\n\n                {[0, 1].map(i => [0, 1].map(j => (\n                    <div key={i + ',' + j} className={`p-inputgroup ${!(i && j) && 'margin-bottom'}`}>\n                        <span className=\"p-inputgroup-addon\">\n                            P<sub>{i + 1},{j + 1}</sub>\n                        </span>\n\n                        <InputText value={p[i][j]} onChange={this.onPChange(i, j)} />\n\n                        <span className=\"p-inputgroup-addon\">\n                            <ValidationIcon valid={verifyNumber(p[i][j])} />\n                        </span>\n                    </div>\n                )))}\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { e, n, p } = this.state;\n\n        const en = +n[0] * (+p[0][0] + +p[0][1]) + +n[1] * (+p[1][0] + +p[1][1]);\n        const en2 = (+n[0]) ** 2 * (+p[0][0] + +p[0][1]) + (+n[1]) ** 2 * (+p[1][0] + +p[1][1]);\n\n        return (\n            <>\n                Найдите математические ожидания E&#958;:\n                <br />\n\n                <InputText readOnly value={+e[0] * (+p[0][0] + +p[1][0]) + +e[1] * (+p[0][1] + +p[1][1])} />\n\n                <br />\n                <br />\n\n                Найдите математические ожидания E&#951;:\n                <br />\n\n                <InputText readOnly value={en} />\n\n                <br />\n                <br />\n\n                Найдите дисперсию D&#951;:\n                <br />\n\n                <InputText readOnly value={en2 - en ** 2} />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { TabPanel, TabView } from 'primereact/tabview';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Header as CourseHeader } from '../../onlineCourse/components/Header/Header';\nimport { Week4 } from '../../onlineCourse/weeks/Week4/Week4';\nimport { Week5 } from '../../onlineCourse/weeks/Week5/Week5';\nimport { Week6 } from '../../onlineCourse/weeks/Week6/Week6';\nimport { Week7 } from '../../onlineCourse/weeks/Week7/Week7';\nimport { Week8 } from '../../onlineCourse/weeks/Week8/Week8';\nimport { Week9 } from '../../onlineCourse/weeks/Week9/Week9';\nimport { Week10 } from '../../onlineCourse/weeks/Week10/Week10';\nimport { Header as FinalHeader } from '../../finalTest/components/Header/Header';\n\nimport './App.css';\nimport { Task1 } from '../../finalTest/tasks/Task1/Task1';\nimport { Task2 } from '../../finalTest/tasks/Task2/Task2';\n\nexport class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TabView>\n                    <TabPanel header=\"Онлайн-курс\">\n                        <div className=\"margin-bottom\"><CourseHeader /></div>\n                        <div className=\"margin-bottom\"><Week4 /></div>\n                        <div className=\"margin-bottom\"><Week5 /></div>\n                        <div className=\"margin-bottom\"><Week6 /></div>\n                        <div className=\"margin-bottom\"><Week7 /></div>\n                        <div className=\"margin-bottom\"><Week8 /></div>\n                        <div className=\"margin-bottom\"><Week9 /></div>\n                        <div><Week10 /></div>\n                    </TabPanel>\n\n                    <TabPanel header=\"Зачёт\">\n                        <div className=\"margin-bottom\"><FinalHeader /></div>\n\n                        <Accordion multiple>\n                            <AccordionTab header=\"Задача 1\"><Task1 /></AccordionTab>\n                            <AccordionTab header=\"Задача 2\"><Task2 /></AccordionTab>\n                            <AccordionTab disabled header=\"Задача 3 (coming soon)\"></AccordionTab>\n                            <AccordionTab disabled header=\"Задача 4 (coming soon)\"></AccordionTab>\n                            <AccordionTab disabled header=\"Задача 5 (coming soon)\"></AccordionTab>\n                            <AccordionTab disabled header=\"Задача 6 (coming soon)\"></AccordionTab>\n                            <AccordionTab disabled header=\"Задача 7 (coming soon)\"></AccordionTab>\n                            <AccordionTab disabled header=\"Задача 8 (coming soon)\"></AccordionTab>\n                        </Accordion>\n                    </TabPanel>\n                </TabView>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pythonTab.137e3c15.png\";"],"sourceRoot":""}