{"version":3,"sources":["components/Week/Week.tsx","components/LoadingContainer/LoadingContainer.tsx","utils/distribution.ts","components/Task/Task.tsx","components/ValidationIcon/ValidationIcon.tsx","components/DistributionSelector/DistributionSelector.tsx","utils/filterObject.ts","tasks/Task61/Task61.tsx","utils/sampleVariance.tsx","utils/median.ts","tasks/Task621/Task621.tsx","components/FetchingInputSample/FetchingInputSample.tsx","tasks/Task622/Task622.tsx","weeks/Week6/Week6.tsx","utils/sampleQuantile.ts","tasks/Task7/Task7.tsx","weeks/Week7/Week7.tsx","tasks/Task8/Task8.tsx","weeks/Week8/Week8.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Week","props","weekName","className","weekClassName","classNames","Array","isArray","push","join","this","header","toggleable","collapsed","renderContent","React","Component","LoadingContainer","loading","renderLoading","progress","minProgress","maxProgress","mode","value","children","defaultProps","DistributionType","Task","taskClassName","answerPromise","state","prevProps","prevState","snapshot","isEqual","omit","checkParameters","a","async","renderAnswer","setState","answer","undefined","renderParameters","distributionTypesSelectItems","BERNOULLI","BINOMIAL","GEOMETRIC","POISSON","UNIFORM","EXPONENTIAL","NORMAL","map","type","label","ValidationIcon","valid","clickable","onClick","style","cursor","DistributionSelector","distributionParams","distributionType","mapValues","params","String","onDistributionChange","e","param","event","currentTarget","trim","newDistribution","numericParams","object","predicate","ret","forEach","v","k","filterObject","s","Boolean","Number","isNaN","p","n","l","b","d","onChange","normalSigmaSquare","name","field","paramsComponents","Fragment","key","onDistributionParamChange","options","onDistributionTypeChange","bind","Task61","randomSeed","distribution","numericN","numericRandomSeed","onNChange","onRandomSeedChange","code","href","target","rel","sampleVariance","sample","expected","mean","median","length","Task621","alchemistsRegexp","alchemists","test","placeholder","onAlchemistsChange","replace","split","sort","counts","i","count","filter","m","maxCount","maxBy","f","readOnly","Math","sqrt","FetchingInputSample","previousFetch","Date","now","urlRegex","proxyUrl","url","reload","Promise","resolve","setTimeout","max","fetch","response","ok","text","sampleText","console","log","onUrlChange","onIconClick","Task622","sample10","sample10000","onSample10Change","onSample10000Change","e10","e10000","d10","d10000","output","property","trueP","trueD","abs","Week6","multiple","sampleQuantile","level","index","roundedIndex","floor","citySelectItems","avgSalary","Task7","cities","sampleIndices","intervalIndices","indices","checkIndices","verticalAlign","onCitiesChange","onIndexChange","_","includes","numericSampleIndices","numericIntervalIndices","intervalLength","intervalOffset","fixedV","Week7","Task8","specificParameters","specificParametersCheck","specificParametersOutput","onSpecificParameterChange","onSampleChange","avg","variance","sqrt3Variance","sqAvg","x","renderUniformAnswer","Week8","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b8644e3.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nexport abstract class Week<P = {}, S = {}> extends React.Component<P, S> {\n\n    protected readonly abstract weekName: string;\n    protected readonly className?: string | string[];\n\n    private readonly weekClassName: string;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Week'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.weekClassName = classNames.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.weekClassName}>\n                <Panel header={this.weekName} toggleable collapsed>\n                    {this.renderContent()}\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\nimport { ProgressBar } from 'primereact/progressbar';\n\nexport interface LoadingContainerProps {\n\n    loading: boolean;\n    progress?: number;\n    minProgress: number;\n    maxProgress: number;\n}\n\nexport class LoadingContainer<P = {}, S = {}> extends React.Component<P & React.PropsWithChildren<LoadingContainerProps>, S> {\n\n    static defaultProps: LoadingContainerProps = {\n\n        loading: false,\n        minProgress: 0,\n        maxProgress: 100\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return this.renderLoading();\n        } else {\n            return this.renderContent();\n        }\n    }\n\n    protected renderLoading(): React.ReactNode {\n        const { progress, minProgress, maxProgress } = this.props;\n\n        return (\n            <ProgressBar mode={progress ? 'determinate' : 'indeterminate'} value={typeof progress === 'number' ?\n                (progress - minProgress) / (maxProgress - minProgress) : 0} />\n        );\n    }\n\n    protected renderContent(): React.ReactNode {\n        return this.props.children;\n    }\n}\n","import { SelectItem } from 'primereact/api';\n\nexport enum DistributionType {\n\n    BERNOULLI = 'Бернулли',\n\n    BINOMIAL = 'Биноминальное',\n\n    GEOMETRIC = 'Геометрическое',\n\n    POISSON = 'Пуассона',\n\n    UNIFORM = 'Равномерное',\n\n    EXPONENTIAL = 'Показательное',\n\n    NORMAL = 'Нормальное'\n}\n\nexport interface BernoulliDistribution {\n\n    type: DistributionType.BERNOULLI;\n    params: { p: number };\n}\n\nexport interface BinomialDistribution {\n\n    type: DistributionType.BINOMIAL;\n    params: {\n        n: number;\n        p: number;\n    }\n}\n\nexport interface GeometricDistribution {\n\n    type: DistributionType.GEOMETRIC;\n    params: { p: number };\n}\n\nexport interface PoissonDistribution {\n\n    type: DistributionType.POISSON;\n    params: { l: number };\n}\n\nexport interface UniformDistribution {\n\n    type: DistributionType.UNIFORM;\n    params: {\n        a: number;\n        b: number;\n    }\n}\n\nexport interface ExponentialDistribution {\n\n    type: DistributionType.EXPONENTIAL;\n    params: { l: number };\n}\n\nexport interface NormalDistribution {\n\n    type: DistributionType.NORMAL;\n    params: {\n        a: number;\n        d: number;\n    }\n}\n\nexport type Distribution =\n    BernoulliDistribution |\n    BinomialDistribution |\n    GeometricDistribution |\n    PoissonDistribution |\n    UniformDistribution |\n    ExponentialDistribution |\n    NormalDistribution;\n\nexport const distributionTypes = [\n    DistributionType.BERNOULLI,\n    DistributionType.BINOMIAL,\n    DistributionType.GEOMETRIC,\n    DistributionType.POISSON,\n    DistributionType.UNIFORM,\n    DistributionType.EXPONENTIAL,\n    DistributionType.NORMAL\n];\n\nexport const distributionTypesSelectItems: SelectItem[] = distributionTypes\n    .map(type => ({ label: type, value: type }));\n","import React from 'react';\nimport { LoadingContainer } from '../LoadingContainer/LoadingContainer';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\ninterface TaskState {\n\n    answer?: React.ReactNode;\n}\n\nexport abstract class Task<P = {}, S = {}> extends React.Component<React.PropsWithChildren<P>, S & TaskState> {\n\n    protected readonly className?: string | string[];\n\n    private readonly taskClassName: string;\n    private answerPromise?: Promise<React.ReactNode>;\n\n    state = {} as S & TaskState;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Task'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.taskClassName = classNames.join(' ');\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<React.PropsWithChildren<P>>,\n        prevState: Readonly<S & TaskState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, 'answer'), omit(prevState, 'answer')) && this.checkParameters()) {\n            (async () => {\n                const answerPromise = this.answerPromise = this.renderAnswer();\n                this.setState({ ...this.state, answer: undefined });\n\n                const answer = await answerPromise;\n                if (this.answerPromise === answerPromise) {\n                    this.setState({ ...this.state, answer });\n                }\n            })();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.taskClassName}>\n                {this.renderParameters()}\n\n                {this.checkParameters() && (\n                    <>\n                        <hr />\n\n                        {this.renderLoading()}\n                        </>\n                )}\n            </div>\n        );\n    }\n\n    protected abstract checkParameters(): boolean;\n    protected abstract renderParameters(): React.ReactNode;\n    protected abstract async renderAnswer(): Promise<React.ReactNode>;\n\n    protected renderLoading(): React.ReactNode {\n        const { answer } = this.state;\n\n        return (\n            <LoadingContainer loading={!answer}>\n                {answer}\n            </LoadingContainer>\n        );\n    }\n}\n","import React from 'react';\n\nexport interface ValidationIconProps {\n\n    valid?: boolean;\n    clickable: boolean;\n\n    onClick(): void;\n}\n\nexport class ValidationIcon extends React.Component<ValidationIconProps> {\n\n    static defaultProps: ValidationIconProps = {\n\n        clickable: false,\n\n        onClick() {}\n    };\n\n    render() {\n        const { valid, clickable, onClick } = this.props;\n\n        if (valid === undefined) {\n            return clickable\n                ? (<i className=\"pi pi-spin pi-replay\" />)\n                : (<i className=\"pi pi-spin pi-spinner\" />);\n        } else {\n            return valid\n                ? (<i className=\"pi pi-check\" />)\n                : clickable\n                    ? (<i className=\"pi pi-replay\" style={{ cursor: 'pointer' }} onClick={onClick} />)\n                    : (<i className=\"pi pi-times\" />);\n        }\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport mapValues from 'lodash/mapValues';\nimport isEqual from 'lodash/isEqual';\n\nimport { Distribution, DistributionType, distributionTypesSelectItems } from '../../utils/distribution';\nimport { filterObject } from '../../utils/filterObject';\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface DistributionSelectorProps {\n\n    value?: Distribution;\n    normalSigmaSquare: boolean;\n\n    onChange(value?: Distribution): void;\n}\n\ninterface DistributionSelectorState {\n\n    distributionType?: DistributionType;\n    distributionParams: { [key: string]: string | undefined };\n}\n\nexport class DistributionSelector extends React.Component<DistributionSelectorProps, DistributionSelectorState> {\n\n    static defaultProps: DistributionSelectorProps = {\n\n        normalSigmaSquare: true,\n\n        onChange() {}\n    };\n\n    state: DistributionSelectorState = { distributionParams: {} };\n\n    componentDidUpdate(\n        prevProps: Readonly<DistributionSelectorProps>,\n        prevState: Readonly<DistributionSelectorState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(this.props.value, prevProps.value) && this.props.value) {\n            this.setState({\n                ...this.state,\n\n                distributionType: this.props.value.type,\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    ...mapValues(this.props.value.params, String)\n                }\n            });\n        }\n\n        if (!isEqual(this.state, prevState)) {\n            this.onDistributionChange();\n        }\n    }\n\n    private onDistributionTypeChange(e: { value: DistributionType }) {\n        this.setState({\n            ...this.state,\n\n            distributionType: e.value as DistributionType\n        });\n    }\n\n    private onDistributionParamChange(param: string, event: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            distributionParams: {\n                ...this.state.distributionParams,\n\n                [param]: event.currentTarget.value.trim()\n            }\n        });\n    }\n\n    private onDistributionChange() {\n        const { distributionType, distributionParams } = this.state;\n\n        const numericParams = mapValues(\n            filterObject(\n                mapValues(distributionParams, s => s ? s.trim() : undefined),\n                Boolean\n            ),\n            Number\n        );\n\n        let newDistribution: Distribution | undefined;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    };\n                }\n                break;\n\n            case DistributionType.BINOMIAL:\n                if (!isNaN(numericParams['n']) && !isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            n: numericParams['n'],\n                            p: numericParams['p']\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.GEOMETRIC:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    };\n                }\n                break;\n\n            case DistributionType.POISSON:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    };\n                }\n                break;\n\n            case DistributionType.UNIFORM:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['b'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            b: numericParams['b']\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    };\n                }\n                break;\n\n            case DistributionType.NORMAL:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['d'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            d: numericParams['d']\n                        }\n                    };\n                }\n                break;\n        }\n\n        this.props.onChange(newDistribution);\n    }\n\n    render() {\n        const { normalSigmaSquare } = this.props;\n        const { distributionType, distributionParams } = this.state;\n\n        const params: { name: string, field: string }[] = [];\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.BINOMIAL:\n                params.push({ name: 'n', field: 'n'});\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.GEOMETRIC:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.POISSON:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.UNIFORM:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: 'b', field: 'b'});\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.NORMAL:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: '\\u03C3' + (normalSigmaSquare ? '\\u00B2' : ''), field: 'd'});\n                break;\n        }\n\n        const paramsComponents: JSX.Element[] = params\n            .map(param => {\n                const value = distributionParams[param.field];\n\n                return (\n                    <React.Fragment key={param.name}>\n                        <strong>{param.name}</strong> =&nbsp;\n                        <InputText value={value ?? ''} onChange={e => this.onDistributionParamChange(param.field, e)} />\n                        <ValidationIcon valid={!!value?.trim() && !isNaN(+value)} />\n                        <br />\n                    </React.Fragment>\n                );\n            });\n\n        return (\n            <>\n                Распределение:&nbsp;\n                <Dropdown value={this.state.distributionType} options={distributionTypesSelectItems}\n                          onChange={this.onDistributionTypeChange.bind(this)} />\n                <ValidationIcon valid={!!this.state.distributionType} />\n                <br />\n\n                {paramsComponents}\n            </>\n        );\n    }\n}\n","import forEach from 'lodash/forEach'\n\nexport function filterObject<V = any, K extends keyof any = keyof {}>(object: Record<K, V>, predicate: (v: V, k: K) => boolean) {\n    const ret: Record<K, V> = {} as Record<K, V>;\n\n    forEach(object, (v, k) => {\n        if (predicate(v, k as K)) {\n            ret[k as K] = v;\n        }\n    });\n\n    return ret;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { DistributionSelector } from '../../components/DistributionSelector/DistributionSelector';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\n\ninterface Task61State {\n\n    n: string;\n    distribution?: Distribution;\n    randomSeed: string;\n}\n\nexport class Task61 extends Task<{}, Task61State> {\n\n    state: Task61State = { n: '', randomSeed: '' };\n\n    private onNChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            n: e.currentTarget.value.trim()\n        });\n    }\n\n    private onDistributionChange(distribution?: Distribution) {\n        this.setState({ ...this.state, distribution });\n    }\n\n    private onRandomSeedChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            randomSeed: e.currentTarget.value.trim()\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n ? +n : undefined;\n        const numericRandomSeed = randomSeed ? +randomSeed : undefined;\n\n        return numericN !== undefined && !isNaN(numericN) && !!distribution &&\n            numericRandomSeed !== undefined && !isNaN(numericRandomSeed);\n    }\n\n    protected renderParameters() {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n ? +n : undefined;\n        const numericRandomSeed = randomSeed ? +randomSeed : undefined;\n\n        return (\n            <>\n                Объём (<strong>n</strong> =):&nbsp;\n                <InputText value={n} onChange={this.onNChange.bind(this)} />\n                <ValidationIcon valid={numericN !== undefined && !isNaN(numericN)} />\n                <br />\n\n                <DistributionSelector normalSigmaSquare={false} value={distribution}\n                                      onChange={this.onDistributionChange.bind(this)} />\n\n                <strong>random seed</strong> =&nbsp;\n                <InputText value={randomSeed} onChange={this.onRandomSeedChange.bind(this)} />\n                <ValidationIcon valid={numericRandomSeed !== undefined && !isNaN(numericRandomSeed)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, distribution, randomSeed } = this.state;\n\n        if (!n || !distribution || !randomSeed) {\n            return;\n        }\n\n        let code = `\nimport numpy as np\nnp.random.seed(${randomSeed})\n`;\n\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                code += `sample = np.random.binomial(1, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.BINOMIAL:\n                code += `sample = np.random.binomial(${distribution.params.n}, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.GEOMETRIC:\n                code += `sample = np.random.geometric(${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.POISSON:\n                code += `sample = np.random.poisson(${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.UNIFORM:\n                code += `sample = np.random.uniform(${distribution.params.a}, ${distribution.params.b}, ${n})`;\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                code += `sample = np.random.exponential(1 / ${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.NORMAL:\n                code += `sample = np.random.normal(${distribution.params.a}, ${distribution.params.d}, ${n})`;\n                break;\n        }\n\n        code += `\nprint(\",\".join([str(round(sample[i], 2)) for i in range(5)]))\nprint(\",\".join([str(round(sample[${+n - 5} + i], 2)) for i in range(5)]))\nprint(sum(sample)/len(sample))\n`;\n\n        return (\n            <>\n                Выполните следущий код в Python-интерпретаторе (например, на сайте <a href=\"https://repl.it\" target=\"_blank\" rel=\"noopener noreferrer\">repl.it</a>):\n\n                <pre>{code}</pre>\n\n                И скопируйте выведенные на экран строки в поля для ответов.\n            </>\n        );\n    }\n}\n","import mean from 'lodash/mean';\n\nexport function sampleVariance(sample: number[], expected?: number) {\n    const e = expected ? expected : mean(sample);\n\n    return mean(sample.map(v => (v - e) ** 2));\n}\n","export function median(sample: number[]) {\n    return sample.length % 2 === 0\n        ? (sample[sample.length / 2 - 1] + sample[sample.length / 2]) / 2\n        : sample[(sample.length - 1) / 2];\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport maxBy from 'lodash/maxBy';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { median } from '../../utils/median';\n\ninterface Task621State {\n\n    alchemists: string;\n}\n\ninterface CountObject {\n\n    value: number;\n    count: number;\n}\n\nexport class Task621 extends Task<{}, Task621State> {\n\n    private alchemistsRegexp = /^( *\\()?( *\\d+( *,)?)* *\\d+? *(\\) *)?$/;\n\n    state: Task621State = { alchemists: '' };\n\n    private onAlchemistsChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            alchemists: e.currentTarget.value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        return this.alchemistsRegexp.test(this.state.alchemists);\n    }\n\n    protected renderParameters() {\n        const { alchemists } = this.state;\n\n        return (\n            <>\n                Выборка: <InputText placeholder=\"(a, b, c...)\" value={alchemists}\n                                    onChange={this.onAlchemistsChange.bind(this)} />\n                <ValidationIcon valid={this.alchemistsRegexp.test(alchemists)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { alchemists } = this.state;\n\n        if (!alchemists) {\n            return;\n        }\n\n        const sample = alchemists.replace(/[()]/g, '').trim()\n            .split(/[,\\s]+/).map(Number).sort((a, b) => a - b);\n\n        const counts: CountObject[] = [1, 2, 3, 4, 5, 6]\n            .map(i => ({value: i, count: sample.filter(v => v === i).length}));\n\n        const e = mean(sample);\n        const d = sampleVariance(sample, e);\n        const m = median(sample);\n\n        const maxCount = maxBy(counts, v => v.count)?.count;\n        const mode = counts.filter(v => v.count === maxCount)\n            .map(v => v.value).sort((a, b) => a - b)[0];\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                    {[(v: CountObject) => v.value < 4, (v: CountObject) => v.value > 3].map(f => (\n                        <tr key={String(f)}>\n                            {counts.filter(f).map(v => (\n                                <td key={v.value}>\n                                    P(&#958;<sup>*</sup> = {v.value}) =&nbsp;\n                                    <InputText readOnly value={v.count === 0 ? '0' : `${v.count} / ${sample.length}`} />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                Математическое ожидание: <InputText readOnly value={e} /><br />\n                Дисперсия: <InputText readOnly value={d} /><br />\n                Среднеквадратическое отклонение: <InputText readOnly value={Math.sqrt(d)} /><br />\n                Медиана: <InputText readOnly value={m} /><br />\n                Мода: <InputText readOnly value={mode} /><br />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport { InputText } from 'primereact/inputtext';\n\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface FetchingInputSampleProps {\n\n    onChange(sample?: number[]): void;\n}\n\ninterface FetchingInputSampleState {\n\n    url: string;\n    loading: boolean;\n    sample?: number[];\n}\n\nexport class FetchingInputSample extends React.Component<FetchingInputSampleProps, FetchingInputSampleState> {\n\n    private previousFetch: number = Date.now();\n\n    private urlRegex = /^[^:/?#]+:\\/\\/[^/?#]*[^?#]*(\\?([^#]*))?(#(.*))?$/;\n    private proxyUrl = 'https://proxy.byprogminer.ru/?';\n\n    state: FetchingInputSampleState = {\n        url: '',\n        loading: false\n    };\n\n    componentDidUpdate(\n        prevProps: Readonly<FetchingInputSampleProps>,\n        prevState: Readonly<FetchingInputSampleState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, ['loading', 'sample']), omit(prevState, ['loading', 'sample']))) {\n            this.reload();\n        }\n    }\n\n    private reload() {\n        const { url } = this.state;\n\n        (async () => {\n            try {\n                if (this.urlRegex.test(url)) {\n                    await new Promise(resolve =>\n                        setTimeout(resolve, Math.max(0, this.previousFetch + 100 - Date.now())));\n\n                    this.previousFetch = Date.now();\n                    const response = await fetch(this.proxyUrl + url);\n\n                    if (response.ok) {\n                        const sampleText = await response.text();\n                        const sample = sampleText.split('\\n')\n                            .map(s => s.trim()).filter(Boolean).map(Number)\n                            .filter(v => !isNaN(v)).sort((a, b) => a - b);\n\n                        if (sample.length > 0) {\n                            if (this.state.url === url) {\n                                this.setState({ ...this.state, loading: false, sample });\n                                this.props.onChange(sample);\n                            }\n\n                            return;\n                        }\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n\n            this.setState({ ...this.state, loading: false, sample: undefined });\n            this.props.onChange(undefined);\n        })();\n    }\n\n    private onUrlChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            url: e.currentTarget.value.trim(),\n            loading: true\n        });\n    }\n\n    private onIconClick() {\n        this.setState({ ...this.state, loading: true });\n        this.reload();\n    }\n\n    render() {\n        const { url, loading, sample } = this.state;\n\n        return (\n            <>\n                <InputText placeholder=\"URL-адрес выборки\" value={url} onChange={this.onUrlChange.bind(this)} />\n                <ValidationIcon clickable={this.urlRegex.test(url)} valid={loading ? undefined : !!sample}\n                                onClick={this.onIconClick.bind(this)} />\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { DistributionSelector } from '../../components/DistributionSelector/DistributionSelector';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { sampleVariance } from '../../utils/sampleVariance';\n\ninterface Task622State {\n\n    sample10?: number[];\n    sample10000?: number[];\n    distribution?: Distribution;\n}\n\nexport class Task622 extends Task<{}, Task622State> {\n\n    state: Task622State = {};\n\n    private onSample10Change(sample10?: number[]) {\n        this.setState({...this.state, sample10});\n    }\n\n    private onSample10000Change(sample10000?: number[]) {\n        this.setState({...this.state, sample10000});\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { sample10, sample10000, distribution } = this.state;\n\n        return !!sample10 && !!sample10000 && !!distribution;\n    }\n\n    protected renderParameters() {\n        const { distribution } = this.state;\n\n        return (\n            <>\n                Выборка объёма <strong>n = 10</strong>:&nbsp;\n                <FetchingInputSample onChange={this.onSample10Change.bind(this)} />\n                <br />\n\n                Выборка объёма <strong>n = 10000</strong>:&nbsp;\n                <FetchingInputSample onChange={this.onSample10000Change.bind(this)} />\n                <br />\n\n                <DistributionSelector normalSigmaSquare={false} value={distribution}\n                                      onChange={this.onDistributionChange.bind(this)} />\n            </>\n        );\n    }\n\n    private static output(property: string, v: number, p: number, trueP: number, d: number, trueD: number): React.ReactNode {\n        return (\n            <>\n                Для выборки объёма <strong>{v}</strong>:<br />\n                Оценка <strong>{property}</strong>: <InputText readOnly value={p} /><br />\n                Погрешность оценки: <InputText readOnly value={Math.abs(p - trueP)} /><br />\n                Оценка дисперсии: <InputText readOnly value={d} /><br />\n                Погрешность оценки дисперсии: <InputText readOnly value={Math.abs(d - trueD)} />\n            </>\n        )\n    }\n\n    protected async renderAnswer() {\n        const { sample10, sample10000, distribution } = this.state;\n\n        if (!sample10 || !sample10000 || !distribution) {\n            return;\n        }\n\n        const e10 = mean(sample10);\n        const e10000 = mean(sample10000);\n        const d10 = sampleVariance(sample10, e10);\n        const d10000 = sampleVariance(sample10000, e10000);\n\n        let output: (v: number, e: number, d: number) => React.ReactNode;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e,\n                    distribution.params.p,\n                    d,\n                    distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.BINOMIAL:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e / distribution.params.n,\n                    distribution.params.p,\n                    d,\n                    distribution.params.n * distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    1 / e,\n                    distribution.params.p,\n                    d,\n                    (1 - distribution.params.p) / distribution.params.p ** 2\n                );\n                break;\n\n            case DistributionType.POISSON:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    e,\n                    distribution.params.l,\n                    d,\n                    distribution.params.l\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    2 * e - distribution.params.b,\n                    distribution.params.a,\n                    d,\n                    (distribution.params.b - distribution.params.a) ** 2 / 12\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    1 / e,\n                    distribution.params.l,\n                    d,\n                    1 / distribution.params.l ** 2\n                );\n                break;\n\n            case DistributionType.NORMAL:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    e,\n                    distribution.params.a,\n                    d,\n                    distribution.params.d\n                );\n                break;\n        }\n\n        return (\n            <>\n                {output(10, e10, d10)}\n\n                <hr />\n\n                {output(10000, e10000, d10000)}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task61 } from '../../tasks/Task61/Task61';\nimport { Task621 } from '../../tasks/Task621/Task621';\nimport { Task622 } from '../../tasks/Task622/Task622';\n\nexport class Week6 extends Week {\n\n    weekName = 'Неделя 6. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1 (Python)\"><Task61 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 1\"><Task621 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task622 /></AccordionTab>\n            </Accordion>\n        );\n    }\n}\n","export function sampleQuantile(level: number, sample: number[]) {\n    const index = sample.length * level;\n\n    const roundedIndex = Math.floor(index);\n\n    if (index !== roundedIndex) {\n        return sample[Math.floor(index)];\n    } else {\n        return (sample[roundedIndex - 1] + sample[roundedIndex]) / 2;\n    }\n}\n","import React from 'react';\nimport { SelectItem } from 'primereact/api';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { median } from '../../utils/median';\nimport { sampleQuantile } from '../../utils/sampleQuantile';\n\nconst citySelectItems: SelectItem[] = [\n    { label: 'Алтайский край', value: 0 },\n    { label: 'Амурская область', value: 1 },\n    { label: 'Архангельская область', value: 2 },\n    { label: 'Астраханская область', value: 3 },\n    { label: 'Белгородская область', value: 4 },\n    { label: 'Брянская область', value: 5 },\n    { label: 'Владимирская область', value: 6 },\n    { label: 'Волгоградская область', value: 7 },\n    { label: 'Вологодская область', value: 8 },\n    { label: 'Воронежская область', value: 9 },\n    { label: 'г. Москва', value: 10 },\n    { label: 'г. Санкт-Петербург', value: 11 },\n    { label: 'г. Севастополь', value: 12 },\n    { label: 'Еврейская АО', value: 13 },\n    { label: 'Забайкальский край', value: 14 },\n    { label: 'Ивановская область', value: 15 },\n    { label: 'Иркутская область', value: 16 },\n    { label: 'Кабардино-Балкарская Республика', value: 17 },\n    { label: 'Калининградская область', value: 18 },\n    { label: 'Калужская область', value: 19 },\n    { label: 'Камчатский край', value: 20 },\n    { label: 'Карачаево-Черкесская Республика', value: 21 },\n    { label: 'Кемеровская область', value: 22 },\n    { label: 'Кировская область', value: 23 },\n    { label: 'Костромская область', value: 24 },\n    { label: 'Краснодарский край', value: 25 },\n    { label: 'Красноярский край', value: 26 },\n    { label: 'Курганская область', value: 27 },\n    { label: 'Курская область', value: 28 },\n    { label: 'Ленинградская область', value: 29 },\n    { label: 'Липецкая область', value: 30 },\n    { label: 'Магаданская обл.', value: 31 },\n    { label: 'Московская обл.', value: 32 },\n    { label: 'Мурманская обл.', value: 33 },\n    { label: 'Ненецкий АО', value: 34 },\n    { label: 'Нижегородская область', value: 35 },\n    { label: 'Новгородская область', value: 36 },\n    { label: 'Новосибирская область', value: 37 },\n    { label: 'Омская область', value: 38 },\n    { label: 'Оренбургская область', value: 39 },\n    { label: 'Орловская область', value: 40 },\n    { label: 'Пензенская область', value: 41 },\n    { label: 'Пермский край', value: 42 },\n    { label: 'Приморский край', value: 43 },\n    { label: 'Псковская область', value: 44 },\n    { label: 'Республика Адыгея', value: 45 },\n    { label: 'Республика Алтай', value: 46 },\n    { label: 'Республика Башкортостан', value: 47 },\n    { label: 'Республика Бурятия', value: 48 },\n    { label: 'Республика Дагестан', value: 49 },\n    { label: 'Республика Ингушетия', value: 50 },\n    { label: 'Республика Калмыкия', value: 51 },\n    { label: 'Республика Карелия', value: 52 },\n    { label: 'Республика Коми', value: 53 },\n    { label: 'Республика Крым', value: 54 },\n    { label: 'Республика Марий Эл', value: 55 },\n    { label: 'Республика Мордовия', value: 56 },\n    { label: 'Республика Саха (Якутия)', value: 57 },\n    { label: 'Республика Северная Осетия - Алания', value: 58 },\n    { label: 'Республика Татарстан', value: 59 },\n    { label: 'Республика Тыва', value: 60 },\n    { label: 'Республика Хакасия', value: 61 },\n    { label: 'Ростовская область', value: 62 },\n    { label: 'Рязанская область', value: 63 },\n    { label: 'Самарская область', value: 64 },\n    { label: 'Саратовская область', value: 65 },\n    { label: 'Сахалинская обл.', value: 66 },\n    { label: 'Свердловская область', value: 67 },\n    { label: 'Смоленская область', value: 68 },\n    { label: 'Ставропольский край', value: 69 },\n    { label: 'Тамбовская область', value: 70 },\n    { label: 'Тверская область', value: 71 },\n    { label: 'Томская область', value: 72 },\n    { label: 'Тульская область', value: 73 },\n    { label: 'Тюменская обл.', value: 74 },\n    { label: 'Удмуртская Республика', value: 75 },\n    { label: 'Ульяновская область', value: 76 },\n    { label: 'Хабаровский край', value: 77 },\n    { label: 'Ханты-Мансийский АО (Югра)', value: 78 },\n    { label: 'Челябинская область', value: 79 },\n    { label: 'Чеченская Республика', value: 80 },\n    { label: 'Чувашская Республика', value: 81 },\n    { label: 'Чукотский АО', value: 82 },\n    { label: 'Ямало-Ненецкий АО', value: 83 },\n    { label: 'Ярославская область', value: 84 },\n];\n\nconst avgSalary: number[] = [25960, 43156, 47526, 32166, 31163, 27403, 31647, 30097, 36081, 31286, 78946, 58310,\n    31008, 39797, 40728, 26053, 42921, 25318, 32473, 38005, 71553, 25699, 37857, 27580, 27948, 33258, 44692, 27887,\n    30125, 42434, 30775, 101662, 50135, 56005, 77277, 32973, 30820, 36048, 32013, 29892, 26834, 30112, 34809, 42026,\n    27339, 27455, 37764, 33137, 37867, 24550, 25663, 25719, 39755, 48316, 28400, 28232, 26999, 65881, 26108, 35722,\n    35619, 37949, 30647, 31192, 33086, 26555, 73261, 37605, 29566, 28256, 26754, 30764, 39707, 33933, 61937, 31990,\n    27927, 46583, 62555, 34944, 26108, 27028, 96930, 86560, 33882];\n\ninterface Task7State {\n\n    cities: number[];\n    sampleIndices: [string, string, string];\n    intervalIndices: [string, string, string];\n}\n\nexport class Task7 extends Task<{}, Task7State> {\n\n    state: Task7State = {\n        cities: [],\n        sampleIndices: ['', '', ''],\n        intervalIndices: ['', '', '']\n    };\n\n    private checkIndices(indices: [string, string, string]) {\n        return indices.filter(Boolean).map(Number).filter(v => !isNaN(v)).length === 3;\n    }\n\n    protected checkParameters(): boolean {\n        const { sampleIndices, intervalIndices } = this.state;\n\n        return this.checkIndices(sampleIndices) && this.checkIndices(intervalIndices);\n    }\n\n    private onCitiesChange(e: { value: number[] }) {\n        this.setState({\n            ...this.state,\n\n            cities: e.value\n        });\n    }\n\n    private onIndexChange(name: 'sampleIndices' | 'intervalIndices', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const indices = [...this.state[name]];\n\n            indices[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [name]: indices });\n        }\n    }\n\n    protected renderParameters() {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n\n        return (\n            <>\n                Выберите города, <strong>не</strong> попавшие в выборку:&nbsp;\n                <MultiSelect filter value={cities} options={citySelectItems} style={{ verticalAlign: 'middle' }}\n                             onChange={this.onCitiesChange.bind(this)} />\n                <br />\n\n                Введите номера необходимых элементов выборки (<strong>X</strong>):&nbsp;\n                {[0, 1, 2].map(i => (\n                    <InputText key={i} value={sampleIndices[i]} onChange={this.onIndexChange('sampleIndices', i)} />\n                ))}\n\n                <ValidationIcon valid={this.checkIndices(sampleIndices)} />\n                <br />\n\n                Введите номера необходимых интервалов (<strong>A</strong>):&nbsp;\n                {[0, 1, 2].map(i => (\n                    <InputText key={i} value={intervalIndices[i]} onChange={this.onIndexChange('intervalIndices', i)} />\n                ))}\n\n                <ValidationIcon valid={this.checkIndices(intervalIndices)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer(): Promise<React.ReactNode> {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n        const sample = avgSalary.filter((_, i) => !cities.includes(i)).sort((a, b) => a - b);\n\n        const numericSampleIndices = sampleIndices.map(v => +v - 1);\n        const numericIntervalIndices = intervalIndices.map(v => +v - 1);\n\n        const a: number[] = [];\n        const intervalLength = (sample[sample.length - 1] - sample[0]) / 10;\n        for (let i = 0; i < 10; ++i) {\n            const intervalOffset = sample[0] + i * intervalLength;\n\n            a[i] = sample.filter((v) => v >= intervalOffset && v < intervalOffset + intervalLength).length;\n        }\n\n        const e = mean(sample);\n        const v = sampleVariance(sample, e);\n        const fixedV = v * sample.length / (sample.length - 1);\n        const m = median(sample);\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericSampleIndices.map(v => (\n                                <td key={v}>\n                                    <strong>X<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={sample[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericIntervalIndices.map(v => (\n                                <td key={v}>\n                                    <strong>A<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={a[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                Выборочное среднее:&nbsp;\n                <InputText readOnly value={e} />\n                <br />\n\n                Смещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={v} />\n                <br />\n\n                Несмещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={fixedV} />\n                <br />\n\n                Выборочная медиана:&nbsp;\n                <InputText readOnly value={m} />\n                <br />\n\n                Квантиль уровня <strong>0.25</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.25, sample)} />\n                <br />\n\n                Квантиль уровня <strong>0.75</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.75, sample)} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task7 } from '../../tasks/Task7/Task7';\n\nexport class Week7 extends Week {\n\n    weekName = 'Неделя 7. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (<Task7 />);\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\n\nimport { Task } from '../../components/Task/Task';\nimport { DistributionType, distributionTypesSelectItems } from '../../utils/distribution';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\n\ninterface Task8State {\n\n    sample?: number[];\n    distributionType?: DistributionType;\n    specificParameters: { [key: string]: string };\n}\n\nexport class Task8 extends Task<{}, Task8State> {\n\n    state: Task8State = { specificParameters: {} };\n\n    protected checkParameters(): boolean {\n        const { sample, distributionType, specificParameters } = this.state;\n\n        let specificParametersCheck: boolean = true;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n            case DistributionType.BINOMIAL:\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n                specificParametersCheck = false;\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersCheck = !!specificParameters.a && !isNaN(+specificParameters.a) &&\n                    !!specificParameters.b && !isNaN(+specificParameters.b);\n                break;\n\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersCheck = false;\n                break;\n        }\n\n        return !!sample && !!distributionType && specificParametersCheck;\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onDistributionTypeChange(e: { value: DistributionType }) {\n        this.setState({\n            ...this.state,\n\n            distributionType: e.value\n        });\n    }\n\n    private onSpecificParameterChange(name: 'a' | 'b') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                specificParameters: {\n                    ...this.state.specificParameters,\n\n                    [name]: e.currentTarget.value.trim()\n                }\n            });\n        }\n    }\n\n    protected renderParameters() {\n        const { distributionType, specificParameters } = this.state;\n\n        let specificParametersOutput: React.ReactNode;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n            case DistributionType.BINOMIAL:\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n                specificParametersOutput = (\n                    <>\n                        // TODO\n                    </>\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersOutput = (\n                    <>\n                        Четвёртое задание:\n                        <br />\n\n                        <strong>a</strong> =&nbsp;\n                        <InputText value={specificParameters.a ?? ''} onChange={this.onSpecificParameterChange('a')} />\n                        <ValidationIcon valid={!!specificParameters.a && !isNaN(+specificParameters.a)} />\n                        <br />\n\n                        <strong>b</strong> =&nbsp;\n                        <InputText value={specificParameters.b ?? ''} onChange={this.onSpecificParameterChange('b')} />\n                        <ValidationIcon valid={!!specificParameters.b && !isNaN(+specificParameters.b)} />\n                    </>\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersOutput = (\n                    <>\n                        // TODO\n                    </>\n                );\n                break;\n        }\n\n        return (\n            <>\n                Выборка для задания:&nbsp;\n                <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                <br />\n\n                Распределение:&nbsp;\n                <Dropdown value={distributionType} options={distributionTypesSelectItems}\n                          onChange={this.onDistributionTypeChange.bind(this)} />\n                <ValidationIcon valid={!!distributionType} />\n                <br />\n\n                {specificParametersOutput}\n            </>\n        );\n    }\n\n    private renderUniformAnswer(avg: number, variance: number): React.ReactNode {\n        const { sample, specificParameters } = this.state;\n\n        if (!sample) {\n            return;\n        }\n\n        const sqrt3Variance = Math.sqrt(3 * variance);\n        const b = sample[sample.length - 1];\n        const a = sample[0];\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={avg - sqrt3Variance} />\n                <br />\n\n                Оценка метода моментов <strong>b&#770;</strong>:&nbsp;\n                <InputText readOnly value={avg + sqrt3Variance} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>b</strong>:&nbsp;\n                <InputText readOnly value={b} />\n                <br />\n\n                Оценка метода моментов <strong>b&#770;</strong>:&nbsp;\n                <InputText readOnly value={(+specificParameters.b - +specificParameters.a) / (b - a)} />\n                <br />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, distributionType } = this.state;\n\n        if (!sample || !distributionType) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const sqAvg = mean(sample.map(x => x ** 2));\n        const sampleVariance = sqAvg - avg ** 2;\n\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n            case DistributionType.BINOMIAL:\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n                return (\n                    <>\n                        // TODO\n                    </>\n                );\n\n            case DistributionType.UNIFORM:\n                return this.renderUniformAnswer(avg, sampleVariance);\n\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                return (\n                    <>\n                        // TODO\n                    </>\n                );\n        }\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task8 } from '../../tasks/Task8/Task8';\n\nexport class Week8 extends Week {\n\n    weekName = 'Неделя 8. Обзор задач, решаемых статистикой (только равномерное распределение)';\n\n    protected renderContent() {\n        return (<Task8 />);\n    }\n}\n","import React from 'react';\n\nimport { Week6 } from '../../weeks/Week6/Week6';\nimport { Week7 } from '../../weeks/Week7/Week7';\n\nimport './App.css';\nimport { Panel } from 'primereact/panel';\nimport { Week8 } from '../../weeks/Week8/Week8';\n\nexport class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Panel header=\"Добро пожаловать!\">\n                    Это онлайн программа для решения задач из упражнений онлайн-курса Прикладная статистика.\n                    <br />\n\n                    Автор:&nbsp;\n                    <a href=\"https://byprogminer.ru/vk\" target=\"_blank\" rel=\"noopener noreferrer\">Доморацкий Эридан</a>\n                    <br />\n\n                    <a href=\"https://my.qiwi.com/Erydan-DMVuYwfjtW\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <small>(донатить сюда)</small>\n                    </a>\n                </Panel>\n\n                <Week6 />\n                <Week7 />\n                <Week8 />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}