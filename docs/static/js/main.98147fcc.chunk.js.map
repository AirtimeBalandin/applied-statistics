{"version":3,"sources":["utils/distribution.ts","components/Week/Week.tsx","components/DistributionSelector/DistributionSelector.tsx","components/LoadingContainer/LoadingContainer.tsx","weeks/Week6/Task1/Task1.tsx","components/Task/Task.tsx","weeks/Week6/Week6.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["DistributionType","Week","props","weekName","className","weekClassName","classNames","Array","isArray","push","join","this","header","toggleable","collapsed","renderContent","React","Component","distributionTypesSelectItems","BERNOULLI","BINOMIAL","GEOMETRIC","POISSON","UNIFORM","EXPONENTIAL","NORMAL","map","type","label","value","DistributionSelector","state","distributionParams","prevProps","prevState","snapshot","isEqual","setState","distributionType","mapValues","params","String","onDistributionChange","param","event","currentTarget","newDistribution","numericParams","Number","isNaN","p","n","l","a","b","d","onChange","normalSigmaSquare","name","field","paramsComponents","Fragment","key","e","onDistributionParamChange","options","onDistributionTypeChange","bind","defaultProps","LoadingContainer","loading","renderLoading","progress","minProgress","maxProgress","mode","children","Task1","randomSeed","distribution","onNChange","onRandomSeedChange","code","href","target","rel","taskClassName","answerPromise","omit","checkParameters","async","renderAnswer","answer","undefined","renderParameters","Week6","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98147fcc.chunk.js","sourcesContent":["import { SelectItem } from 'primereact/api';\n\nexport enum DistributionType {\n\n    BERNOULLI = 'Бернулли',\n\n    BINOMIAL = 'Биноминальное',\n\n    GEOMETRIC = 'Геометрическое',\n\n    POISSON = 'Пуассона',\n\n    UNIFORM = 'Равномерное',\n\n    EXPONENTIAL = 'Показательное',\n\n    NORMAL = 'Нормальное'\n}\n\nexport interface BernoulliDistribution {\n\n    type: DistributionType.BERNOULLI;\n    params: { p: number };\n}\n\nexport interface BinomialDistribution {\n\n    type: DistributionType.BINOMIAL;\n    params: {\n        n: number;\n        p: number;\n    }\n}\n\nexport interface GeometricDistribution {\n\n    type: DistributionType.GEOMETRIC;\n    params: { p: number };\n}\n\nexport interface PoissonDistribution {\n\n    type: DistributionType.POISSON;\n    params: { l: number };\n}\n\nexport interface UniformDistribution {\n\n    type: DistributionType.UNIFORM;\n    params: {\n        a: number;\n        b: number;\n    }\n}\n\nexport interface ExponentialDistribution {\n\n    type: DistributionType.EXPONENTIAL;\n    params: { l: number };\n}\n\nexport interface NormalDistribution {\n\n    type: DistributionType.NORMAL;\n    params: {\n        a: number;\n        d: number;\n    }\n}\n\nexport type Distribution =\n    BernoulliDistribution |\n    BinomialDistribution |\n    GeometricDistribution |\n    PoissonDistribution |\n    UniformDistribution |\n    ExponentialDistribution |\n    NormalDistribution;\n\nexport const distributionTypes = [\n    DistributionType.BERNOULLI,\n    DistributionType.BINOMIAL,\n    DistributionType.GEOMETRIC,\n    DistributionType.POISSON,\n    DistributionType.UNIFORM,\n    DistributionType.EXPONENTIAL,\n    DistributionType.NORMAL\n];\n\nexport const distributionTypesSelectItems: SelectItem[] = distributionTypes\n    .map(type => ({ label: type, value: type }));\n","import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nexport abstract class Week<P = {}, S = {}> extends React.Component<P, S> {\n\n    protected readonly abstract weekName: string;\n    protected readonly className?: string | string[];\n\n    private readonly weekClassName: string;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Week'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.weekClassName = classNames.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.weekClassName}>\n                <Panel header={this.weekName} toggleable collapsed>\n                    {this.renderContent()}\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { SelectItem } from 'primereact/api';\nimport mapValues from 'lodash/mapValues';\nimport isEqual from 'lodash/isEqual';\n\nimport { Distribution, DistributionType, distributionTypesSelectItems } from '../../utils/distribution';\n\nexport interface DistributionSelectorProps {\n\n    value?: Distribution;\n    normalSigmaSquare: boolean;\n\n    onChange(value?: Distribution): void;\n}\n\ninterface DistributionSelectorState {\n\n    distributionType?: DistributionType;\n    distributionParams: { [key: string]: string | undefined };\n}\n\nexport class DistributionSelector extends React.Component<DistributionSelectorProps, DistributionSelectorState> {\n\n    static defaultProps: DistributionSelectorProps = {\n\n        normalSigmaSquare: true,\n\n        onChange() {}\n    };\n\n    state: DistributionSelectorState = { distributionParams: {} };\n\n    componentDidUpdate(\n        prevProps: Readonly<DistributionSelectorProps>,\n        prevState: Readonly<DistributionSelectorState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(this.props.value, prevProps.value) && this.props.value) {\n            this.setState({\n                ...this.state,\n\n                distributionType: this.props.value.type,\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    ...mapValues(this.props.value.params, String)\n                }\n            });\n        }\n\n        if (!isEqual(this.state, prevState)) {\n            this.onDistributionChange();\n        }\n    }\n\n    private onDistributionTypeChange(value: SelectItem) {\n        this.setState({\n            ...this.state,\n\n            distributionType: value.value as DistributionType\n        });\n    }\n\n    private onDistributionParamChange(param: string, event: React.FormEvent<HTMLInputElement>) {\n        if (this.state.distributionParams) {\n            this.setState({\n                ...this.state,\n\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    [param]: event.currentTarget.value\n                }\n            });\n        }\n    }\n\n    private onDistributionChange() {\n        const { distributionType, distributionParams } = this.state;\n\n        let newDistribution: Distribution | undefined;\n        const numericParams = mapValues(distributionParams, Number);\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    }\n                }\n                break;\n\n            case DistributionType.BINOMIAL:\n                if (!isNaN(numericParams['n']) && !isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            n: numericParams['n'],\n                            p: numericParams['p']\n                        }\n                    }\n                }\n                break;\n\n            case DistributionType.GEOMETRIC:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    }\n                }\n                break;\n\n            case DistributionType.POISSON:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    }\n                }\n                break;\n\n            case DistributionType.UNIFORM:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['b'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            b: numericParams['b']\n                        }\n                    }\n                }\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    }\n                }\n                break;\n\n            case DistributionType.NORMAL:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['d'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            d: numericParams['d']\n                        }\n                    }\n                }\n                break;\n        }\n\n        this.props.onChange(newDistribution);\n    }\n\n    render() {\n        const { normalSigmaSquare } = this.props;\n        const { distributionType, distributionParams } = this.state;\n\n        const params: { name: string, field: string }[] = [];\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.BINOMIAL:\n                params.push({ name: 'n', field: 'n'});\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.GEOMETRIC:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.POISSON:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.UNIFORM:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: 'b', field: 'b'});\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.NORMAL:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: '\\u03C3' + (normalSigmaSquare ? '\\u00B2' : ''), field: 'd'});\n                break;\n        }\n\n        const paramsComponents: JSX.Element[] = params\n            .map(param => (\n                <React.Fragment key={param.name}>\n                    <strong>{param.name}</strong> =\n                    <InputText value={distributionParams ? distributionParams[param.field] ?? '' : ''}\n                               onChange={e => this.onDistributionParamChange(param.field, e)} /><br />\n                </React.Fragment>\n            ));\n\n        return (\n            <>\n                Распределение: <Dropdown value={this.state.distributionType} options={distributionTypesSelectItems}\n                                         onChange={this.onDistributionTypeChange.bind(this)} /><br />\n\n                {paramsComponents}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { ProgressBar } from 'primereact/progressbar';\n\nexport interface LoadingContainerProps {\n\n    loading: boolean;\n    progress?: number;\n    minProgress: number;\n    maxProgress: number;\n}\n\nexport class LoadingContainer<P = {}, S = {}> extends React.Component<P & React.PropsWithChildren<LoadingContainerProps>, S> {\n\n    static defaultProps: LoadingContainerProps = {\n\n        loading: false,\n        minProgress: 0,\n        maxProgress: 100\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return this.renderLoading();\n        } else {\n            return this.renderContent();\n        }\n    }\n\n    protected renderLoading(): React.ReactNode {\n        const { progress, minProgress, maxProgress } = this.props;\n\n        return (\n            <ProgressBar mode={progress ? 'determinate' : 'indeterminate'} value={typeof progress === 'number' ?\n                (progress - minProgress) / (maxProgress - minProgress) : 0} />\n        );\n    }\n\n    protected renderContent(): React.ReactNode {\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Distribution, DistributionType } from '../../../utils/distribution';\nimport { DistributionSelector } from '../../../components/DistributionSelector/DistributionSelector';\nimport { Task } from '../../../components/Task/Task';\n\ninterface Task1State {\n\n    n: string;\n    distribution?: Distribution;\n    randomSeed: string;\n}\n\nexport class Task1 extends Task<{}, Task1State> {\n\n    state: Task1State = { n: '', randomSeed: '' };\n\n    private onNChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            n: e.currentTarget.value\n        })\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    private onRandomSeedChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            randomSeed: e.currentTarget.value\n        })\n    }\n\n    protected checkParameters(): boolean {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n && +n;\n        const numericRandomSeed = randomSeed && +randomSeed;\n\n        return !!(numericN && distribution && numericRandomSeed);\n    }\n\n    protected renderParameters() {\n        const { n, distribution, randomSeed } = this.state;\n\n        return (\n            <>\n                Объём (<strong>n</strong> =): <InputText value={n} onChange={this.onNChange.bind(this)} /><br />\n                <DistributionSelector normalSigmaSquare={false} value={distribution} onChange={this.onDistributionChange.bind(this)} />\n                <strong>random seed</strong> = <InputText value={randomSeed} onChange={this.onRandomSeedChange.bind(this)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, distribution, randomSeed } = this.state;\n\n        if (!n || !distribution || !randomSeed) {\n            return;\n        }\n\n        let code = `\nimport numpy as np\nnp.random.seed(${randomSeed})\n`;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                code += `sample = np.random.binomial(1, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.BINOMIAL:\n                code += `sample = np.random.binomial(${distribution.params.n}, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.GEOMETRIC:\n                code += `sample = np.random.geometric(${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.POISSON:\n                code += `sample = np.random.poisson(${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.UNIFORM:\n                code += `sample = np.random.uniform(${distribution.params.a}, ${distribution.params.b}, ${n})`;\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                code += `sample = np.random.exponential(1 / ${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.NORMAL:\n                code += `sample = np.random.normal(${distribution.params.a}, ${distribution.params.d}, ${n})`;\n                break;\n        }\n\n        code += `\nprint(\",\".join([str(round(sample[i], 2)) for i in range(5)]))\nprint(\",\".join([str(round(sample[${+n - 5} + i], 2)) for i in range(5)]))\nprint(sum(sample)/len(sample))\n`;\n\n        return (\n            <>\n                Выполните следущий код в Python-интерпретаторе (например, на сайте <a href=\"https://repl.it\" target=\"_blank\" rel=\"noopener noreferrer\">https://repl.it</a>):\n\n                <pre>{code}</pre>\n\n                И скопируйте выведенные на экран строки в поля для ответов.\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { LoadingContainer } from '../LoadingContainer/LoadingContainer';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\ninterface TaskState {\n\n    answer?: React.ReactNode;\n}\n\nexport abstract class Task<P = {}, S = {}> extends React.Component<React.PropsWithChildren<P>, S & TaskState> {\n\n    protected readonly className?: string | string[];\n\n    private readonly taskClassName: string;\n    private answerPromise?: Promise<React.ReactNode>;\n\n    state = {} as S & TaskState;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Task'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.taskClassName = classNames.join(' ');\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<React.PropsWithChildren<P>>,\n        prevState: Readonly<S & TaskState>,\n        snapshot?: any\n    ): void {\n        if (!isEqual(omit(this.state, 'answer'), omit(prevState, 'answer')) && this.checkParameters()) {\n            (async () => {\n                const answerPromise = this.answerPromise = this.renderAnswer();\n\n                this.setState({ ...this.state, answer: undefined });\n\n                const answer = await answerPromise;\n\n                if (this.answerPromise === answerPromise) {\n                    this.setState({ ...this.state, answer });\n                }\n            })();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.taskClassName}>\n                {this.renderParameters()}\n\n                {this.checkParameters() && (<>\n                    <hr />\n\n                    {this.renderLoading()}\n                </>)}\n            </div>\n        );\n    }\n\n    protected abstract checkParameters(): boolean;\n    protected abstract renderParameters(): React.ReactNode;\n    protected abstract async renderAnswer(): Promise<React.ReactNode>;\n\n    protected renderLoading(): React.ReactNode {\n        const { answer } = this.state;\n\n        return (\n            <LoadingContainer loading={!answer}>\n                {answer}\n            </LoadingContainer>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task1 } from './Task1/Task1';\n\nexport class Week6 extends Week {\n\n    weekName = 'Неделя 6. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (\n            <Accordion>\n                <AccordionTab header=\"Упражнение 1 (Python)\"><Task1 /></AccordionTab>\n            </Accordion>\n        )\n    }\n}\n","import React from 'react';\n\nimport { Week6 } from '../../weeks/Week6/Week6';\n\nimport './App.css';\n\nexport class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Week6 />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}