{"version":3,"sources":["components/Week/Week.tsx","components/LoadingContainer/LoadingContainer.tsx","utils/distribution.ts","components/Task/Task.tsx","components/ValidationIcon/ValidationIcon.tsx","components/InputDistributionType/InputDistributionType.tsx","components/InputDistribution/InputDistribution.tsx","utils/filterObject.ts","tasks/Task61/Task61.tsx","utils/sampleVariance.tsx","utils/median.ts","utils/normalizeNumber.ts","tasks/Task621/Task621.tsx","components/FetchingInputSample/FetchingInputSample.tsx","tasks/Task622/Task622.tsx","weeks/Week6/Week6.tsx","utils/sampleQuantile.ts","tasks/Task7/Task7.tsx","weeks/Week7/Week7.tsx","tasks/Task8/Task8.tsx","weeks/Week8/Week8.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Week","props","weekName","className","weekClassName","classNames","Array","isArray","push","join","this","header","toggleable","collapsed","renderContent","React","Component","LoadingContainer","loading","renderLoading","progress","minProgress","maxProgress","mode","value","children","defaultProps","DistributionType","Task","taskClassName","answerPromise","state","prevProps","prevState","snapshot","isEqual","omit","checkParameters","a","async","renderAnswer","setState","answer","undefined","renderParameters","BERNOULLI","BINOMIAL","GEOMETRIC","POISSON","UNIFORM","EXPONENTIAL","NORMAL","ValidationIcon","valid","clickable","onClick","style","cursor","InputDistributionType","itemTemplate","dropdownTemplate","options","selectItems","onChange","e","option","mnemonic","mnemonics","get","label","Map","InputDistribution","distributionParams","distributionType","type","mapValues","params","String","onDistributionChange","param","event","currentTarget","trim","newDistribution","numericParams","object","predicate","ret","forEach","v","k","filterObject","s","Boolean","Number","isNaN","p","n","l","b","d","normalSigmaSquare","name","field","paramsComponents","map","Fragment","key","onDistributionParamChange","onDistributionTypeChange","bind","Task61","randomSeed","distribution","numericN","numericRandomSeed","onNChange","onRandomSeedChange","code","href","target","rel","sampleVariance","sample","expected","mean","median","length","normalizeNumber","scale","c","Math","round","toFixed","Task621","alchemistsRegexp","alchemists","test","placeholder","onAlchemistsChange","replace","split","sort","counts","i","count","filter","m","maxCount","maxBy","f","readOnly","sqrt","FetchingInputSample","previousFetch","Date","now","urlRegex","proxyUrl","url","reload","Promise","resolve","setTimeout","max","fetch","response","ok","text","sampleText","console","log","onUrlChange","onIconClick","Task622","sample10","sample10000","onSample10Change","onSample10000Change","e10","e10000","d10","d10000","output","property","trueP","trueD","abs","Week6","multiple","sampleQuantile","level","index","roundedIndex","floor","citySelectItems","avgSalary","Task7","cities","sampleIndices","intervalIndices","indices","checkIndices","verticalAlign","onCitiesChange","onIndexChange","_","includes","numericSampleIndices","numericIntervalIndices","intervalLength","intervalOffset","fixedV","Week7","Task8","specificParameters","specificParametersCheck","specificParametersOutput","onSpecificParameterChange","onSampleChange","avg","variance","sqrt3Variance","sqAvg","x","renderUniformAnswer","Week8","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a59df25.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nexport abstract class Week<P = {}, S = {}> extends React.Component<P, S> {\n\n    protected readonly abstract weekName: string;\n    protected readonly className?: string | string[];\n\n    private readonly weekClassName: string;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Week'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.weekClassName = classNames.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.weekClassName}>\n                <Panel header={this.weekName} toggleable collapsed>\n                    {this.renderContent()}\n                </Panel>\n            </div>\n        );\n    }\n\n    protected abstract renderContent(): React.ReactNode;\n}\n","import React from 'react';\nimport { ProgressBar } from 'primereact/progressbar';\n\nexport interface LoadingContainerProps {\n\n    loading: boolean;\n    progress?: number;\n    minProgress: number;\n    maxProgress: number;\n}\n\nexport class LoadingContainer<P = {}, S = {}> extends React.Component<P & React.PropsWithChildren<LoadingContainerProps>, S> {\n\n    static defaultProps: LoadingContainerProps = {\n\n        loading: false,\n        minProgress: 0,\n        maxProgress: 100\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return this.renderLoading();\n        } else {\n            return this.renderContent();\n        }\n    }\n\n    protected renderLoading(): React.ReactNode {\n        const { progress, minProgress, maxProgress } = this.props;\n\n        return (\n            <ProgressBar mode={progress ? 'determinate' : 'indeterminate'} value={typeof progress === 'number' ?\n                (progress - minProgress) / (maxProgress - minProgress) : 0} />\n        );\n    }\n\n    protected renderContent(): React.ReactNode {\n        return this.props.children;\n    }\n}\n","\nexport enum DistributionType {\n\n    BERNOULLI = 1,\n    BINOMIAL,\n    GEOMETRIC,\n    POISSON,\n    UNIFORM,\n    EXPONENTIAL,\n    NORMAL\n}\n\nexport interface BernoulliDistribution {\n\n    type: DistributionType.BERNOULLI;\n    params: { p: number };\n}\n\nexport interface BinomialDistribution {\n\n    type: DistributionType.BINOMIAL;\n    params: {\n        n: number;\n        p: number;\n    }\n}\n\nexport interface GeometricDistribution {\n\n    type: DistributionType.GEOMETRIC;\n    params: { p: number };\n}\n\nexport interface PoissonDistribution {\n\n    type: DistributionType.POISSON;\n    params: { l: number };\n}\n\nexport interface UniformDistribution {\n\n    type: DistributionType.UNIFORM;\n    params: {\n        a: number;\n        b: number;\n    }\n}\n\nexport interface ExponentialDistribution {\n\n    type: DistributionType.EXPONENTIAL;\n    params: { l: number };\n}\n\nexport interface NormalDistribution {\n\n    type: DistributionType.NORMAL;\n    params: {\n        a: number;\n        d: number;\n    }\n}\n\nexport type Distribution =\n    BernoulliDistribution |\n    BinomialDistribution |\n    GeometricDistribution |\n    PoissonDistribution |\n    UniformDistribution |\n    ExponentialDistribution |\n    NormalDistribution;\n\nexport const distributionTypes = [\n    DistributionType.BERNOULLI,\n    DistributionType.BINOMIAL,\n    DistributionType.GEOMETRIC,\n    DistributionType.POISSON,\n    DistributionType.UNIFORM,\n    DistributionType.EXPONENTIAL,\n    DistributionType.NORMAL\n];\n","import React from 'react';\nimport { LoadingContainer } from '../LoadingContainer/LoadingContainer';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\ninterface TaskState {\n\n    answer?: React.ReactNode;\n}\n\nexport abstract class Task<P = {}, S = {}> extends React.Component<React.PropsWithChildren<P>, S & TaskState> {\n\n    protected readonly className?: string | string[];\n\n    private readonly taskClassName: string;\n    private answerPromise?: Promise<React.ReactNode>;\n\n    state = {} as S & TaskState;\n\n    protected constructor(props: P) {\n        super(props);\n\n        const classNames = ['Task'];\n        if (this.className) {\n            if (Array.isArray(this.className)) {\n                classNames.push(...this.className);\n            } else {\n                classNames.push(this.className);\n            }\n        }\n\n        this.taskClassName = classNames.join(' ');\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<React.PropsWithChildren<P>>,\n        prevState: Readonly<S & TaskState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, 'answer'), omit(prevState, 'answer')) && this.checkParameters()) {\n            (async () => {\n                const answerPromise = this.answerPromise = this.renderAnswer();\n                this.setState({ ...this.state, answer: undefined });\n\n                const answer = await answerPromise;\n                if (this.answerPromise === answerPromise) {\n                    this.setState({ ...this.state, answer });\n                }\n            })();\n        }\n    }\n\n    render() {\n        return (\n            <div className={this.taskClassName}>\n                {this.renderParameters()}\n\n                {this.checkParameters() && (\n                    <>\n                        <hr />\n\n                        {this.renderLoading()}\n                        </>\n                )}\n            </div>\n        );\n    }\n\n    protected abstract checkParameters(): boolean;\n    protected abstract renderParameters(): React.ReactNode;\n    protected abstract async renderAnswer(): Promise<React.ReactNode>;\n\n    protected renderLoading(): React.ReactNode {\n        const { answer } = this.state;\n\n        return (\n            <LoadingContainer loading={!answer}>\n                {answer}\n            </LoadingContainer>\n        );\n    }\n}\n","import React from 'react';\n\nexport interface ValidationIconProps {\n\n    valid?: boolean;\n    clickable: boolean;\n\n    onClick(): void;\n}\n\nexport class ValidationIcon extends React.Component<ValidationIconProps> {\n\n    static defaultProps: ValidationIconProps = {\n\n        clickable: false,\n\n        onClick() {}\n    };\n\n    render() {\n        const { valid, clickable, onClick } = this.props;\n\n        if (valid === undefined) {\n            return clickable\n                ? (<i className=\"pi pi-spin pi-replay\" />)\n                : (<i className=\"pi pi-spin pi-spinner\" />);\n        } else {\n            return valid\n                ? (<i className=\"pi pi-check\" />)\n                : clickable\n                    ? (<i className=\"pi pi-replay\" style={{ cursor: 'pointer' }} onClick={onClick} />)\n                    : (<i className=\"pi pi-times\" />);\n        }\n    }\n}\n","import React from 'react';\nimport { Dropdown } from 'primereact/dropdown';\nimport { SelectItem } from 'primereact/api';\n\nimport { DistributionType } from '../../utils/distribution';\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface InputDistributionTypeProps {\n\n    value?: DistributionType,\n\n    onChange(value?: DistributionType): void;\n}\n\nexport class InputDistributionType extends React.Component<InputDistributionTypeProps> {\n\n    static defaultProps: InputDistributionTypeProps = { onChange() {} };\n\n    private static selectItems: SelectItem[] = [\n        { label: 'Бернулли', value: DistributionType.BERNOULLI },\n        { label: 'Биноминальное', value: DistributionType.BINOMIAL },\n        { label: 'Геометрическое', value: DistributionType.GEOMETRIC },\n        { label: 'Пуассона', value: DistributionType.POISSON },\n        { label: 'Равномерное', value: DistributionType.UNIFORM },\n        { label: 'Показательное', value: DistributionType.EXPONENTIAL },\n        { label: 'Нормальное', value: DistributionType.NORMAL }\n    ];\n\n    private static mnemonics = new Map<DistributionType, [string, string]>([\n        [DistributionType.BERNOULLI, ['B', 'p']],\n        [DistributionType.BINOMIAL, ['Bin', 'n,p']],\n        [DistributionType.GEOMETRIC, ['G', 'p']],\n        [DistributionType.POISSON, ['\\u03A0', '\\u03BB']],\n        [DistributionType.UNIFORM, ['U', 'a,b']],\n        [DistributionType.EXPONENTIAL, ['Exp', '\\u03BB']],\n        [DistributionType.NORMAL, ['N', 'a,\\u03C3\\u00B2']],\n    ]);\n\n    private static dropdownTemplate(option: SelectItem): React.ReactNode {\n        const mnemonic = InputDistributionType.mnemonics.get(option.value)!;\n\n        return (<>{option.label}&nbsp;(<strong>{mnemonic[0]}<sub>{mnemonic[1]}</sub></strong>)</>);\n    }\n\n    render() {\n        return (\n            <>\n                <Dropdown itemTemplate={InputDistributionType.dropdownTemplate}\n                          options={InputDistributionType.selectItems} value={this.props.value}\n                          onChange={(e: { value: DistributionType }) => this.props.onChange(e.value)} />\n                <ValidationIcon valid={!!this.props.value} />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport mapValues from 'lodash/mapValues';\nimport isEqual from 'lodash/isEqual';\n\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { filterObject } from '../../utils/filterObject';\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\nimport { InputDistributionType } from '../InputDistributionType/InputDistributionType';\n\nexport interface DistributionSelectorProps {\n\n    value?: Distribution;\n    normalSigmaSquare: boolean;\n\n    onChange(value?: Distribution): void;\n}\n\ninterface DistributionSelectorState {\n\n    distributionType?: DistributionType;\n    distributionParams: { [key: string]: string | undefined };\n}\n\nexport class InputDistribution extends React.Component<DistributionSelectorProps, DistributionSelectorState> {\n\n    static defaultProps: DistributionSelectorProps = {\n\n        normalSigmaSquare: true,\n\n        onChange() {}\n    };\n\n    state: DistributionSelectorState = { distributionParams: {} };\n\n    componentDidUpdate(\n        prevProps: Readonly<DistributionSelectorProps>,\n        prevState: Readonly<DistributionSelectorState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(this.props.value, prevProps.value) && this.props.value) {\n            this.setState({\n                ...this.state,\n\n                distributionType: this.props.value.type,\n                distributionParams: {\n                    ...this.state.distributionParams,\n\n                    ...mapValues(this.props.value.params, String)\n                }\n            });\n        }\n\n        if (!isEqual(this.state, prevState)) {\n            this.onDistributionChange();\n        }\n    }\n\n    private onDistributionTypeChange(distributionType: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onDistributionParamChange(param: string, event: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            distributionParams: {\n                ...this.state.distributionParams,\n\n                [param]: event.currentTarget.value.trim()\n            }\n        });\n    }\n\n    private onDistributionChange() {\n        const { distributionType, distributionParams } = this.state;\n\n        const numericParams = mapValues(\n            filterObject(\n                mapValues(distributionParams, s => s ? s.trim() : undefined),\n                Boolean\n            ),\n            Number\n        );\n\n        let newDistribution: Distribution | undefined;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    };\n                }\n                break;\n\n            case DistributionType.BINOMIAL:\n                if (!isNaN(numericParams['n']) && !isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            n: numericParams['n'],\n                            p: numericParams['p']\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.GEOMETRIC:\n                if (!isNaN(numericParams['p'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { p: numericParams['p'] }\n                    };\n                }\n                break;\n\n            case DistributionType.POISSON:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    };\n                }\n                break;\n\n            case DistributionType.UNIFORM:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['b'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            b: numericParams['b']\n                        }\n                    };\n                }\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                if (!isNaN(numericParams['l'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: { l: numericParams['l'] }\n                    };\n                }\n                break;\n\n            case DistributionType.NORMAL:\n                if (!isNaN(numericParams['a']) && !isNaN(numericParams['d'])) {\n                    newDistribution = {\n                        type: distributionType,\n                        params: {\n                            a: numericParams['a'],\n                            d: numericParams['d']\n                        }\n                    };\n                }\n                break;\n        }\n\n        this.props.onChange(newDistribution);\n    }\n\n    render() {\n        const { normalSigmaSquare } = this.props;\n        const { distributionType, distributionParams } = this.state;\n\n        const params: { name: string, field: string }[] = [];\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.BINOMIAL:\n                params.push({ name: 'n', field: 'n'});\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.GEOMETRIC:\n                params.push({ name: 'p', field: 'p'});\n                break;\n\n            case DistributionType.POISSON:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.UNIFORM:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: 'b', field: 'b'});\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                params.push({ name: '\\u03BB', field: 'l'});\n                break;\n\n            case DistributionType.NORMAL:\n                params.push({ name: 'a', field: 'a'});\n                params.push({ name: '\\u03C3' + (normalSigmaSquare ? '\\u00B2' : ''), field: 'd'});\n                break;\n        }\n\n        const paramsComponents: JSX.Element[] = params\n            .map(param => {\n                const value = distributionParams[param.field];\n\n                return (\n                    <React.Fragment key={param.name}>\n                        <strong>{param.name}</strong> =&nbsp;\n                        <InputText value={value ?? ''} onChange={e => this.onDistributionParamChange(param.field, e)} />\n                        <ValidationIcon valid={!!value?.trim() && !isNaN(+value)} />\n                        <br />\n                    </React.Fragment>\n                );\n            });\n\n        return (\n            <>\n                Распределение:&nbsp;\n                <InputDistributionType value={this.state.distributionType}\n                                       onChange={this.onDistributionTypeChange.bind(this)} />\n                <br />\n\n                {paramsComponents}\n            </>\n        );\n    }\n}\n","import forEach from 'lodash/forEach'\n\nexport function filterObject<V = any, K extends keyof any = keyof {}>(object: Record<K, V>, predicate: (v: V, k: K) => boolean) {\n    const ret: Record<K, V> = {} as Record<K, V>;\n\n    forEach(object, (v, k) => {\n        if (predicate(v, k as K)) {\n            ret[k as K] = v;\n        }\n    });\n\n    return ret;\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { InputDistribution } from '../../components/InputDistribution/InputDistribution';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\n\ninterface Task61State {\n\n    n: string;\n    distribution?: Distribution;\n    randomSeed: string;\n}\n\nexport class Task61 extends Task<{}, Task61State> {\n\n    state: Task61State = { n: '', randomSeed: '' };\n\n    private onNChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            n: e.currentTarget.value.trim()\n        });\n    }\n\n    private onDistributionChange(distribution?: Distribution) {\n        this.setState({ ...this.state, distribution });\n    }\n\n    private onRandomSeedChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            randomSeed: e.currentTarget.value.trim()\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n ? +n : undefined;\n        const numericRandomSeed = randomSeed ? +randomSeed : undefined;\n\n        return numericN !== undefined && !isNaN(numericN) && !!distribution &&\n            numericRandomSeed !== undefined && !isNaN(numericRandomSeed);\n    }\n\n    protected renderParameters() {\n        const { n, distribution, randomSeed } = this.state;\n\n        const numericN = n ? +n : undefined;\n        const numericRandomSeed = randomSeed ? +randomSeed : undefined;\n\n        return (\n            <>\n                Объём (<strong>n</strong> =):&nbsp;\n                <InputText value={n} onChange={this.onNChange.bind(this)} />\n                <ValidationIcon valid={numericN !== undefined && !isNaN(numericN)} />\n                <br />\n\n                <InputDistribution normalSigmaSquare={false} value={distribution}\n                                   onChange={this.onDistributionChange.bind(this)} />\n\n                <strong>random seed</strong> =&nbsp;\n                <InputText value={randomSeed} onChange={this.onRandomSeedChange.bind(this)} />\n                <ValidationIcon valid={numericRandomSeed !== undefined && !isNaN(numericRandomSeed)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { n, distribution, randomSeed } = this.state;\n\n        if (!n || !distribution || !randomSeed) {\n            return;\n        }\n\n        let code = `\nimport numpy as np\nnp.random.seed(${randomSeed})\n`;\n\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                code += `sample = np.random.binomial(1, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.BINOMIAL:\n                code += `sample = np.random.binomial(${distribution.params.n}, ${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.GEOMETRIC:\n                code += `sample = np.random.geometric(${distribution.params.p}, ${n})`;\n                break;\n\n            case DistributionType.POISSON:\n                code += `sample = np.random.poisson(${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.UNIFORM:\n                code += `sample = np.random.uniform(${distribution.params.a}, ${distribution.params.b}, ${n})`;\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                code += `sample = np.random.exponential(1 / ${distribution.params.l}, ${n})`;\n                break;\n\n            case DistributionType.NORMAL:\n                code += `sample = np.random.normal(${distribution.params.a}, ${distribution.params.d}, ${n})`;\n                break;\n        }\n\n        code += `\nprint(\",\".join([str(round(sample[i], 2)) for i in range(5)]))\nprint(\",\".join([str(round(sample[${+n - 5} + i], 2)) for i in range(5)]))\nprint(sum(sample)/len(sample))\n`;\n\n        return (\n            <>\n                Выполните следущий код в Python-интерпретаторе (например, на сайте <a href=\"https://repl.it\" target=\"_blank\" rel=\"noopener noreferrer\">repl.it</a>):\n\n                <pre>{code}</pre>\n\n                И скопируйте выведенные на экран строки в поля для ответов.\n            </>\n        );\n    }\n}\n","import mean from 'lodash/mean';\n\nexport function sampleVariance(sample: number[], expected?: number) {\n    const e = expected ? expected : mean(sample);\n\n    return mean(sample.map(v => (v - e) ** 2));\n}\n","export function median(sample: number[]) {\n    return sample.length % 2 === 0\n        ? (sample[sample.length / 2 - 1] + sample[sample.length / 2]) / 2\n        : sample[(sample.length - 1) / 2];\n}\n","export function normalizeNumber(n: number, scale: number = 15) {\n    const c = 10 ** scale;\n\n    return +(Math.round(n * c) / c).toFixed(scale);\n}\n","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport maxBy from 'lodash/maxBy';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { median } from '../../utils/median';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\n\ninterface Task621State {\n\n    alchemists: string;\n}\n\ninterface CountObject {\n\n    value: number;\n    count: number;\n}\n\nexport class Task621 extends Task<{}, Task621State> {\n\n    private alchemistsRegexp = /^( *\\()?( *\\d+( *,)?)* *\\d+? *(\\) *)?$/;\n\n    state: Task621State = { alchemists: '' };\n\n    private onAlchemistsChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            alchemists: e.currentTarget.value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        return this.alchemistsRegexp.test(this.state.alchemists);\n    }\n\n    protected renderParameters() {\n        const { alchemists } = this.state;\n\n        return (\n            <>\n                Выборка: <InputText placeholder=\"(a, b, c...)\" value={alchemists}\n                                    onChange={this.onAlchemistsChange.bind(this)} />\n                <ValidationIcon valid={this.alchemistsRegexp.test(alchemists)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { alchemists } = this.state;\n\n        if (!alchemists) {\n            return;\n        }\n\n        const sample = alchemists.replace(/[()]/g, '').trim()\n            .split(/[,\\s]+/).map(Number).sort((a, b) => a - b);\n\n        const counts: CountObject[] = [1, 2, 3, 4, 5, 6]\n            .map(i => ({value: i, count: sample.filter(v => v === i).length}));\n\n        const e = mean(sample);\n        const d = sampleVariance(sample, e);\n        const m = median(sample);\n\n        const maxCount = maxBy(counts, v => v.count)?.count;\n        const mode = counts.filter(v => v.count === maxCount)\n            .map(v => v.value).sort((a, b) => a - b)[0];\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                    {[(v: CountObject) => v.value < 4, (v: CountObject) => v.value > 3].map(f => (\n                        <tr key={String(f)}>\n                            {counts.filter(f).map(v => (\n                                <td key={v.value}>\n                                    P(&#958;<sup>*</sup> = {v.value}) =&nbsp;\n                                    <InputText readOnly value={v.count === 0 ? '0' : `${v.count} / ${sample.length}`} />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                Математическое ожидание: <InputText readOnly value={normalizeNumber(e)} /><br />\n                Дисперсия: <InputText readOnly value={normalizeNumber(d)} /><br />\n                Среднеквадратическое отклонение: <InputText readOnly value={normalizeNumber(Math.sqrt(d))} /><br />\n                Медиана: <InputText readOnly value={m} /><br />\n                Мода: <InputText readOnly value={mode} /><br />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport { InputText } from 'primereact/inputtext';\n\nimport { ValidationIcon } from '../ValidationIcon/ValidationIcon';\n\nexport interface FetchingInputSampleProps {\n\n    onChange(sample?: number[]): void;\n}\n\ninterface FetchingInputSampleState {\n\n    url: string;\n    loading: boolean;\n    sample?: number[];\n}\n\nexport class FetchingInputSample extends React.Component<FetchingInputSampleProps, FetchingInputSampleState> {\n\n    private previousFetch: number = Date.now();\n\n    private urlRegex = /^[^:/?#]+:\\/\\/[^/?#]*[^?#]*(\\?([^#]*))?(#(.*))?$/;\n    private proxyUrl = 'https://proxy.byprogminer.ru/?';\n\n    state: FetchingInputSampleState = {\n        url: '',\n        loading: false\n    };\n\n    componentDidUpdate(\n        prevProps: Readonly<FetchingInputSampleProps>,\n        prevState: Readonly<FetchingInputSampleState>,\n        snapshot?: any\n    ) {\n        if (!isEqual(omit(this.state, ['loading', 'sample']), omit(prevState, ['loading', 'sample']))) {\n            this.reload();\n        }\n    }\n\n    private reload() {\n        const { url } = this.state;\n\n        (async () => {\n            try {\n                if (this.urlRegex.test(url)) {\n                    await new Promise(resolve =>\n                        setTimeout(resolve, Math.max(0, this.previousFetch + 100 - Date.now())));\n\n                    this.previousFetch = Date.now();\n                    const response = await fetch(this.proxyUrl + url);\n\n                    if (response.ok) {\n                        const sampleText = await response.text();\n                        const sample = sampleText.split('\\n')\n                            .map(s => s.trim()).filter(Boolean).map(Number)\n                            .filter(v => !isNaN(v)).sort((a, b) => a - b);\n\n                        if (sample.length > 0) {\n                            if (this.state.url === url) {\n                                this.setState({ ...this.state, loading: false, sample });\n                                this.props.onChange(sample);\n                            }\n\n                            return;\n                        }\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n\n            this.setState({ ...this.state, loading: false, sample: undefined });\n            this.props.onChange(undefined);\n        })();\n    }\n\n    private onUrlChange(e: React.FormEvent<HTMLInputElement>) {\n        this.setState({\n            ...this.state,\n\n            url: e.currentTarget.value.trim(),\n            loading: true\n        });\n    }\n\n    private onIconClick() {\n        this.setState({ ...this.state, loading: true });\n        this.reload();\n    }\n\n    render() {\n        const { url, loading, sample } = this.state;\n\n        return (\n            <>\n                <InputText placeholder=\"URL-адрес выборки\" value={url} onChange={this.onUrlChange.bind(this)} />\n                <ValidationIcon clickable={this.urlRegex.test(url)} valid={loading ? undefined : !!sample}\n                                onClick={this.onIconClick.bind(this)} />\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { Distribution, DistributionType } from '../../utils/distribution';\nimport { InputDistribution } from '../../components/InputDistribution/InputDistribution';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\n\ninterface Task622State {\n\n    sample10?: number[];\n    sample10000?: number[];\n    distribution?: Distribution;\n}\n\nexport class Task622 extends Task<{}, Task622State> {\n\n    state: Task622State = {};\n\n    private onSample10Change(sample10?: number[]) {\n        this.setState({...this.state, sample10});\n    }\n\n    private onSample10000Change(sample10000?: number[]) {\n        this.setState({...this.state, sample10000});\n    }\n\n    private onDistributionChange(value?: Distribution) {\n        this.setState({\n            ...this.state,\n\n            distribution: value\n        });\n    }\n\n    protected checkParameters(): boolean {\n        const { sample10, sample10000, distribution } = this.state;\n\n        return !!sample10 && !!sample10000 && !!distribution;\n    }\n\n    protected renderParameters() {\n        const { distribution } = this.state;\n\n        return (\n            <>\n                Выборка объёма <strong>n = 10</strong>:&nbsp;\n                <FetchingInputSample onChange={this.onSample10Change.bind(this)} />\n                <br />\n\n                Выборка объёма <strong>n = 10000</strong>:&nbsp;\n                <FetchingInputSample onChange={this.onSample10000Change.bind(this)} />\n                <br />\n\n                <InputDistribution normalSigmaSquare={false} value={distribution}\n                                   onChange={this.onDistributionChange.bind(this)} />\n            </>\n        );\n    }\n\n    private static output(property: string, v: number, p: number, trueP: number, d: number, trueD: number): React.ReactNode {\n        return (\n            <>\n                Для выборки объёма <strong>{v}</strong>:<br />\n                Оценка <strong>{property}</strong>: <InputText readOnly value={normalizeNumber(p)} /><br />\n                Погрешность оценки: <InputText readOnly value={normalizeNumber(Math.abs(p - trueP))} /><br />\n                Оценка дисперсии: <InputText readOnly value={normalizeNumber(d)} /><br />\n                Погрешность оценки дисперсии: <InputText readOnly value={normalizeNumber(Math.abs(d - trueD))} />\n            </>\n        )\n    }\n\n    protected async renderAnswer() {\n        const { sample10, sample10000, distribution } = this.state;\n\n        if (!sample10 || !sample10000 || !distribution) {\n            return;\n        }\n\n        const e10 = mean(sample10);\n        const e10000 = mean(sample10000);\n        const d10 = sampleVariance(sample10, e10);\n        const d10000 = sampleVariance(sample10000, e10000);\n\n        let output: (v: number, e: number, d: number) => React.ReactNode;\n        switch (distribution.type) {\n            case DistributionType.BERNOULLI:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e,\n                    distribution.params.p,\n                    d,\n                    distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.BINOMIAL:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    e / distribution.params.n,\n                    distribution.params.p,\n                    d,\n                    distribution.params.n * distribution.params.p * (1 - distribution.params.p)\n                );\n                break;\n\n            case DistributionType.GEOMETRIC:\n                output = (v, e, d) => Task622.output(\n                    'p',\n                    v,\n                    1 / e,\n                    distribution.params.p,\n                    d,\n                    (1 - distribution.params.p) / distribution.params.p ** 2\n                );\n                break;\n\n            case DistributionType.POISSON:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    e,\n                    distribution.params.l,\n                    d,\n                    distribution.params.l\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    2 * e - distribution.params.b,\n                    distribution.params.a,\n                    d,\n                    (distribution.params.b - distribution.params.a) ** 2 / 12\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n                output = (v, e, d) => Task622.output(\n                    '\\u03BB',\n                    v,\n                    1 / e,\n                    distribution.params.l,\n                    d,\n                    1 / distribution.params.l ** 2\n                );\n                break;\n\n            case DistributionType.NORMAL:\n                output = (v, e, d) => Task622.output(\n                    'a',\n                    v,\n                    e,\n                    distribution.params.a,\n                    d,\n                    distribution.params.d\n                );\n                break;\n        }\n\n        return (\n            <>\n                {output(10, e10, d10)}\n\n                <hr />\n\n                {output(10000, e10000, d10000)}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task61 } from '../../tasks/Task61/Task61';\nimport { Task621 } from '../../tasks/Task621/Task621';\nimport { Task622 } from '../../tasks/Task622/Task622';\n\nexport class Week6 extends Week {\n\n    weekName = 'Неделя 6. Обзор задач, решаемых статистикой';\n\n    protected renderContent() {\n        return (\n            <Accordion multiple>\n                <AccordionTab header=\"Упражнение 1 (Python)\"><Task61 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 1\"><Task621 /></AccordionTab>\n                <AccordionTab header=\"Упражнение 2. Задача 2\"><Task622 /></AccordionTab>\n            </Accordion>\n        );\n    }\n}\n","export function sampleQuantile(level: number, sample: number[]) {\n    const index = sample.length * level;\n\n    const roundedIndex = Math.floor(index);\n\n    if (index !== roundedIndex) {\n        return sample[Math.floor(index)];\n    } else {\n        return (sample[roundedIndex - 1] + sample[roundedIndex]) / 2;\n    }\n}\n","import React from 'react';\nimport { SelectItem } from 'primereact/api';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport mean from 'lodash/mean';\n\nimport { Task } from '../../components/Task/Task';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { sampleVariance } from '../../utils/sampleVariance';\nimport { median } from '../../utils/median';\nimport { sampleQuantile } from '../../utils/sampleQuantile';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\n\nconst citySelectItems: SelectItem[] = [\n    { label: 'Алтайский край', value: 0 },\n    { label: 'Амурская область', value: 1 },\n    { label: 'Архангельская область', value: 2 },\n    { label: 'Астраханская область', value: 3 },\n    { label: 'Белгородская область', value: 4 },\n    { label: 'Брянская область', value: 5 },\n    { label: 'Владимирская область', value: 6 },\n    { label: 'Волгоградская область', value: 7 },\n    { label: 'Вологодская область', value: 8 },\n    { label: 'Воронежская область', value: 9 },\n    { label: 'г. Москва', value: 10 },\n    { label: 'г. Санкт-Петербург', value: 11 },\n    { label: 'г. Севастополь', value: 12 },\n    { label: 'Еврейская АО', value: 13 },\n    { label: 'Забайкальский край', value: 14 },\n    { label: 'Ивановская область', value: 15 },\n    { label: 'Иркутская область', value: 16 },\n    { label: 'Кабардино-Балкарская Республика', value: 17 },\n    { label: 'Калининградская область', value: 18 },\n    { label: 'Калужская область', value: 19 },\n    { label: 'Камчатский край', value: 20 },\n    { label: 'Карачаево-Черкесская Республика', value: 21 },\n    { label: 'Кемеровская область', value: 22 },\n    { label: 'Кировская область', value: 23 },\n    { label: 'Костромская область', value: 24 },\n    { label: 'Краснодарский край', value: 25 },\n    { label: 'Красноярский край', value: 26 },\n    { label: 'Курганская область', value: 27 },\n    { label: 'Курская область', value: 28 },\n    { label: 'Ленинградская область', value: 29 },\n    { label: 'Липецкая область', value: 30 },\n    { label: 'Магаданская обл.', value: 31 },\n    { label: 'Московская обл.', value: 32 },\n    { label: 'Мурманская обл.', value: 33 },\n    { label: 'Ненецкий АО', value: 34 },\n    { label: 'Нижегородская область', value: 35 },\n    { label: 'Новгородская область', value: 36 },\n    { label: 'Новосибирская область', value: 37 },\n    { label: 'Омская область', value: 38 },\n    { label: 'Оренбургская область', value: 39 },\n    { label: 'Орловская область', value: 40 },\n    { label: 'Пензенская область', value: 41 },\n    { label: 'Пермский край', value: 42 },\n    { label: 'Приморский край', value: 43 },\n    { label: 'Псковская область', value: 44 },\n    { label: 'Республика Адыгея', value: 45 },\n    { label: 'Республика Алтай', value: 46 },\n    { label: 'Республика Башкортостан', value: 47 },\n    { label: 'Республика Бурятия', value: 48 },\n    { label: 'Республика Дагестан', value: 49 },\n    { label: 'Республика Ингушетия', value: 50 },\n    { label: 'Республика Калмыкия', value: 51 },\n    { label: 'Республика Карелия', value: 52 },\n    { label: 'Республика Коми', value: 53 },\n    { label: 'Республика Крым', value: 54 },\n    { label: 'Республика Марий Эл', value: 55 },\n    { label: 'Республика Мордовия', value: 56 },\n    { label: 'Республика Саха (Якутия)', value: 57 },\n    { label: 'Республика Северная Осетия - Алания', value: 58 },\n    { label: 'Республика Татарстан', value: 59 },\n    { label: 'Республика Тыва', value: 60 },\n    { label: 'Республика Хакасия', value: 61 },\n    { label: 'Ростовская область', value: 62 },\n    { label: 'Рязанская область', value: 63 },\n    { label: 'Самарская область', value: 64 },\n    { label: 'Саратовская область', value: 65 },\n    { label: 'Сахалинская обл.', value: 66 },\n    { label: 'Свердловская область', value: 67 },\n    { label: 'Смоленская область', value: 68 },\n    { label: 'Ставропольский край', value: 69 },\n    { label: 'Тамбовская область', value: 70 },\n    { label: 'Тверская область', value: 71 },\n    { label: 'Томская область', value: 72 },\n    { label: 'Тульская область', value: 73 },\n    { label: 'Тюменская обл.', value: 74 },\n    { label: 'Удмуртская Республика', value: 75 },\n    { label: 'Ульяновская область', value: 76 },\n    { label: 'Хабаровский край', value: 77 },\n    { label: 'Ханты-Мансийский АО (Югра)', value: 78 },\n    { label: 'Челябинская область', value: 79 },\n    { label: 'Чеченская Республика', value: 80 },\n    { label: 'Чувашская Республика', value: 81 },\n    { label: 'Чукотский АО', value: 82 },\n    { label: 'Ямало-Ненецкий АО', value: 83 },\n    { label: 'Ярославская область', value: 84 },\n];\n\nconst avgSalary: number[] = [25960, 43156, 47526, 32166, 31163, 27403, 31647, 30097, 36081, 31286, 78946, 58310,\n    31008, 39797, 40728, 26053, 42921, 25318, 32473, 38005, 71553, 25699, 37857, 27580, 27948, 33258, 44692, 27887,\n    30125, 42434, 30775, 101662, 50135, 56005, 77277, 32973, 30820, 36048, 32013, 29892, 26834, 30112, 34809, 42026,\n    27339, 27455, 37764, 33137, 37867, 24550, 25663, 25719, 39755, 48316, 28400, 28232, 26999, 65881, 26108, 35722,\n    35619, 37949, 30647, 31192, 33086, 26555, 73261, 37605, 29566, 28256, 26754, 30764, 39707, 33933, 61937, 31990,\n    27927, 46583, 62555, 34944, 26108, 27028, 96930, 86560, 33882];\n\ninterface Task7State {\n\n    cities: number[];\n    sampleIndices: [string, string, string];\n    intervalIndices: [string, string, string];\n}\n\nexport class Task7 extends Task<{}, Task7State> {\n\n    state: Task7State = {\n        cities: [],\n        sampleIndices: ['', '', ''],\n        intervalIndices: ['', '', '']\n    };\n\n    private checkIndices(indices: [string, string, string]) {\n        return indices.filter(Boolean).map(Number).filter(v => !isNaN(v)).length === 3;\n    }\n\n    protected checkParameters(): boolean {\n        const { sampleIndices, intervalIndices } = this.state;\n\n        return this.checkIndices(sampleIndices) && this.checkIndices(intervalIndices);\n    }\n\n    private onCitiesChange(e: { value: number[] }) {\n        this.setState({\n            ...this.state,\n\n            cities: e.value\n        });\n    }\n\n    private onIndexChange(name: 'sampleIndices' | 'intervalIndices', i: number) {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            const indices = [...this.state[name]];\n\n            indices[i] = e.currentTarget.value.trim();\n            this.setState({ ...this.state, [name]: indices });\n        }\n    }\n\n    protected renderParameters() {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n\n        return (\n            <>\n                Выберите города, <strong>не</strong> попавшие в выборку:&nbsp;\n                <MultiSelect filter value={cities} options={citySelectItems} style={{ verticalAlign: 'middle' }}\n                             onChange={this.onCitiesChange.bind(this)} />\n                <br />\n\n                Введите номера необходимых элементов выборки (<strong>X</strong>):&nbsp;\n                {[0, 1, 2].map(i => (\n                    <InputText key={i} value={sampleIndices[i]} onChange={this.onIndexChange('sampleIndices', i)} />\n                ))}\n\n                <ValidationIcon valid={this.checkIndices(sampleIndices)} />\n                <br />\n\n                Введите номера необходимых интервалов (<strong>A</strong>):&nbsp;\n                {[0, 1, 2].map(i => (\n                    <InputText key={i} value={intervalIndices[i]} onChange={this.onIndexChange('intervalIndices', i)} />\n                ))}\n\n                <ValidationIcon valid={this.checkIndices(intervalIndices)} />\n            </>\n        );\n    }\n\n    protected async renderAnswer(): Promise<React.ReactNode> {\n        const { cities, sampleIndices, intervalIndices } = this.state;\n        const sample = avgSalary.filter((_, i) => !cities.includes(i)).sort((a, b) => a - b);\n\n        const numericSampleIndices = sampleIndices.map(v => +v - 1);\n        const numericIntervalIndices = intervalIndices.map(v => +v - 1);\n\n        const a: number[] = [];\n        const intervalLength = (sample[sample.length - 1] - sample[0]) / 10;\n        for (let i = 0; i < 10; ++i) {\n            const intervalOffset = sample[0] + i * intervalLength;\n\n            a[i] = sample.filter((v) => v >= intervalOffset && v < intervalOffset + intervalLength).length;\n        }\n\n        const e = mean(sample);\n        const v = sampleVariance(sample, e);\n        const fixedV = v * sample.length / (sample.length - 1);\n        const m = median(sample);\n\n        return (\n            <>\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericSampleIndices.map(v => (\n                                <td key={v}>\n                                    <strong>X<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={sample[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            {numericIntervalIndices.map(v => (\n                                <td key={v}>\n                                    <strong>A<sub>({v + 1})</sub></strong> =&nbsp;\n                                    <InputText readOnly value={a[v]} />\n                                </td>\n                            ))}\n                        </tr>\n                    </tbody>\n                </table>\n\n                Выборочное среднее:&nbsp;\n                <InputText readOnly value={normalizeNumber(e)} />\n                <br />\n\n                Смещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={normalizeNumber(v)} />\n                <br />\n\n                Несмещенная выборочная дисперсия:&nbsp;\n                <InputText readOnly value={normalizeNumber(fixedV)} />\n                <br />\n\n                Выборочная медиана:&nbsp;\n                <InputText readOnly value={m} />\n                <br />\n\n                Квантиль уровня <strong>0.25</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.25, sample)} />\n                <br />\n\n                Квантиль уровня <strong>0.75</strong>:&nbsp;\n                <InputText readOnly value={sampleQuantile(0.75, sample)} />\n            </>\n        );\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task7 } from '../../tasks/Task7/Task7';\n\nexport class Week7 extends Week {\n\n    weekName = 'Неделя 7. Выборочные характеристики';\n\n    protected renderContent() {\n        return (<Task7 />);\n    }\n}\n","import React from 'react';\nimport mean from 'lodash/mean';\nimport { InputText } from 'primereact/inputtext';\n\nimport { Task } from '../../components/Task/Task';\nimport { DistributionType } from '../../utils/distribution';\nimport { FetchingInputSample } from '../../components/FetchingInputSample/FetchingInputSample';\nimport { ValidationIcon } from '../../components/ValidationIcon/ValidationIcon';\nimport { InputDistributionType } from '../../components/InputDistributionType/InputDistributionType';\nimport { normalizeNumber } from '../../utils/normalizeNumber';\n\ninterface Task8State {\n\n    sample?: number[];\n    distributionType?: DistributionType;\n    specificParameters: { [key: string]: string };\n}\n\nexport class Task8 extends Task<{}, Task8State> {\n\n    state: Task8State = { specificParameters: {} };\n\n    protected checkParameters(): boolean {\n        const { sample, distributionType, specificParameters } = this.state;\n\n        let specificParametersCheck: boolean = true;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n            case DistributionType.BINOMIAL:\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n                specificParametersCheck = false;\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersCheck = !!specificParameters.a && !isNaN(+specificParameters.a) &&\n                    !!specificParameters.b && !isNaN(+specificParameters.b);\n                break;\n\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersCheck = false;\n                break;\n        }\n\n        return !!sample && !!distributionType && specificParametersCheck;\n    }\n\n    private onSampleChange(sample?: number[]) {\n        this.setState({...this.state, sample});\n    }\n\n    private onDistributionTypeChange(distributionType?: DistributionType) {\n        this.setState({ ...this.state, distributionType });\n    }\n\n    private onSpecificParameterChange(name: 'a' | 'b') {\n        return (e: React.FormEvent<HTMLInputElement>) => {\n            this.setState({\n                ...this.state,\n\n                specificParameters: {\n                    ...this.state.specificParameters,\n\n                    [name]: e.currentTarget.value.trim()\n                }\n            });\n        }\n    }\n\n    protected renderParameters() {\n        const { distributionType, specificParameters } = this.state;\n\n        let specificParametersOutput: React.ReactNode;\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n            case DistributionType.BINOMIAL:\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n                specificParametersOutput = (\n                    <>\n                        // TODO\n                    </>\n                );\n                break;\n\n            case DistributionType.UNIFORM:\n                specificParametersOutput = (\n                    <>\n                        Четвёртое задание:\n                        <br />\n\n                        <strong>a</strong> =&nbsp;\n                        <InputText value={specificParameters.a ?? ''} onChange={this.onSpecificParameterChange('a')} />\n                        <ValidationIcon valid={!!specificParameters.a && !isNaN(+specificParameters.a)} />\n                        <br />\n\n                        <strong>b</strong> =&nbsp;\n                        <InputText value={specificParameters.b ?? ''} onChange={this.onSpecificParameterChange('b')} />\n                        <ValidationIcon valid={!!specificParameters.b && !isNaN(+specificParameters.b)} />\n                    </>\n                );\n                break;\n\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                specificParametersOutput = (\n                    <>\n                        // TODO\n                    </>\n                );\n                break;\n        }\n\n        return (\n            <>\n                Выборка для задания:&nbsp;\n                <FetchingInputSample onChange={this.onSampleChange.bind(this)} />\n                <br />\n\n                Распределение:&nbsp;\n                <InputDistributionType value={distributionType} onChange={this.onDistributionTypeChange.bind(this)} />\n                <br />\n\n                {specificParametersOutput}\n            </>\n        );\n    }\n\n    private renderUniformAnswer(avg: number, variance: number): React.ReactNode {\n        const { sample, specificParameters } = this.state;\n\n        if (!sample) {\n            return;\n        }\n\n        const sqrt3Variance = Math.sqrt(3 * variance);\n        const b = sample[sample.length - 1];\n        const a = sample[0];\n\n        return (\n            <>\n                Оценка метода моментов <strong>&#952;&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg - sqrt3Variance)} />\n                <br />\n\n                Оценка метода моментов <strong>b&#770;</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber(avg + sqrt3Variance)} />\n                <br />\n\n                Оценка максимального правдоподобия <strong>b</strong>:&nbsp;\n                <InputText readOnly value={b} />\n                <br />\n\n                Вероятность обрушения на участке от&nbsp;\n                <strong>a = {specificParameters.a}</strong> до&nbsp;\n                <strong>b = {specificParameters.b}</strong>:&nbsp;\n                <InputText readOnly value={normalizeNumber((+specificParameters.b - +specificParameters.a) / (b - a))} />\n                <br />\n            </>\n        );\n    }\n\n    protected async renderAnswer() {\n        const { sample, distributionType } = this.state;\n\n        if (!sample || !distributionType) {\n            return;\n        }\n\n        const avg = mean(sample);\n        const sqAvg = mean(sample.map(x => x ** 2));\n        const sampleVariance = sqAvg - avg ** 2;\n\n        switch (distributionType) {\n            case DistributionType.BERNOULLI:\n            case DistributionType.BINOMIAL:\n            case DistributionType.GEOMETRIC:\n            case DistributionType.POISSON:\n                return (\n                    <>\n                        // TODO\n                    </>\n                );\n\n            case DistributionType.UNIFORM:\n                return this.renderUniformAnswer(avg, sampleVariance);\n\n            case DistributionType.EXPONENTIAL:\n            case DistributionType.NORMAL:\n                return (\n                    <>\n                        // TODO\n                    </>\n                );\n        }\n    }\n}\n","import React from 'react';\n\nimport { Week } from '../../components/Week/Week';\nimport { Task8 } from '../../tasks/Task8/Task8';\n\nexport class Week8 extends Week {\n\n    weekName = 'Неделя 8. Точечное оценивание (только равномерное распределение)';\n\n    protected renderContent() {\n        return (<Task8 />);\n    }\n}\n","import React from 'react';\n\nimport { Week6 } from '../../weeks/Week6/Week6';\nimport { Week7 } from '../../weeks/Week7/Week7';\n\nimport './App.css';\nimport { Panel } from 'primereact/panel';\nimport { Week8 } from '../../weeks/Week8/Week8';\n\nexport class App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Panel header=\"Добро пожаловать!\">\n                    Это онлайн программа для решения задач из упражнений онлайн-курса Прикладная статистика.\n                    <br />\n\n                    Автор:&nbsp;\n                    <a href=\"https://byprogminer.ru/vk\" target=\"_blank\" rel=\"noopener noreferrer\">Доморацкий Эридан</a>\n                    <br />\n\n                    <a href=\"https://my.qiwi.com/Erydan-DMVuYwfjtW\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <small>(донатить сюда)</small>\n                    </a>\n                </Panel>\n\n                <Week6 />\n                <Week7 />\n                <Week8 />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}